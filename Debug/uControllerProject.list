
uControllerProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d4  080063d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063dc  080063dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  08006454  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08006454  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002791  00000000  00000000  00032574  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00035da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e69  00000000  00000000  00036d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd66  00000000  00000000  00059b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5e59  00000000  00000000  000698cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004974  00000000  00000000  0013f7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f94 	.word	0x08005f94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005f94 	.word	0x08005f94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 fd17 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f004 f9e0 	bl	80051e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fd2f 	bl	80018b2 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 fcf7 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000000 	.word	0x20000000

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	200002a0 	.word	0x200002a0

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200002a0 	.word	0x200002a0

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_Delay+0x40>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e033      	b.n	8000f92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d109      	bne.n	8000f46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f003 f964 	bl	8004200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d118      	bne.n	8000f84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f5a:	f023 0302 	bic.w	r3, r3, #2
 8000f5e:	f043 0202 	orr.w	r2, r3, #2
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 faa2 	bl	80014b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f023 0303 	bic.w	r3, r3, #3
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40
 8000f82:	e001      	b.n	8000f88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_ADC_Start+0x1a>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e0a5      	b.n	8001102 <HAL_ADC_Start+0x166>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d018      	beq.n	8000ffe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fdc:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <HAL_ADC_Start+0x174>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a4c      	ldr	r2, [pc, #304]	; (8001114 <HAL_ADC_Start+0x178>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0c9a      	lsrs	r2, r3, #18
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ff0:	e002      	b.n	8000ff8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f9      	bne.n	8000ff2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	d179      	bne.n	8001100 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001036:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800104a:	d106      	bne.n	800105a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001050:	f023 0206 	bic.w	r2, r3, #6
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	645a      	str	r2, [r3, #68]	; 0x44
 8001058:	e002      	b.n	8001060 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_ADC_Start+0x17c>)
 800106a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	2b00      	cmp	r3, #0
 8001080:	d12a      	bne.n	80010d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <HAL_ADC_Start+0x180>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d015      	beq.n	80010b8 <HAL_ADC_Start+0x11c>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a23      	ldr	r2, [pc, #140]	; (8001120 <HAL_ADC_Start+0x184>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d105      	bne.n	80010a2 <HAL_ADC_Start+0x106>
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_ADC_Start+0x17c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00a      	beq.n	80010b8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <HAL_ADC_Start+0x188>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d129      	bne.n	8001100 <HAL_ADC_Start+0x164>
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_ADC_Start+0x17c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d823      	bhi.n	8001100 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11c      	bne.n	8001100 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	e013      	b.n	8001100 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_ADC_Start+0x180>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10e      	bne.n	8001100 <HAL_ADC_Start+0x164>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d107      	bne.n	8001100 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010fe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	431bde83 	.word	0x431bde83
 8001118:	40012300 	.word	0x40012300
 800111c:	40012000 	.word	0x40012000
 8001120:	40012100 	.word	0x40012100
 8001124:	40012200 	.word	0x40012200

08001128 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001144:	d113      	bne.n	800116e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001154:	d10b      	bne.n	800116e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f043 0220 	orr.w	r2, r3, #32
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e05c      	b.n	8001228 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800116e:	f7ff fea3 	bl	8000eb8 <HAL_GetTick>
 8001172:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001174:	e01a      	b.n	80011ac <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d016      	beq.n	80011ac <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_ADC_PollForConversion+0x6c>
 8001184:	f7ff fe98 	bl	8000eb8 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d20b      	bcs.n	80011ac <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f043 0204 	orr.w	r2, r3, #4
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e03d      	b.n	8001228 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d1dd      	bne.n	8001176 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f06f 0212 	mvn.w	r2, #18
 80011c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d123      	bne.n	8001226 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d11f      	bne.n	8001226 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d111      	bne.n	8001226 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d105      	bne.n	8001226 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1c>
 8001264:	2302      	movs	r3, #2
 8001266:	e113      	b.n	8001490 <HAL_ADC_ConfigChannel+0x244>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b09      	cmp	r3, #9
 8001276:	d925      	bls.n	80012c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68d9      	ldr	r1, [r3, #12]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	3b1e      	subs	r3, #30
 800128e:	2207      	movs	r2, #7
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43da      	mvns	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	400a      	ands	r2, r1
 800129c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68d9      	ldr	r1, [r3, #12]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4403      	add	r3, r0
 80012b6:	3b1e      	subs	r3, #30
 80012b8:	409a      	lsls	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	e022      	b.n	800130a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6919      	ldr	r1, [r3, #16]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	2207      	movs	r2, #7
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6919      	ldr	r1, [r3, #16]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	4603      	mov	r3, r0
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4403      	add	r3, r0
 8001300:	409a      	lsls	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b06      	cmp	r3, #6
 8001310:	d824      	bhi.n	800135c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b05      	subs	r3, #5
 8001324:	221f      	movs	r2, #31
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	400a      	ands	r2, r1
 8001332:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	3b05      	subs	r3, #5
 800134e:	fa00 f203 	lsl.w	r2, r0, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
 800135a:	e04c      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	d824      	bhi.n	80013ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	3b23      	subs	r3, #35	; 0x23
 8001376:	221f      	movs	r2, #31
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43da      	mvns	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	400a      	ands	r2, r1
 8001384:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b23      	subs	r3, #35	; 0x23
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	e023      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b41      	subs	r3, #65	; 0x41
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3b41      	subs	r3, #65	; 0x41
 80013ea:	fa00 f203 	lsl.w	r2, r0, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_ADC_ConfigChannel+0x250>)
 80013f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a28      	ldr	r2, [pc, #160]	; (80014a0 <HAL_ADC_ConfigChannel+0x254>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d10f      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1d8>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b12      	cmp	r3, #18
 800140a:	d10b      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_ADC_ConfigChannel+0x254>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12b      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x23a>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_ADC_ConfigChannel+0x258>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_ADC_ConfigChannel+0x1f4>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b11      	cmp	r3, #17
 800143e:	d122      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_ADC_ConfigChannel+0x258>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d111      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HAL_ADC_ConfigChannel+0x260>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0c9a      	lsrs	r2, r3, #18
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001478:	e002      	b.n	8001480 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3b01      	subs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f9      	bne.n	800147a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40012300 	.word	0x40012300
 80014a0:	40012000 	.word	0x40012000
 80014a4:	10000012 	.word	0x10000012
 80014a8:	20000008 	.word	0x20000008
 80014ac:	431bde83 	.word	0x431bde83

080014b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b8:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <ADC_Init+0x1f0>)
 80014ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	021a      	lsls	r2, r3, #8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6899      	ldr	r1, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <ADC_Init+0x1f4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d022      	beq.n	800158e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001556:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6899      	ldr	r1, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6899      	ldr	r1, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e00f      	b.n	80015ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800159c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0202 	bic.w	r2, r2, #2
 80015bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6899      	ldr	r1, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e1b      	ldrb	r3, [r3, #24]
 80015c8:	005a      	lsls	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01b      	beq.n	8001614 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6859      	ldr	r1, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	3b01      	subs	r3, #1
 8001608:	035a      	lsls	r2, r3, #13
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	e007      	b.n	8001624 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001622:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	3b01      	subs	r3, #1
 8001640:	051a      	lsls	r2, r3, #20
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6899      	ldr	r1, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001666:	025a      	lsls	r2, r3, #9
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800167e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6899      	ldr	r1, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	029a      	lsls	r2, r3, #10
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40012300 	.word	0x40012300
 80016a4:	0f000001 	.word	0x0f000001

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff29 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff3e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff31 	bl	800170c <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e165      	b.n	8001bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	429a      	cmp	r2, r3
 8001902:	f040 8154 	bne.w	8001bae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x4a>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b12      	cmp	r3, #18
 8001914:	d123      	bne.n	800195e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	69b9      	ldr	r1, [r7, #24]
 800195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0203 	and.w	r2, r3, #3
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d00b      	beq.n	80019b2 <HAL_GPIO_Init+0xe6>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a6:	2b11      	cmp	r3, #17
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d130      	bne.n	8001a14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 0201 	and.w	r2, r3, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80ae 	beq.w	8001bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b5c      	ldr	r3, [pc, #368]	; (8001bc8 <HAL_GPIO_Init+0x2fc>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_GPIO_Init+0x2fc>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_GPIO_Init+0x2fc>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6e:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_GPIO_Init+0x300>)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	220f      	movs	r2, #15
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d025      	beq.n	8001ae6 <HAL_GPIO_Init+0x21a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_GPIO_Init+0x308>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01f      	beq.n	8001ae2 <HAL_GPIO_Init+0x216>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_GPIO_Init+0x30c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d019      	beq.n	8001ade <HAL_GPIO_Init+0x212>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_GPIO_Init+0x310>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0x20e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_GPIO_Init+0x314>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_GPIO_Init+0x20a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a49      	ldr	r2, [pc, #292]	; (8001be4 <HAL_GPIO_Init+0x318>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d007      	beq.n	8001ad2 <HAL_GPIO_Init+0x206>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a48      	ldr	r2, [pc, #288]	; (8001be8 <HAL_GPIO_Init+0x31c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_GPIO_Init+0x202>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e00c      	b.n	8001ae8 <HAL_GPIO_Init+0x21c>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x21c>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x21c>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x21c>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x21c>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x21c>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x21c>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af8:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_GPIO_Init+0x300>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b06:	4b39      	ldr	r3, [pc, #228]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b54:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_GPIO_Init+0x320>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f ae96 	bls.w	80018e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3724      	adds	r7, #36	; 0x24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 f870 	bl	8004d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e10f      	b.n	8001e86 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f002 fbee 	bl	800445c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c98:	f001 f820 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4a7b      	ldr	r2, [pc, #492]	; (8001e90 <HAL_I2C_Init+0x23c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d807      	bhi.n	8001cb8 <HAL_I2C_Init+0x64>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a7a      	ldr	r2, [pc, #488]	; (8001e94 <HAL_I2C_Init+0x240>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bf94      	ite	ls
 8001cb0:	2301      	movls	r3, #1
 8001cb2:	2300      	movhi	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	e006      	b.n	8001cc6 <HAL_I2C_Init+0x72>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_I2C_Init+0x244>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	bf94      	ite	ls
 8001cc0:	2301      	movls	r3, #1
 8001cc2:	2300      	movhi	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0db      	b.n	8001e86 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a72      	ldr	r2, [pc, #456]	; (8001e9c <HAL_I2C_Init+0x248>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0c9b      	lsrs	r3, r3, #18
 8001cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a64      	ldr	r2, [pc, #400]	; (8001e90 <HAL_I2C_Init+0x23c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d802      	bhi.n	8001d08 <HAL_I2C_Init+0xb4>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	e009      	b.n	8001d1c <HAL_I2C_Init+0xc8>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <HAL_I2C_Init+0x24c>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4956      	ldr	r1, [pc, #344]	; (8001e90 <HAL_I2C_Init+0x23c>)
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d80d      	bhi.n	8001d58 <HAL_I2C_Init+0x104>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e59      	subs	r1, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	bf38      	it	cc
 8001d54:	2304      	movcc	r3, #4
 8001d56:	e04f      	b.n	8001df8 <HAL_I2C_Init+0x1a4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d111      	bne.n	8001d84 <HAL_I2C_Init+0x130>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1e58      	subs	r0, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	440b      	add	r3, r1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	e012      	b.n	8001daa <HAL_I2C_Init+0x156>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	0099      	lsls	r1, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Init+0x15e>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e022      	b.n	8001df8 <HAL_I2C_Init+0x1a4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10e      	bne.n	8001dd8 <HAL_I2C_Init+0x184>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e58      	subs	r0, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6859      	ldr	r1, [r3, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	440b      	add	r3, r1
 8001dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd6:	e00f      	b.n	8001df8 <HAL_I2C_Init+0x1a4>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1e58      	subs	r0, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	0099      	lsls	r1, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	6809      	ldr	r1, [r1, #0]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6911      	ldr	r1, [r2, #16]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	000186a0 	.word	0x000186a0
 8001e94:	001e847f 	.word	0x001e847f
 8001e98:	003d08ff 	.word	0x003d08ff
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7fe fffe 	bl	8000eb8 <HAL_GetTick>
 8001ebc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	f040 80e0 	bne.w	800208c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2319      	movs	r3, #25
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4970      	ldr	r1, [pc, #448]	; (8002098 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fc34 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e0d3      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x50>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e0cc      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ea>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d007      	beq.n	8001f1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2221      	movs	r2, #33	; 0x21
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	893a      	ldrh	r2, [r7, #8]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a50      	ldr	r2, [pc, #320]	; (800209c <HAL_I2C_Master_Transmit+0x1f8>)
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fac2 	bl	80024ec <I2C_MasterRequestWrite>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e08d      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f88:	e066      	b.n	8002058 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	6a39      	ldr	r1, [r7, #32]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fcae 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d107      	bne.n	8001fb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06b      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11b      	bne.n	800202c <HAL_I2C_Master_Transmit+0x188>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d017      	beq.n	800202c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	6a39      	ldr	r1, [r7, #32]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fc9e 	bl	8002972 <I2C_WaitOnBTFFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	2b04      	cmp	r3, #4
 8002042:	d107      	bne.n	8002054 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002052:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e01a      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	d194      	bne.n	8001f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	00100002 	.word	0x00100002
 800209c:	ffff0000 	.word	0xffff0000

080020a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	461a      	mov	r2, r3
 80020ac:	460b      	mov	r3, r1
 80020ae:	817b      	strh	r3, [r7, #10]
 80020b0:	4613      	mov	r3, r2
 80020b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7fe ff00 	bl	8000eb8 <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	f040 820b 	bne.w	80024de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2319      	movs	r3, #25
 80020ce:	2201      	movs	r2, #1
 80020d0:	497c      	ldr	r1, [pc, #496]	; (80022c4 <HAL_I2C_Master_Receive+0x224>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fb36 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	e1fe      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_I2C_Master_Receive+0x50>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e1f7      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d007      	beq.n	8002116 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002124:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2222      	movs	r2, #34	; 0x22
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2210      	movs	r2, #16
 8002132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	893a      	ldrh	r2, [r7, #8]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <HAL_I2C_Master_Receive+0x228>)
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fa3a 	bl	80025d8 <I2C_MasterRequestRead>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1b8      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	2b00      	cmp	r3, #0
 8002174:	d113      	bne.n	800219e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e18c      	b.n	80024b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d11b      	bne.n	80021de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e16c      	b.n	80024b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d11b      	bne.n	800221e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	e14c      	b.n	80024b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800222c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002244:	e138      	b.n	80024b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	2b03      	cmp	r3, #3
 800224c:	f200 80f1 	bhi.w	8002432 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	2b01      	cmp	r3, #1
 8002256:	d123      	bne.n	80022a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fbc9 	bl	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e139      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800229e:	e10b      	b.n	80024b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d14e      	bne.n	8002346 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	2200      	movs	r2, #0
 80022b0:	4906      	ldr	r1, [pc, #24]	; (80022cc <HAL_I2C_Master_Receive+0x22c>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fa46 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e10e      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
 80022c2:	bf00      	nop
 80022c4:	00100002 	.word	0x00100002
 80022c8:	ffff0000 	.word	0xffff0000
 80022cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002344:	e0b8      	b.n	80024b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	2200      	movs	r2, #0
 800234e:	4966      	ldr	r1, [pc, #408]	; (80024e8 <HAL_I2C_Master_Receive+0x448>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9f7 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0bf      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	2200      	movs	r2, #0
 80023aa:	494f      	ldr	r1, [pc, #316]	; (80024e8 <HAL_I2C_Master_Receive+0x448>)
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f9c9 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e091      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002430:	e042      	b.n	80024b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fadc 	bl	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e04c      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b04      	cmp	r3, #4
 8002484:	d118      	bne.n	80024b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f aec2 	bne.w	8002246 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	00010004 	.word	0x00010004

080024ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d006      	beq.n	8002516 <I2C_MasterRequestWrite+0x2a>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d003      	beq.n	8002516 <I2C_MasterRequestWrite+0x2a>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002514:	d108      	bne.n	8002528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e00b      	b.n	8002540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	2b12      	cmp	r3, #18
 800252e:	d107      	bne.n	8002540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800253e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f8f9 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e035      	b.n	80025c8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002564:	d108      	bne.n	8002578 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	e01b      	b.n	80025b0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002578:	897b      	ldrh	r3, [r7, #10]
 800257a:	11db      	asrs	r3, r3, #7
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 0306 	and.w	r3, r3, #6
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f063 030f 	orn	r3, r3, #15
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	490e      	ldr	r1, [pc, #56]	; (80025d0 <I2C_MasterRequestWrite+0xe4>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f92b 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e010      	b.n	80025c8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <I2C_MasterRequestWrite+0xe8>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f91b 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	00010008 	.word	0x00010008
 80025d4:	00010002 	.word	0x00010002

080025d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	460b      	mov	r3, r1
 80025e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d006      	beq.n	8002612 <I2C_MasterRequestRead+0x3a>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d003      	beq.n	8002612 <I2C_MasterRequestRead+0x3a>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002610:	d108      	bne.n	8002624 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e00b      	b.n	800263c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2b11      	cmp	r3, #17
 800262a:	d107      	bne.n	800263c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f87b 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e06d      	b.n	8002734 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002660:	d108      	bne.n	8002674 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	b2da      	uxtb	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	e053      	b.n	800271c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	11db      	asrs	r3, r3, #7
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f003 0306 	and.w	r3, r3, #6
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f063 030f 	orn	r3, r3, #15
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	492a      	ldr	r1, [pc, #168]	; (800273c <I2C_MasterRequestRead+0x164>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f8ad 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e048      	b.n	8002734 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4923      	ldr	r1, [pc, #140]	; (8002740 <I2C_MasterRequestRead+0x168>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f89d 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e038      	b.n	8002734 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f825 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e017      	b.n	8002734 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002704:	897b      	ldrh	r3, [r7, #10]
 8002706:	11db      	asrs	r3, r3, #7
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 0306 	and.w	r3, r3, #6
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f063 030e 	orn	r3, r3, #14
 8002714:	b2da      	uxtb	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4907      	ldr	r1, [pc, #28]	; (8002740 <I2C_MasterRequestRead+0x168>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f865 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	00010008 	.word	0x00010008
 8002740:	00010002 	.word	0x00010002

08002744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002754:	e025      	b.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d021      	beq.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fbab 	bl	8000eb8 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e023      	b.n	80027ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10d      	bne.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	e00c      	b.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d0b6      	beq.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002800:	e051      	b.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d123      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800282a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e046      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d021      	beq.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe fb29 	bl	8000eb8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e020      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10c      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e00b      	b.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	43da      	mvns	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d18d      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fc:	e02d      	b.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f8ce 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e02d      	b.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d021      	beq.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe facf 	bl	8000eb8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d116      	bne.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e007      	b.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d1ca      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800297e:	e02d      	b.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f88d 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e02d      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d021      	beq.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe fa8e 	bl	8000eb8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d302      	bcc.n	80029ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d1ca      	bne.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a00:	e042      	b.n	8002a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d119      	bne.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0210 	mvn.w	r2, #16
 8002a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e029      	b.n	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a44:	f7fe fa38 	bl	8000eb8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e007      	b.n	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d1b5      	bne.n	8002a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d11b      	bne.n	8002af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f043 0204 	orr.w	r2, r3, #4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0ca      	b.n	8002caa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b62      	ldr	r3, [pc, #392]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b6      	b.n	8002caa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494c      	ldr	r1, [pc, #304]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07d      	b.n	8002caa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06d      	b.n	8002caa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e065      	b.n	8002caa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4933      	ldr	r1, [pc, #204]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe f962 	bl	8000eb8 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe f95e 	bl	8000eb8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04d      	b.n	8002caa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e030      	b.n	8002caa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4915      	ldr	r1, [pc, #84]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490d      	ldr	r1, [pc, #52]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f83d 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fe f8c4 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08006388 	.word	0x08006388
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08006398 	.word	0x08006398

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1e:	4b9f      	ldr	r3, [pc, #636]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	f200 8130 	bhi.w	8002f8c <HAL_RCC_GetSysClockFreq+0x288>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_RCC_GetSysClockFreq+0x30>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08002f8d 	.word	0x08002f8d
 8002d3c:	08002f8d 	.word	0x08002f8d
 8002d40:	08002f8d 	.word	0x08002f8d
 8002d44:	08002d6f 	.word	0x08002d6f
 8002d48:	08002f8d 	.word	0x08002f8d
 8002d4c:	08002f8d 	.word	0x08002f8d
 8002d50:	08002f8d 	.word	0x08002f8d
 8002d54:	08002d75 	.word	0x08002d75
 8002d58:	08002f8d 	.word	0x08002f8d
 8002d5c:	08002f8d 	.word	0x08002f8d
 8002d60:	08002f8d 	.word	0x08002f8d
 8002d64:	08002e83 	.word	0x08002e83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b8d      	ldr	r3, [pc, #564]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002d6a:	613b      	str	r3, [r7, #16]
       break;
 8002d6c:	e111      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6e:	4b8d      	ldr	r3, [pc, #564]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002d70:	613b      	str	r3, [r7, #16]
      break;
 8002d72:	e10e      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d74:	4b89      	ldr	r3, [pc, #548]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7e:	4b87      	ldr	r3, [pc, #540]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d023      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b84      	ldr	r3, [pc, #528]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	f04f 0400 	mov.w	r4, #0
 8002d94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	ea03 0501 	and.w	r5, r3, r1
 8002da0:	ea04 0602 	and.w	r6, r4, r2
 8002da4:	4a7f      	ldr	r2, [pc, #508]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002da6:	fb02 f106 	mul.w	r1, r2, r6
 8002daa:	2200      	movs	r2, #0
 8002dac:	fb02 f205 	mul.w	r2, r2, r5
 8002db0:	440a      	add	r2, r1
 8002db2:	497c      	ldr	r1, [pc, #496]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002db4:	fba5 0101 	umull	r0, r1, r5, r1
 8002db8:	1853      	adds	r3, r2, r1
 8002dba:	4619      	mov	r1, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f04f 0400 	mov.w	r4, #0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	f7fd fe91 	bl	8000aec <__aeabi_uldivmod>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e049      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b72      	ldr	r3, [pc, #456]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	ea03 0501 	and.w	r5, r3, r1
 8002de8:	ea04 0602 	and.w	r6, r4, r2
 8002dec:	4629      	mov	r1, r5
 8002dee:	4632      	mov	r2, r6
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	f04f 0400 	mov.w	r4, #0
 8002df8:	0154      	lsls	r4, r2, #5
 8002dfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dfe:	014b      	lsls	r3, r1, #5
 8002e00:	4619      	mov	r1, r3
 8002e02:	4622      	mov	r2, r4
 8002e04:	1b49      	subs	r1, r1, r5
 8002e06:	eb62 0206 	sbc.w	r2, r2, r6
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f04f 0400 	mov.w	r4, #0
 8002e12:	0194      	lsls	r4, r2, #6
 8002e14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e18:	018b      	lsls	r3, r1, #6
 8002e1a:	1a5b      	subs	r3, r3, r1
 8002e1c:	eb64 0402 	sbc.w	r4, r4, r2
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	00e2      	lsls	r2, r4, #3
 8002e2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e2e:	00d9      	lsls	r1, r3, #3
 8002e30:	460b      	mov	r3, r1
 8002e32:	4614      	mov	r4, r2
 8002e34:	195b      	adds	r3, r3, r5
 8002e36:	eb44 0406 	adc.w	r4, r4, r6
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	02a2      	lsls	r2, r4, #10
 8002e44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e48:	0299      	lsls	r1, r3, #10
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	4621      	mov	r1, r4
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	f7fd fe46 	bl	8000aec <__aeabi_uldivmod>
 8002e60:	4603      	mov	r3, r0
 8002e62:	460c      	mov	r4, r1
 8002e64:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e66:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	3301      	adds	r3, #1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	e087      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e82:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e8a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8c:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d023      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e98:	4b40      	ldr	r3, [pc, #256]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	f04f 0400 	mov.w	r4, #0
 8002ea2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	ea03 0501 	and.w	r5, r3, r1
 8002eae:	ea04 0602 	and.w	r6, r4, r2
 8002eb2:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002eb4:	fb02 f106 	mul.w	r1, r2, r6
 8002eb8:	2200      	movs	r2, #0
 8002eba:	fb02 f205 	mul.w	r2, r2, r5
 8002ebe:	440a      	add	r2, r1
 8002ec0:	4938      	ldr	r1, [pc, #224]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ec2:	fba5 0101 	umull	r0, r1, r5, r1
 8002ec6:	1853      	adds	r3, r2, r1
 8002ec8:	4619      	mov	r1, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f04f 0400 	mov.w	r4, #0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	f7fd fe0a 	bl	8000aec <__aeabi_uldivmod>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	460c      	mov	r4, r1
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e049      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	f04f 0400 	mov.w	r4, #0
 8002eea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	ea03 0501 	and.w	r5, r3, r1
 8002ef6:	ea04 0602 	and.w	r6, r4, r2
 8002efa:	4629      	mov	r1, r5
 8002efc:	4632      	mov	r2, r6
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	f04f 0400 	mov.w	r4, #0
 8002f06:	0154      	lsls	r4, r2, #5
 8002f08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f0c:	014b      	lsls	r3, r1, #5
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4622      	mov	r2, r4
 8002f12:	1b49      	subs	r1, r1, r5
 8002f14:	eb62 0206 	sbc.w	r2, r2, r6
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	f04f 0400 	mov.w	r4, #0
 8002f20:	0194      	lsls	r4, r2, #6
 8002f22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f26:	018b      	lsls	r3, r1, #6
 8002f28:	1a5b      	subs	r3, r3, r1
 8002f2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	00e2      	lsls	r2, r4, #3
 8002f38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f3c:	00d9      	lsls	r1, r3, #3
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4614      	mov	r4, r2
 8002f42:	195b      	adds	r3, r3, r5
 8002f44:	eb44 0406 	adc.w	r4, r4, r6
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	02a2      	lsls	r2, r4, #10
 8002f52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f56:	0299      	lsls	r1, r3, #10
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4614      	mov	r4, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4621      	mov	r1, r4
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f04f 0400 	mov.w	r4, #0
 8002f66:	461a      	mov	r2, r3
 8002f68:	4623      	mov	r3, r4
 8002f6a:	f7fd fdbf 	bl	8000aec <__aeabi_uldivmod>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x298>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0f1b      	lsrs	r3, r3, #28
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	613b      	str	r3, [r7, #16]
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002f8e:	613b      	str	r3, [r7, #16]
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	693b      	ldr	r3, [r7, #16]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	017d7840 	.word	0x017d7840

08002fa8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8083 	beq.w	80030c8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fc2:	4b95      	ldr	r3, [pc, #596]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d019      	beq.n	8003002 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fce:	4b92      	ldr	r3, [pc, #584]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fda:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe6:	d00c      	beq.n	8003002 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe8:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d112      	bne.n	800301a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff4:	4b88      	ldr	r3, [pc, #544]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003000:	d10b      	bne.n	800301a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003002:	4b85      	ldr	r3, [pc, #532]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d05b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x11e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d157      	bne.n	80030c6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e216      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x8a>
 8003024:	4b7c      	ldr	r3, [pc, #496]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a7b      	ldr	r2, [pc, #492]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e01d      	b.n	800306e <HAL_RCC_OscConfig+0xc6>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303a:	d10c      	bne.n	8003056 <HAL_RCC_OscConfig+0xae>
 800303c:	4b76      	ldr	r3, [pc, #472]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a75      	ldr	r2, [pc, #468]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b73      	ldr	r3, [pc, #460]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a72      	ldr	r2, [pc, #456]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e00b      	b.n	800306e <HAL_RCC_OscConfig+0xc6>
 8003056:	4b70      	ldr	r3, [pc, #448]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6f      	ldr	r2, [pc, #444]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 800305c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6c      	ldr	r2, [pc, #432]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fd ff1f 	bl	8000eb8 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307e:	f7fd ff1b 	bl	8000eb8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	; 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1db      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0xd6>
 800309c:	e014      	b.n	80030c8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fd ff0b 	bl	8000eb8 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a6:	f7fd ff07 	bl	8000eb8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1c7      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b8:	4b57      	ldr	r3, [pc, #348]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0xfe>
 80030c4:	e000      	b.n	80030c8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d06f      	beq.n	80031b4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d105      	bne.n	80030f8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ec:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d11c      	bne.n	800313e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003104:	4b44      	ldr	r3, [pc, #272]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003110:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x180>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e18f      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4938      	ldr	r1, [pc, #224]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313c:	e03a      	b.n	80031b4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003146:	4b35      	ldr	r3, [pc, #212]	; (800321c <HAL_RCC_OscConfig+0x274>)
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fd feb4 	bl	8000eb8 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003154:	f7fd feb0 	bl	8000eb8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e170      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4925      	ldr	r1, [pc, #148]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
 8003186:	e015      	b.n	80031b4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x274>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fd fe93 	bl	8000eb8 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fd fe8f 	bl	8000eb8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e14f      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d037      	beq.n	8003230 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d016      	beq.n	80031f6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c8:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_RCC_OscConfig+0x278>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fd fe73 	bl	8000eb8 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fd fe6f 	bl	8000eb8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e12f      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_OscConfig+0x270>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x22e>
 80031f4:	e01c      	b.n	8003230 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <HAL_RCC_OscConfig+0x278>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fd fe5c 	bl	8000eb8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003202:	e00f      	b.n	8003224 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003204:	f7fd fe58 	bl	8000eb8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d908      	bls.n	8003224 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e118      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	42470000 	.word	0x42470000
 8003220:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b8a      	ldr	r3, [pc, #552]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e9      	bne.n	8003204 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8097 	beq.w	800336c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b83      	ldr	r3, [pc, #524]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b7f      	ldr	r3, [pc, #508]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a7e      	ldr	r2, [pc, #504]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b7c      	ldr	r3, [pc, #496]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b79      	ldr	r3, [pc, #484]	; (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d118      	bne.n	80032ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a75      	ldr	r2, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003286:	f7fd fe17 	bl	8000eb8 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328e:	f7fd fe13 	bl	8000eb8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0d3      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x31a>
 80032b4:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	4a65      	ldr	r2, [pc, #404]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6713      	str	r3, [r2, #112]	; 0x70
 80032c0:	e01c      	b.n	80032fc <HAL_RCC_OscConfig+0x354>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x33c>
 80032ca:	4b61      	ldr	r3, [pc, #388]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a60      	ldr	r2, [pc, #384]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
 80032d6:	4b5e      	ldr	r3, [pc, #376]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0x354>
 80032e4:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a59      	ldr	r2, [pc, #356]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80032f6:	f023 0304 	bic.w	r3, r3, #4
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d015      	beq.n	8003330 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fd fdd8 	bl	8000eb8 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fd fdd4 	bl	8000eb8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e092      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ee      	beq.n	800330c <HAL_RCC_OscConfig+0x364>
 800332e:	e014      	b.n	800335a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fd fdc2 	bl	8000eb8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	e00a      	b.n	800334e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fd fdbe 	bl	8000eb8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e07c      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334e:	4b40      	ldr	r3, [pc, #256]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ee      	bne.n	8003338 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d068      	beq.n	8003446 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d060      	beq.n	8003442 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d145      	bne.n	8003414 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_OscConfig+0x4b0>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fd fd93 	bl	8000eb8 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003396:	f7fd fd8f 	bl	8000eb8 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e04f      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f0      	bne.n	8003396 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	061b      	lsls	r3, r3, #24
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	071b      	lsls	r3, r3, #28
 80033e0:	491b      	ldr	r1, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_RCC_OscConfig+0x4b0>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fd64 	bl	8000eb8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd fd60 	bl	8000eb8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e020      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x44c>
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_OscConfig+0x4b0>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fd fd4d 	bl	8000eb8 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7fd fd49 	bl	8000eb8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e009      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_OscConfig+0x4a8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f0      	bne.n	8003422 <HAL_RCC_OscConfig+0x47a>
 8003440:	e001      	b.n	8003446 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
 8003458:	42470060 	.word	0x42470060

0800345c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e056      	b.n	800351c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f001 fe63 	bl	8005154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	ea42 0103 	orr.w	r1, r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	f003 0104 	and.w	r1, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_SPI_Transmit+0x22>
 8003542:	2302      	movs	r3, #2
 8003544:	e11e      	b.n	8003784 <HAL_SPI_Transmit+0x260>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800354e:	f7fd fcb3 	bl	8000eb8 <HAL_GetTick>
 8003552:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003568:	e103      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_SPI_Transmit+0x52>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800357a:	e0fa      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2203      	movs	r2, #3
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c2:	d107      	bne.n	80035d4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d007      	beq.n	80035f2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d14b      	bne.n	8003694 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_SPI_Transmit+0xe6>
 8003604:	8afb      	ldrh	r3, [r7, #22]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d13e      	bne.n	8003688 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800362e:	e02b      	b.n	8003688 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d112      	bne.n	8003664 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	1c9a      	adds	r2, r3, #2
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	86da      	strh	r2, [r3, #54]	; 0x36
 8003662:	e011      	b.n	8003688 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003664:	f7fd fc28 	bl	8000eb8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d803      	bhi.n	800367c <HAL_SPI_Transmit+0x158>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d102      	bne.n	8003682 <HAL_SPI_Transmit+0x15e>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003686:	e074      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ce      	bne.n	8003630 <HAL_SPI_Transmit+0x10c>
 8003692:	e04c      	b.n	800372e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_Transmit+0x17e>
 800369c:	8afb      	ldrh	r3, [r7, #22]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d140      	bne.n	8003724 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036c8:	e02c      	b.n	8003724 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d113      	bne.n	8003700 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80036fe:	e011      	b.n	8003724 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003700:	f7fd fbda 	bl	8000eb8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d803      	bhi.n	8003718 <HAL_SPI_Transmit+0x1f4>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d102      	bne.n	800371e <HAL_SPI_Transmit+0x1fa>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003722:	e026      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1cd      	bne.n	80036ca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f894 	bl	8003860 <SPI_EndRxTxTransaction>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e000      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003770:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003782:	7ffb      	ldrb	r3, [r7, #31]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379c:	e04c      	b.n	8003838 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d048      	beq.n	8003838 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80037a6:	f7fd fb87 	bl	8000eb8 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d902      	bls.n	80037bc <SPI_WaitFlagStateUntilTimeout+0x30>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d13d      	bne.n	8003838 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d4:	d111      	bne.n	80037fa <SPI_WaitFlagStateUntilTimeout+0x6e>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037de:	d004      	beq.n	80037ea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d107      	bne.n	80037fa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003802:	d10f      	bne.n	8003824 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003822:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e00f      	b.n	8003858 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	d1a3      	bne.n	800379e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <SPI_EndRxTxTransaction+0x7c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <SPI_EndRxTxTransaction+0x80>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0d5b      	lsrs	r3, r3, #21
 8003878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388a:	d112      	bne.n	80038b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7ff ff78 	bl	800378c <SPI_WaitFlagStateUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e00f      	b.n	80038d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d0f2      	beq.n	80038b2 <SPI_EndRxTxTransaction+0x52>
 80038cc:	e000      	b.n	80038d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80038ce:	bf00      	nop
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000008 	.word	0x20000008
 80038e0:	165e9f81 	.word	0x165e9f81

080038e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e01d      	b.n	8003932 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f001 fe26 	bl	800555c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 f90e 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2201      	movs	r2, #1
 800394c:	6839      	ldr	r1, [r7, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fb48 	bl	8003fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_TIM_PWM_Start+0x74>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_TIM_PWM_Start+0x2c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <HAL_TIM_PWM_Start+0x78>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_TIM_PWM_Start+0x30>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_TIM_PWM_Start+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010400 	.word	0x40010400

080039b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e0b4      	b.n	8003b3c <HAL_TIM_PWM_ConfigChannel+0x184>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	f200 809f 	bhi.w	8003b28 <HAL_TIM_PWM_ConfigChannel+0x170>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a25 	.word	0x08003a25
 80039f4:	08003b29 	.word	0x08003b29
 80039f8:	08003b29 	.word	0x08003b29
 80039fc:	08003b29 	.word	0x08003b29
 8003a00:	08003a65 	.word	0x08003a65
 8003a04:	08003b29 	.word	0x08003b29
 8003a08:	08003b29 	.word	0x08003b29
 8003a0c:	08003b29 	.word	0x08003b29
 8003a10:	08003aa7 	.word	0x08003aa7
 8003a14:	08003b29 	.word	0x08003b29
 8003a18:	08003b29 	.word	0x08003b29
 8003a1c:	08003b29 	.word	0x08003b29
 8003a20:	08003ae7 	.word	0x08003ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f92a 	bl	8003c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0208 	orr.w	r2, r2, #8
 8003a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0204 	bic.w	r2, r2, #4
 8003a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6999      	ldr	r1, [r3, #24]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	619a      	str	r2, [r3, #24]
      break;
 8003a62:	e062      	b.n	8003b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f97a 	bl	8003d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6999      	ldr	r1, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	021a      	lsls	r2, r3, #8
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	619a      	str	r2, [r3, #24]
      break;
 8003aa4:	e041      	b.n	8003b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f9cf 	bl	8003e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0208 	orr.w	r2, r2, #8
 8003ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0204 	bic.w	r2, r2, #4
 8003ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69d9      	ldr	r1, [r3, #28]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	61da      	str	r2, [r3, #28]
      break;
 8003ae4:	e021      	b.n	8003b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fa23 	bl	8003f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69d9      	ldr	r1, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	021a      	lsls	r2, r3, #8
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	61da      	str	r2, [r3, #28]
      break;
 8003b26:	e000      	b.n	8003b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a40      	ldr	r2, [pc, #256]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d00f      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3a      	ldr	r2, [pc, #232]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d027      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d023      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <TIM_Base_SetConfig+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM_Base_SetConfig+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0xf8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40010400 	.word	0x40010400
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	40001800 	.word	0x40001800
 8003c7c:	40001c00 	.word	0x40001c00
 8003c80:	40002000 	.word	0x40002000

08003c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 0302 	bic.w	r3, r3, #2
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <TIM_OC1_SetConfig+0xd8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x64>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <TIM_OC1_SetConfig+0xd8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC1_SetConfig+0x8e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d111      	bne.n	8003d36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400

08003d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0210 	bic.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0320 	bic.w	r3, r3, #32
 8003dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <TIM_OC2_SetConfig+0xe4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC2_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <TIM_OC2_SetConfig+0xe8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10d      	bne.n	8003de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <TIM_OC2_SetConfig+0xe4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_OC2_SetConfig+0x94>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <TIM_OC2_SetConfig+0xe8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d113      	bne.n	8003e20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <TIM_OC3_SetConfig+0xe0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_OC3_SetConfig+0x66>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <TIM_OC3_SetConfig+0xe4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10d      	bne.n	8003ed2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <TIM_OC3_SetConfig+0xe0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_OC3_SetConfig+0x92>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <TIM_OC3_SetConfig+0xe4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d113      	bne.n	8003f0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <TIM_OC4_SetConfig+0xa4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC4_SetConfig+0x68>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <TIM_OC4_SetConfig+0xa8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d109      	bne.n	8003fb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	019b      	lsls	r3, r3, #6
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	43db      	mvns	r3, r3
 8004006:	401a      	ands	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004042:	2302      	movs	r3, #2
 8004044:	e032      	b.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	4313      	orrs	r3, r2
 8004088:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e03d      	b.n	8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004162:	463b      	mov	r3, r7
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800416e:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <MX_ADC1_Init+0x98>)
 8004170:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <MX_ADC1_Init+0x9c>)
 8004172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004174:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <MX_ADC1_Init+0x98>)
 8004176:	2200      	movs	r2, #0
 8004178:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800417a:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <MX_ADC1_Init+0x98>)
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004180:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <MX_ADC1_Init+0x98>)
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004186:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <MX_ADC1_Init+0x98>)
 8004188:	2200      	movs	r2, #0
 800418a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <MX_ADC1_Init+0x98>)
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004194:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <MX_ADC1_Init+0x98>)
 8004196:	2200      	movs	r2, #0
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800419a:	4b16      	ldr	r3, [pc, #88]	; (80041f4 <MX_ADC1_Init+0x98>)
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <MX_ADC1_Init+0xa0>)
 800419e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <MX_ADC1_Init+0x98>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80041a6:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <MX_ADC1_Init+0x98>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <MX_ADC1_Init+0x98>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <MX_ADC1_Init+0x98>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041ba:	480e      	ldr	r0, [pc, #56]	; (80041f4 <MX_ADC1_Init+0x98>)
 80041bc:	f7fc feaa 	bl	8000f14 <HAL_ADC_Init>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80041c6:	f000 ff87 	bl	80050d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041d6:	463b      	mov	r3, r7
 80041d8:	4619      	mov	r1, r3
 80041da:	4806      	ldr	r0, [pc, #24]	; (80041f4 <MX_ADC1_Init+0x98>)
 80041dc:	f7fd f836 	bl	800124c <HAL_ADC_ConfigChannel>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80041e6:	f000 ff77 	bl	80050d8 <Error_Handler>
  }

}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200002a4 	.word	0x200002a4
 80041f8:	40012000 	.word	0x40012000
 80041fc:	0f000001 	.word	0x0f000001

08004200 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_ADC_MspInit+0x7c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d127      	bne.n	8004272 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <HAL_ADC_MspInit+0x80>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_ADC_MspInit+0x80>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6453      	str	r3, [r2, #68]	; 0x44
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_ADC_MspInit+0x80>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <HAL_ADC_MspInit+0x80>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <HAL_ADC_MspInit+0x80>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6313      	str	r3, [r2, #48]	; 0x30
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <HAL_ADC_MspInit+0x80>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800425a:	2302      	movs	r3, #2
 800425c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800425e:	2303      	movs	r3, #3
 8004260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004266:	f107 0314 	add.w	r3, r7, #20
 800426a:	4619      	mov	r1, r3
 800426c:	4805      	ldr	r0, [pc, #20]	; (8004284 <HAL_ADC_MspInit+0x84>)
 800426e:	f7fd fb2d 	bl	80018cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004272:	bf00      	nop
 8004274:	3728      	adds	r7, #40	; 0x28
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40012000 	.word	0x40012000
 8004280:	40023800 	.word	0x40023800
 8004284:	40020000 	.word	0x40020000

08004288 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428e:	f107 030c 	add.w	r3, r7, #12
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	4b52      	ldr	r3, [pc, #328]	; (80043ec <MX_GPIO_Init+0x164>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a51      	ldr	r2, [pc, #324]	; (80043ec <MX_GPIO_Init+0x164>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <MX_GPIO_Init+0x164>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <MX_GPIO_Init+0x164>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <MX_GPIO_Init+0x164>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ca:	4b48      	ldr	r3, [pc, #288]	; (80043ec <MX_GPIO_Init+0x164>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4b44      	ldr	r3, [pc, #272]	; (80043ec <MX_GPIO_Init+0x164>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4a43      	ldr	r2, [pc, #268]	; (80043ec <MX_GPIO_Init+0x164>)
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	6313      	str	r3, [r2, #48]	; 0x30
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <MX_GPIO_Init+0x164>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 80042f2:	2200      	movs	r2, #0
 80042f4:	f240 1141 	movw	r1, #321	; 0x141
 80042f8:	483d      	ldr	r0, [pc, #244]	; (80043f0 <MX_GPIO_Init+0x168>)
 80042fa:	f7fd fc79 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 80042fe:	2200      	movs	r2, #0
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	483c      	ldr	r0, [pc, #240]	; (80043f4 <MX_GPIO_Init+0x16c>)
 8004304:	f7fd fc74 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8004308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800430c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8004316:	f107 030c 	add.w	r3, r7, #12
 800431a:	4619      	mov	r1, r3
 800431c:	4836      	ldr	r0, [pc, #216]	; (80043f8 <MX_GPIO_Init+0x170>)
 800431e:	f7fd fad5 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004322:	2302      	movs	r3, #2
 8004324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004326:	4b35      	ldr	r3, [pc, #212]	; (80043fc <MX_GPIO_Init+0x174>)
 8004328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	4619      	mov	r1, r3
 8004334:	4830      	ldr	r0, [pc, #192]	; (80043f8 <MX_GPIO_Init+0x170>)
 8004336:	f7fd fac9 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 800433a:	f240 1341 	movw	r3, #321	; 0x141
 800433e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004340:	2301      	movs	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434c:	f107 030c 	add.w	r3, r7, #12
 8004350:	4619      	mov	r1, r3
 8004352:	4827      	ldr	r0, [pc, #156]	; (80043f0 <MX_GPIO_Init+0x168>)
 8004354:	f7fd faba 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004358:	2310      	movs	r3, #16
 800435a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <MX_GPIO_Init+0x174>)
 800435e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004364:	f107 030c 	add.w	r3, r7, #12
 8004368:	4619      	mov	r1, r3
 800436a:	4821      	ldr	r0, [pc, #132]	; (80043f0 <MX_GPIO_Init+0x168>)
 800436c:	f7fd faae 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8004370:	2321      	movs	r3, #33	; 0x21
 8004372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004374:	4b21      	ldr	r3, [pc, #132]	; (80043fc <MX_GPIO_Init+0x174>)
 8004376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437c:	f107 030c 	add.w	r3, r7, #12
 8004380:	4619      	mov	r1, r3
 8004382:	481c      	ldr	r0, [pc, #112]	; (80043f4 <MX_GPIO_Init+0x16c>)
 8004384:	f7fd faa2 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 8004388:	2340      	movs	r3, #64	; 0x40
 800438a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800438c:	2301      	movs	r3, #1
 800438e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 8004398:	f107 030c 	add.w	r3, r7, #12
 800439c:	4619      	mov	r1, r3
 800439e:	4815      	ldr	r0, [pc, #84]	; (80043f4 <MX_GPIO_Init+0x16c>)
 80043a0:	f7fd fa94 	bl	80018cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80043a4:	2200      	movs	r2, #0
 80043a6:	2100      	movs	r1, #0
 80043a8:	2006      	movs	r0, #6
 80043aa:	f7fd fa58 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80043ae:	2006      	movs	r0, #6
 80043b0:	f7fd fa71 	bl	8001896 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80043b4:	2200      	movs	r2, #0
 80043b6:	2100      	movs	r1, #0
 80043b8:	2007      	movs	r0, #7
 80043ba:	f7fd fa50 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80043be:	2007      	movs	r0, #7
 80043c0:	f7fd fa69 	bl	8001896 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2100      	movs	r1, #0
 80043c8:	200a      	movs	r0, #10
 80043ca:	f7fd fa48 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80043ce:	200a      	movs	r0, #10
 80043d0:	f7fd fa61 	bl	8001896 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2100      	movs	r1, #0
 80043d8:	2017      	movs	r0, #23
 80043da:	f7fd fa40 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043de:	2017      	movs	r0, #23
 80043e0:	f7fd fa59 	bl	8001896 <HAL_NVIC_EnableIRQ>

}
 80043e4:	bf00      	nop
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40020000 	.word	0x40020000
 80043f4:	40020400 	.word	0x40020400
 80043f8:	40020800 	.word	0x40020800
 80043fc:	10110000 	.word	0x10110000

08004400 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004404:	4b12      	ldr	r3, [pc, #72]	; (8004450 <MX_I2C1_Init+0x50>)
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <MX_I2C1_Init+0x54>)
 8004408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800440a:	4b11      	ldr	r3, [pc, #68]	; (8004450 <MX_I2C1_Init+0x50>)
 800440c:	4a12      	ldr	r2, [pc, #72]	; (8004458 <MX_I2C1_Init+0x58>)
 800440e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <MX_I2C1_Init+0x50>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004416:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <MX_I2C1_Init+0x50>)
 8004418:	2200      	movs	r2, #0
 800441a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <MX_I2C1_Init+0x50>)
 800441e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <MX_I2C1_Init+0x50>)
 8004426:	2200      	movs	r2, #0
 8004428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800442a:	4b09      	ldr	r3, [pc, #36]	; (8004450 <MX_I2C1_Init+0x50>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <MX_I2C1_Init+0x50>)
 8004432:	2200      	movs	r2, #0
 8004434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <MX_I2C1_Init+0x50>)
 8004438:	2200      	movs	r2, #0
 800443a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800443c:	4804      	ldr	r0, [pc, #16]	; (8004450 <MX_I2C1_Init+0x50>)
 800443e:	f7fd fc09 	bl	8001c54 <HAL_I2C_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004448:	f000 fe46 	bl	80050d8 <Error_Handler>
  }

}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}
 8004450:	200002ec 	.word	0x200002ec
 8004454:	40005400 	.word	0x40005400
 8004458:	000186a0 	.word	0x000186a0

0800445c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <HAL_I2C_MspInit+0x84>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d12c      	bne.n	80044d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <HAL_I2C_MspInit+0x88>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <HAL_I2C_MspInit+0x88>)
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_I2C_MspInit+0x88>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800449a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800449e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a0:	2312      	movs	r3, #18
 80044a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044a4:	2301      	movs	r3, #1
 80044a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044ac:	2304      	movs	r3, #4
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b0:	f107 0314 	add.w	r3, r7, #20
 80044b4:	4619      	mov	r1, r3
 80044b6:	480c      	ldr	r0, [pc, #48]	; (80044e8 <HAL_I2C_MspInit+0x8c>)
 80044b8:	f7fd fa08 	bl	80018cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_I2C_MspInit+0x88>)
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <HAL_I2C_MspInit+0x88>)
 80044c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044ca:	6413      	str	r3, [r2, #64]	; 0x40
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_I2C_MspInit+0x88>)
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80044d8:	bf00      	nop
 80044da:	3728      	adds	r7, #40	; 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40005400 	.word	0x40005400
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40020400 	.word	0x40020400

080044ec <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	2140      	movs	r1, #64	; 0x40
 8004502:	4803      	ldr	r0, [pc, #12]	; (8004510 <chipSelect+0x24>)
 8004504:	f7fd fb74 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40020400 	.word	0x40020400

08004514 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	461a      	mov	r2, r3
 8004522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004526:	4803      	ldr	r0, [pc, #12]	; (8004534 <registerSelect+0x20>)
 8004528:	f7fd fb62 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40020000 	.word	0x40020000

08004538 <displayReset>:

static void displayReset(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 800453c:	2000      	movs	r0, #0
 800453e:	f7ff ffd5 	bl	80044ec <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8004542:	2200      	movs	r2, #0
 8004544:	2140      	movs	r1, #64	; 0x40
 8004546:	4808      	ldr	r0, [pc, #32]	; (8004568 <displayReset+0x30>)
 8004548:	f7fd fb52 	bl	8001bf0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800454c:	2001      	movs	r0, #1
 800454e:	f7fc fcbf 	bl	8000ed0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004552:	2201      	movs	r2, #1
 8004554:	2140      	movs	r1, #64	; 0x40
 8004556:	4804      	ldr	r0, [pc, #16]	; (8004568 <displayReset+0x30>)
 8004558:	f7fd fb4a 	bl	8001bf0 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 800455c:	2001      	movs	r0, #1
 800455e:	f7ff ffc5 	bl	80044ec <chipSelect>
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40020000 	.word	0x40020000

0800456c <sendInstruction>:

static void sendInstruction(instruction command)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 8004576:	2000      	movs	r0, #0
 8004578:	f7ff ffcc 	bl	8004514 <registerSelect>
    chipSelect(true);
 800457c:	2001      	movs	r0, #1
 800457e:	f7ff ffb5 	bl	80044ec <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 8004582:	1df9      	adds	r1, r7, #7
 8004584:	2301      	movs	r3, #1
 8004586:	2201      	movs	r2, #1
 8004588:	4804      	ldr	r0, [pc, #16]	; (800459c <sendInstruction+0x30>)
 800458a:	f7fe ffcb 	bl	8003524 <HAL_SPI_Transmit>
    chipSelect(false);
 800458e:	2000      	movs	r0, #0
 8004590:	f7ff ffac 	bl	80044ec <chipSelect>
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	2000036c 	.word	0x2000036c

080045a0 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7ff ffb2 	bl	8004514 <registerSelect>
    chipSelect(true);
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7ff ff9b 	bl	80044ec <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 80045b6:	1df9      	adds	r1, r7, #7
 80045b8:	2301      	movs	r3, #1
 80045ba:	2201      	movs	r2, #1
 80045bc:	4804      	ldr	r0, [pc, #16]	; (80045d0 <sendData+0x30>)
 80045be:	f7fe ffb1 	bl	8003524 <HAL_SPI_Transmit>
    chipSelect(false);
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7ff ff92 	bl	80044ec <chipSelect>
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	2000036c 	.word	0x2000036c

080045d4 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2b3f      	cmp	r3, #63	; 0x3f
 80045e2:	d806      	bhi.n	80045f2 <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 80045e4:	2081      	movs	r0, #129	; 0x81
 80045e6:	f7ff ffc1 	bl	800456c <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ffbd 	bl	800456c <sendInstruction>
    }
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <lcd_init>:

void lcd_init(void)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	af00      	add	r7, sp, #0
    lcd_clear();
 80045fe:	f000 f857 	bl	80046b0 <lcd_clear>
    displayReset();
 8004602:	f7ff ff99 	bl	8004538 <displayReset>

    sendInstruction(ADC_NORMAL);
 8004606:	20a0      	movs	r0, #160	; 0xa0
 8004608:	f7ff ffb0 	bl	800456c <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 800460c:	20ae      	movs	r0, #174	; 0xae
 800460e:	f7ff ffad 	bl	800456c <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8004612:	20c8      	movs	r0, #200	; 0xc8
 8004614:	f7ff ffaa 	bl	800456c <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8004618:	20a2      	movs	r0, #162	; 0xa2
 800461a:	f7ff ffa7 	bl	800456c <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 800461e:	202f      	movs	r0, #47	; 0x2f
 8004620:	f7ff ffa4 	bl	800456c <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8004624:	2021      	movs	r0, #33	; 0x21
 8004626:	f7ff ffa1 	bl	800456c <sendInstruction>
    lcd_setContrast(40);
 800462a:	2028      	movs	r0, #40	; 0x28
 800462c:	f7ff ffd2 	bl	80045d4 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8004630:	20af      	movs	r0, #175	; 0xaf
 8004632:	f7ff ff9b 	bl	800456c <sendInstruction>
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
 8004646:	460b      	mov	r3, r1
 8004648:	71bb      	strb	r3, [r7, #6]
 800464a:	4613      	mov	r3, r2
 800464c:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	2b00      	cmp	r3, #0
 8004654:	db23      	blt.n	800469e <lcd_setPixel+0x62>
 8004656:	79bb      	ldrb	r3, [r7, #6]
 8004658:	2b1f      	cmp	r3, #31
 800465a:	d820      	bhi.n	800469e <lcd_setPixel+0x62>
        if (pixelIsSet)
 800465c:	797b      	ldrb	r3, [r7, #5]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <lcd_setPixel+0x70>)
 8004666:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800466a:	79bb      	ldrb	r3, [r7, #6]
 800466c:	2101      	movs	r1, #1
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	4619      	mov	r1, r3
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	430a      	orrs	r2, r1
 8004678:	490c      	ldr	r1, [pc, #48]	; (80046ac <lcd_setPixel+0x70>)
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 800467e:	e00e      	b.n	800469e <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <lcd_setPixel+0x70>)
 8004684:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004688:	79bb      	ldrb	r3, [r7, #6]
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	4619      	mov	r1, r3
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	400a      	ands	r2, r1
 8004698:	4904      	ldr	r1, [pc, #16]	; (80046ac <lcd_setPixel+0x70>)
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	2000008c 	.word	0x2000008c

080046b0 <lcd_clear>:

void lcd_clear(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 80046b6:	2300      	movs	r3, #0
 80046b8:	71fb      	strb	r3, [r7, #7]
 80046ba:	e007      	b.n	80046cc <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <lcd_clear+0x30>)
 80046c0:	2100      	movs	r1, #0
 80046c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	3301      	adds	r3, #1
 80046ca:	71fb      	strb	r3, [r7, #7]
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	daf3      	bge.n	80046bc <lcd_clear+0xc>
    }
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	2000008c 	.word	0x2000008c

080046e4 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4604      	mov	r4, r0
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	71fb      	strb	r3, [r7, #7]
 80046f6:	4603      	mov	r3, r0
 80046f8:	71bb      	strb	r3, [r7, #6]
 80046fa:	460b      	mov	r3, r1
 80046fc:	717b      	strb	r3, [r7, #5]
 80046fe:	4613      	mov	r3, r2
 8004700:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8004702:	797b      	ldrb	r3, [r7, #5]
 8004704:	3b20      	subs	r3, #32
 8004706:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e049      	b.n	80047a2 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800470e:	2300      	movs	r3, #0
 8004710:	73bb      	strb	r3, [r7, #14]
 8004712:	e03b      	b.n	800478c <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8004714:	797b      	ldrb	r3, [r7, #5]
 8004716:	793a      	ldrb	r2, [r7, #4]
 8004718:	4927      	ldr	r1, [pc, #156]	; (80047b8 <lcd_setChar+0xd4>)
 800471a:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800471e:	fb02 f203 	mul.w	r2, r2, r3
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	4413      	add	r3, r2
 8004726:	4a25      	ldr	r2, [pc, #148]	; (80047bc <lcd_setChar+0xd8>)
 8004728:	5cd3      	ldrb	r3, [r2, r3]
 800472a:	461a      	mov	r2, r3
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	fa42 f303 	asr.w	r3, r2, r3
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d018      	beq.n	800476c <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 800473a:	79fa      	ldrb	r2, [r7, #7]
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	4413      	add	r3, r2
 8004740:	b2d8      	uxtb	r0, r3
 8004742:	79ba      	ldrb	r2, [r7, #6]
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	4413      	add	r3, r2
 8004748:	b2d9      	uxtb	r1, r3
 800474a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800474e:	2b00      	cmp	r3, #0
 8004750:	bf14      	ite	ne
 8004752:	2301      	movne	r3, #1
 8004754:	2300      	moveq	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f083 0301 	eor.w	r3, r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	f7ff ff69 	bl	800463c <lcd_setPixel>
 800476a:	e00c      	b.n	8004786 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 800476c:	79fa      	ldrb	r2, [r7, #7]
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	4413      	add	r3, r2
 8004772:	b2d8      	uxtb	r0, r3
 8004774:	79ba      	ldrb	r2, [r7, #6]
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	4413      	add	r3, r2
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004780:	4619      	mov	r1, r3
 8004782:	f7ff ff5b 	bl	800463c <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8004786:	7bbb      	ldrb	r3, [r7, #14]
 8004788:	3301      	adds	r3, #1
 800478a:	73bb      	strb	r3, [r7, #14]
 800478c:	793b      	ldrb	r3, [r7, #4]
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <lcd_setChar+0xd4>)
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	785b      	ldrb	r3, [r3, #1]
 8004796:	7bba      	ldrb	r2, [r7, #14]
 8004798:	429a      	cmp	r2, r3
 800479a:	d3bb      	bcc.n	8004714 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	3301      	adds	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	793b      	ldrb	r3, [r7, #4]
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <lcd_setChar+0xd4>)
 80047a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3ae      	bcc.n	800470e <lcd_setChar+0x2a>
        }
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	08006384 	.word	0x08006384
 80047bc:	08006004 	.word	0x08006004

080047c0 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	603a      	str	r2, [r7, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
 80047ce:	460b      	mov	r3, r1
 80047d0:	71bb      	strb	r3, [r7, #6]
 80047d2:	4613      	mov	r3, r2
 80047d4:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 80047d6:	797b      	ldrb	r3, [r7, #5]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d11c      	bne.n	8004816 <lcd_setString+0x56>
 80047dc:	797b      	ldrb	r3, [r7, #5]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d819      	bhi.n	8004816 <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 80047e2:	e014      	b.n	800480e <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	797c      	ldrb	r4, [r7, #5]
 80047ea:	79b9      	ldrb	r1, [r7, #6]
 80047ec:	79f8      	ldrb	r0, [r7, #7]
 80047ee:	7e3b      	ldrb	r3, [r7, #24]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4623      	mov	r3, r4
 80047f4:	f7ff ff76 	bl	80046e4 <lcd_setChar>
            xPosition += fontSizes[size].width;
 80047f8:	797b      	ldrb	r3, [r7, #5]
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <lcd_setString+0x60>)
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	785a      	ldrb	r2, [r3, #1]
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	4413      	add	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e6      	bne.n	80047e4 <lcd_setString+0x24>
        }
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	08006384 	.word	0x08006384

08004824 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b08b      	sub	sp, #44	; 0x2c
 8004828:	af00      	add	r7, sp, #0
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	461a      	mov	r2, r3
 8004832:	4623      	mov	r3, r4
 8004834:	81fb      	strh	r3, [r7, #14]
 8004836:	4603      	mov	r3, r0
 8004838:	81bb      	strh	r3, [r7, #12]
 800483a:	460b      	mov	r3, r1
 800483c:	817b      	strh	r3, [r7, #10]
 800483e:	4613      	mov	r3, r2
 8004840:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8004842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800484e:	edc7 7a08 	vstr	s15, [r7, #32]
 8004852:	2300      	movs	r3, #0
 8004854:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 8004856:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004862:	edc7 7a07 	vstr	s15, [r7, #28]
 8004866:	2300      	movs	r3, #0
 8004868:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 800486a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800486e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	bfb8      	it	lt
 8004878:	425b      	neglt	r3, r3
 800487a:	b21b      	sxth	r3, r3
 800487c:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 800487e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004882:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	bfb8      	it	lt
 800488c:	425b      	neglt	r3, r3
 800488e:	b21b      	sxth	r3, r3
 8004890:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 8004892:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <lcd_setLine+0x8c>
 800489a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800489e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80048a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 80048b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <lcd_setLine+0xaa>
 80048b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80048bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80048c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ca:	b21b      	sxth	r3, r3
 80048cc:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 80048ce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80048d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	db5f      	blt.n	800499a <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 80048da:	2300      	movs	r3, #0
 80048dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048de:	e055      	b.n	800498c <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80048e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80048e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	db20      	blt.n	8004930 <lcd_setLine+0x10c>
 80048ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80048f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	db19      	blt.n	8004930 <lcd_setLine+0x10c>
 80048fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8004900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004904:	edc7 7a01 	vstr	s15, [r7, #4]
 8004908:	793b      	ldrb	r3, [r7, #4]
 800490a:	b2d8      	uxtb	r0, r3
 800490c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004914:	edc7 7a01 	vstr	s15, [r7, #4]
 8004918:	793b      	ldrb	r3, [r7, #4]
 800491a:	b2d9      	uxtb	r1, r3
 800491c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	f7ff fe86 	bl	800463c <lcd_setPixel>
			xF += x[1];
 8004930:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004944:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8004948:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004954:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004958:	ee07 3a90 	vmov	s15, r3
 800495c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004964:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004974:	ed97 7a07 	vldr	s14, [r7, #28]
 8004978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497c:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8004980:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004984:	b29b      	uxth	r3, r3
 8004986:	3301      	adds	r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800498c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004990:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004994:	429a      	cmp	r2, r3
 8004996:	dba3      	blt.n	80048e0 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8004998:	e05e      	b.n	8004a58 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 800499a:	2300      	movs	r3, #0
 800499c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800499e:	e055      	b.n	8004a4c <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80049a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80049a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ac:	db20      	blt.n	80049f0 <lcd_setLine+0x1cc>
 80049ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80049b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	db19      	blt.n	80049f0 <lcd_setLine+0x1cc>
 80049bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80049c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80049c8:	793b      	ldrb	r3, [r7, #4]
 80049ca:	b2d8      	uxtb	r0, r3
 80049cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80049d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80049d8:	793b      	ldrb	r3, [r7, #4]
 80049da:	b2d9      	uxtb	r1, r3
 80049dc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7ff fe26 	bl	800463c <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 80049f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a24:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8004a28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a34:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3c:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8004a40:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a50:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004a54:	429a      	cmp	r2, r3
 8004a56:	dba3      	blt.n	80049a0 <lcd_setLine+0x17c>
}
 8004a58:	bf00      	nop
 8004a5a:	372c      	adds	r7, #44	; 0x2c
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd90      	pop	{r4, r7, pc}

08004a60 <lcd_show>:

void lcd_show(void){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004a66:	2300      	movs	r3, #0
 8004a68:	71fb      	strb	r3, [r7, #7]
 8004a6a:	e022      	b.n	8004ab2 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	3b50      	subs	r3, #80	; 0x50
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fd7a 	bl	800456c <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 8004a78:	2010      	movs	r0, #16
 8004a7a:	f7ff fd77 	bl	800456c <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f7ff fd74 	bl	800456c <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	71bb      	strb	r3, [r7, #6]
 8004a88:	e00c      	b.n	8004aa4 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 8004a8a:	79ba      	ldrb	r2, [r7, #6]
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <lcd_show+0x60>)
 8004a90:	0092      	lsls	r2, r2, #2
 8004a92:	440a      	add	r2, r1
 8004a94:	4413      	add	r3, r2
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fd81 	bl	80045a0 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004a9e:	79bb      	ldrb	r3, [r7, #6]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	71bb      	strb	r3, [r7, #6]
 8004aa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	daee      	bge.n	8004a8a <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	71fb      	strb	r3, [r7, #7]
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d9d9      	bls.n	8004a6c <lcd_show+0xc>
    }
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	2000008c 	.word	0x2000008c

08004ac4 <findLinear>:
struct linearVariable{
	float a,b;
};
typedef struct linearVariable lvStruct;
lvStruct findLinear(int min, int max)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b089      	sub	sp, #36	; 0x24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]

	lvStruct s;
	s.a = -98/(max-min);
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f06f 0261 	mvn.w	r2, #97	; 0x61
 8004ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ae4:	edc7 7a04 	vstr	s15, [r7, #16]
	s.b = -(-99*max+min)/(max-min);
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4413      	add	r3, r2
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	441a      	add	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1acb      	subs	r3, r1, r3
 8004afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b0a:	edc7 7a05 	vstr	s15, [r7, #20]
	return s;
 8004b0e:	f107 0318 	add.w	r3, r7, #24
 8004b12:	f107 0210 	add.w	r2, r7, #16
 8004b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	ee07 2a10 	vmov	s14, r2
 8004b26:	ee07 3a90 	vmov	s15, r3
}
 8004b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b2e:	eef0 0a67 	vmov.f32	s1, s15
 8004b32:	3724      	adds	r7, #36	; 0x24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <setRGB>:

void setRGB(int tempCelsius)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b094      	sub	sp, #80	; 0x50
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004b44:	2100      	movs	r1, #0
 8004b46:	4876      	ldr	r0, [pc, #472]	; (8004d20 <setRGB+0x1e4>)
 8004b48:	f7fe fef8 	bl	800393c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4874      	ldr	r0, [pc, #464]	; (8004d20 <setRGB+0x1e4>)
 8004b50:	f7fe fef4 	bl	800393c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8004b54:	2104      	movs	r1, #4
 8004b56:	4873      	ldr	r0, [pc, #460]	; (8004d24 <setRGB+0x1e8>)
 8004b58:	f7fe fef0 	bl	800393c <HAL_TIM_PWM_Start>
//	tempCelsius = tempCelsius-20;


	int redMax = 40;
 8004b5c:	2328      	movs	r3, #40	; 0x28
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	int redMin = 10;
 8004b60:	230a      	movs	r3, #10
 8004b62:	64bb      	str	r3, [r7, #72]	; 0x48
	int greenMinStart = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	647b      	str	r3, [r7, #68]	; 0x44
	int greenMaxMedium = 15;
 8004b68:	230f      	movs	r3, #15
 8004b6a:	643b      	str	r3, [r7, #64]	; 0x40
	int greenMinEnd = 30;
 8004b6c:	231e      	movs	r3, #30
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	int blueMax = -20;
 8004b70:	f06f 0313 	mvn.w	r3, #19
 8004b74:	63bb      	str	r3, [r7, #56]	; 0x38
	int blueMin = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
	lvStruct redValue 			= findLinear(redMin, redMax);
 8004b7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004b7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b7e:	f7ff ffa1 	bl	8004ac4 <findLinear>
 8004b82:	eeb0 7a40 	vmov.f32	s14, s0
 8004b86:	eef0 7a60 	vmov.f32	s15, s1
 8004b8a:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8004b8e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	lvStruct greenValueFirst 	= findLinear(greenMinStart, greenMaxMedium);
 8004b92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b96:	f7ff ff95 	bl	8004ac4 <findLinear>
 8004b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b9e:	eef0 7a60 	vmov.f32	s15, s1
 8004ba2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8004ba6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	lvStruct greenValueSecond	= findLinear(greenMinEnd, greenMaxMedium);
 8004baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004bae:	f7ff ff89 	bl	8004ac4 <findLinear>
 8004bb2:	eeb0 7a40 	vmov.f32	s14, s0
 8004bb6:	eef0 7a60 	vmov.f32	s15, s1
 8004bba:	ed87 7a07 	vstr	s14, [r7, #28]
 8004bbe:	edc7 7a08 	vstr	s15, [r7, #32]
	lvStruct blueValue 			= findLinear(blueMin, blueMax);
 8004bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bc6:	f7ff ff7d 	bl	8004ac4 <findLinear>
 8004bca:	eeb0 7a40 	vmov.f32	s14, s0
 8004bce:	eef0 7a60 	vmov.f32	s15, s1
 8004bd2:	ed87 7a05 	vstr	s14, [r7, #20]
 8004bd6:	edc7 7a06 	vstr	s15, [r7, #24]
	rgbStruct rgb;

	// Red condition
	if (tempCelsius<redMin) {
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bde:	429a      	cmp	r2, r3
 8004be0:	da02      	bge.n	8004be8 <setRGB+0xac>
		rgb.Red = 100;
 8004be2:	2364      	movs	r3, #100	; 0x64
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	e020      	b.n	8004c2a <setRGB+0xee>
	}
	else if ((tempCelsius>redMin && tempCelsius<redMax)) {
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bec:	429a      	cmp	r2, r3
 8004bee:	dd16      	ble.n	8004c1e <setRGB+0xe2>
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	da12      	bge.n	8004c1e <setRGB+0xe2>
		rgb.Red = redValue.a*tempCelsius + redValue.b;
 8004bf8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c16:	ee17 3a90 	vmov	r3, s15
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	e005      	b.n	8004c2a <setRGB+0xee>
	}
	else if (tempCelsius>redMax) {
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c22:	429a      	cmp	r2, r3
 8004c24:	dd01      	ble.n	8004c2a <setRGB+0xee>
		rgb.Red = 1;
 8004c26:	2301      	movs	r3, #1
 8004c28:	60bb      	str	r3, [r7, #8]
	}

	// Green condition
	if (tempCelsius<greenMinStart) {
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	da02      	bge.n	8004c38 <setRGB+0xfc>
		rgb.Green = 100;
 8004c32:	2364      	movs	r3, #100	; 0x64
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e03b      	b.n	8004cb0 <setRGB+0x174>
	}
	else if ((tempCelsius>greenMinStart && tempCelsius<greenMaxMedium)) {
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	dd16      	ble.n	8004c6e <setRGB+0x132>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c44:	429a      	cmp	r2, r3
 8004c46:	da12      	bge.n	8004c6e <setRGB+0x132>
		rgb.Green = greenValueFirst.a*tempCelsius + greenValueFirst.b;
 8004c48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c66:	ee17 3a90 	vmov	r3, s15
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e020      	b.n	8004cb0 <setRGB+0x174>
	}
	else if ((tempCelsius>greenMaxMedium && tempCelsius<greenMinEnd)) {
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	429a      	cmp	r2, r3
 8004c74:	dd16      	ble.n	8004ca4 <setRGB+0x168>
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	da12      	bge.n	8004ca4 <setRGB+0x168>
		rgb.Green = greenValueSecond.a*tempCelsius + greenValueSecond.b;
 8004c7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c90:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9c:	ee17 3a90 	vmov	r3, s15
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e005      	b.n	8004cb0 <setRGB+0x174>
	}
	else if (tempCelsius > greenMinEnd) {
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	dd01      	ble.n	8004cb0 <setRGB+0x174>
		rgb.Green = 100;
 8004cac:	2364      	movs	r3, #100	; 0x64
 8004cae:	60fb      	str	r3, [r7, #12]
	}

	// Blue condition
	if (tempCelsius<blueMax) {
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	da02      	bge.n	8004cbe <setRGB+0x182>
		rgb.Blue = 1;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e020      	b.n	8004d00 <setRGB+0x1c4>
	}
	else if ((tempCelsius>blueMax && tempCelsius<blueMin)) {
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	dd16      	ble.n	8004cf4 <setRGB+0x1b8>
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	da12      	bge.n	8004cf4 <setRGB+0x1b8>
		rgb.Blue = blueValue.a*tempCelsius + blueValue.b;
 8004cce:	ed97 7a05 	vldr	s14, [r7, #20]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cec:	ee17 3a90 	vmov	r3, s15
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	e005      	b.n	8004d00 <setRGB+0x1c4>
	}
	else if (tempCelsius>blueMin) {
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	dd01      	ble.n	8004d00 <setRGB+0x1c4>
		rgb.Blue = 100;
 8004cfc:	2364      	movs	r3, #100	; 0x64
 8004cfe:	613b      	str	r3, [r7, #16]
	}


	htim3.Instance->CCR1 = rgb.Red;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <setRGB+0x1e4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = rgb.Green;
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <setRGB+0x1e4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR2 = rgb.Blue;
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <setRGB+0x1e8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38


}
 8004d18:	bf00      	nop
 8004d1a:	3750      	adds	r7, #80	; 0x50
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200003c4 	.word	0x200003c4
 8004d24:	20000404 	.word	0x20000404

08004d28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) {
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d10c      	bne.n	8004d52 <HAL_GPIO_EXTI_Callback+0x2a>
		if(flagTemp == 2)
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d103      	bne.n	8004d48 <HAL_GPIO_EXTI_Callback+0x20>
			flagTemp = 0;
 8004d40:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e004      	b.n	8004d52 <HAL_GPIO_EXTI_Callback+0x2a>
		else
			flagTemp++;
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <HAL_GPIO_EXTI_Callback+0x58>)
 8004d50:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == GPIO_PIN_0) {
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d10c      	bne.n	8004d72 <HAL_GPIO_EXTI_Callback+0x4a>

		if(flagDebug==1)
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d103      	bne.n	8004d68 <HAL_GPIO_EXTI_Callback+0x40>
			flagDebug = 0;
 8004d60:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
		else
			flagDebug++;

	}
}
 8004d66:	e004      	b.n	8004d72 <HAL_GPIO_EXTI_Callback+0x4a>
			flagDebug++;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004d70:	6013      	str	r3, [r2, #0]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	2000028c 	.word	0x2000028c
 8004d84:	20000290 	.word	0x20000290

08004d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d8e:	f7fc f82d 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d92:	f000 f941 	bl	8005018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d96:	f7ff fa77 	bl	8004288 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004d9a:	f000 f9a5 	bl	80050e8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8004d9e:	f7ff fb2f 	bl	8004400 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004da2:	f000 faf3 	bl	800538c <MX_TIM1_Init>
  MX_TIM3_Init();
 8004da6:	f000 fb75 	bl	8005494 <MX_TIM3_Init>
  MX_ADC1_Init();
 8004daa:	f7ff f9d7 	bl	800415c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	sendData(0xA5);
 8004dae:	20a5      	movs	r0, #165	; 0xa5
 8004db0:	f7ff fbf6 	bl	80045a0 <sendData>

	// Initialise LCD and show "Welcome" top/left justified
	lcd_init();
 8004db4:	f7ff fc21 	bl	80045fa <lcd_init>
	lcd_clear();
 8004db8:	f7ff fc7a 	bl	80046b0 <lcd_clear>

	lcd_setLine(127,0,127,31,1);
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	231f      	movs	r3, #31
 8004dc2:	227f      	movs	r2, #127	; 0x7f
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	207f      	movs	r0, #127	; 0x7f
 8004dc8:	f7ff fd2c 	bl	8004824 <lcd_setLine>
	lcd_setLine(0,0,0,31,1);
 8004dcc:	2301      	movs	r3, #1
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	231f      	movs	r3, #31
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f7ff fd24 	bl	8004824 <lcd_setLine>
	lcd_show();
 8004ddc:	f7ff fe40 	bl	8004a60 <lcd_show>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Initialize the ADC for debug
		HAL_ADC_Start(&hadc1);
 8004de0:	487b      	ldr	r0, [pc, #492]	; (8004fd0 <main+0x248>)
 8004de2:	f7fc f8db 	bl	8000f9c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8004de6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dea:	4879      	ldr	r0, [pc, #484]	; (8004fd0 <main+0x248>)
 8004dec:	f7fc f99c 	bl	8001128 <HAL_ADC_PollForConversion>
		ADC_POT_Right = HAL_ADC_GetValue(&hadc1)/40-40;
 8004df0:	4877      	ldr	r0, [pc, #476]	; (8004fd0 <main+0x248>)
 8004df2:	f7fc fa1d 	bl	8001230 <HAL_ADC_GetValue>
 8004df6:	4602      	mov	r2, r0
 8004df8:	4b76      	ldr	r3, [pc, #472]	; (8004fd4 <main+0x24c>)
 8004dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	3b28      	subs	r3, #40	; 0x28
 8004e02:	461a      	mov	r2, r3
 8004e04:	4b74      	ldr	r3, [pc, #464]	; (8004fd8 <main+0x250>)
 8004e06:	601a      	str	r2, [r3, #0]

		int16_t TwoByteTemp;
		uint8_t byteTemperature[0];

		HAL_I2C_Master_Transmit(&hi2c1, 0x90, 0x00, 1, HAL_MAX_DELAY);
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	2301      	movs	r3, #1
 8004e10:	2200      	movs	r2, #0
 8004e12:	2190      	movs	r1, #144	; 0x90
 8004e14:	4871      	ldr	r0, [pc, #452]	; (8004fdc <main+0x254>)
 8004e16:	f7fd f845 	bl	8001ea4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, 0x91, byteTemperature,2, HAL_MAX_DELAY);
 8004e1a:	1d3a      	adds	r2, r7, #4
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2302      	movs	r3, #2
 8004e24:	2191      	movs	r1, #145	; 0x91
 8004e26:	486d      	ldr	r0, [pc, #436]	; (8004fdc <main+0x254>)
 8004e28:	f7fd f93a 	bl	80020a0 <HAL_I2C_Master_Receive>
		//		Need to combine the ByteTemp[1] and [0] into one
		TwoByteTemp = ((int16_t)byteTemperature[0]<<4) | (byteTemperature[1]>>4);
 8004e2c:	793b      	ldrb	r3, [r7, #4]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	b21a      	sxth	r2, r3
 8004e32:	797b      	ldrb	r3, [r7, #5]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	b21b      	sxth	r3, r3
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]

		//celsius = TwoByteTemp *0.0625;
		setRGB(celsius);
 8004e3e:	4b68      	ldr	r3, [pc, #416]	; (8004fe0 <main+0x258>)
 8004e40:	edd3 7a00 	vldr	s15, [r3]
 8004e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e48:	ee17 0a90 	vmov	r0, s15
 8004e4c:	f7ff fe76 	bl	8004b3c <setRGB>
		//		HAL_Delay(50);
		if(flagDebug==0)
 8004e50:	4b64      	ldr	r3, [pc, #400]	; (8004fe4 <main+0x25c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d113      	bne.n	8004e80 <main+0xf8>
			celsius = TwoByteTemp *0.0625;
 8004e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb79 	bl	8000554 <__aeabi_i2d>
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	4b60      	ldr	r3, [pc, #384]	; (8004fe8 <main+0x260>)
 8004e68:	f7fb fbde 	bl	8000628 <__aeabi_dmul>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	4618      	mov	r0, r3
 8004e72:	4621      	mov	r1, r4
 8004e74:	f7fb fdea 	bl	8000a4c <__aeabi_d2f>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <main+0x258>)
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e008      	b.n	8004e92 <main+0x10a>
		else
			celsius = ADC_POT_Right;
 8004e80:	4b55      	ldr	r3, [pc, #340]	; (8004fd8 <main+0x250>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8c:	4b54      	ldr	r3, [pc, #336]	; (8004fe0 <main+0x258>)
 8004e8e:	edc3 7a00 	vstr	s15, [r3]

		switch (flagTemp) {
 8004e92:	4b56      	ldr	r3, [pc, #344]	; (8004fec <main+0x264>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d01f      	beq.n	8004eda <main+0x152>
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d03f      	beq.n	8004f1e <main+0x196>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d168      	bne.n	8004f74 <main+0x1ec>
		case 0:
			//Celsius
			lcd_clear();
 8004ea2:	f7ff fc05 	bl	80046b0 <lcd_clear>
			if (flagDebug==0)
 8004ea6:	4b4f      	ldr	r3, [pc, #316]	; (8004fe4 <main+0x25c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d108      	bne.n	8004ec0 <main+0x138>
				lcd_setString(4,4,"Celsius",LCD_FONT_8,false);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	4a4e      	ldr	r2, [pc, #312]	; (8004ff0 <main+0x268>)
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	2004      	movs	r0, #4
 8004eba:	f7ff fc81 	bl	80047c0 <lcd_setString>
 8004ebe:	e007      	b.n	8004ed0 <main+0x148>
			else
				lcd_setString(4,4,"Celsius PotMod",LCD_FONT_8,false);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4a4b      	ldr	r2, [pc, #300]	; (8004ff4 <main+0x26c>)
 8004ec8:	2104      	movs	r1, #4
 8004eca:	2004      	movs	r0, #4
 8004ecc:	f7ff fc78 	bl	80047c0 <lcd_setString>
			temperatureDisplay = celsius;
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <main+0x258>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a48      	ldr	r2, [pc, #288]	; (8004ff8 <main+0x270>)
 8004ed6:	6013      	str	r3, [r2, #0]
			break;
 8004ed8:	e04c      	b.n	8004f74 <main+0x1ec>
		case 1:
			//Fahrenheit
			lcd_clear();
 8004eda:	f7ff fbe9 	bl	80046b0 <lcd_clear>
			if (flagDebug==0)
 8004ede:	4b41      	ldr	r3, [pc, #260]	; (8004fe4 <main+0x25c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <main+0x170>
				lcd_setString(4,4,"Fahrenheit",LCD_FONT_8,false);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2300      	movs	r3, #0
 8004eec:	4a43      	ldr	r2, [pc, #268]	; (8004ffc <main+0x274>)
 8004eee:	2104      	movs	r1, #4
 8004ef0:	2004      	movs	r0, #4
 8004ef2:	f7ff fc65 	bl	80047c0 <lcd_setString>
 8004ef6:	e007      	b.n	8004f08 <main+0x180>
			else
				lcd_setString(4,4,"Fahrenheit PotMod",LCD_FONT_8,false);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2300      	movs	r3, #0
 8004efe:	4a40      	ldr	r2, [pc, #256]	; (8005000 <main+0x278>)
 8004f00:	2104      	movs	r1, #4
 8004f02:	2004      	movs	r0, #4
 8004f04:	f7ff fc5c 	bl	80047c0 <lcd_setString>
			temperatureDisplay = (celsius*(9/5)) + 32;
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <main+0x258>)
 8004f0a:	edd3 7a00 	vldr	s15, [r3]
 8004f0e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005004 <main+0x27c>
 8004f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f16:	4b38      	ldr	r3, [pc, #224]	; (8004ff8 <main+0x270>)
 8004f18:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004f1c:	e02a      	b.n	8004f74 <main+0x1ec>
		case 2:
			//Kelvin
			lcd_clear();
 8004f1e:	f7ff fbc7 	bl	80046b0 <lcd_clear>
			if (flagDebug==0)
 8004f22:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <main+0x25c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <main+0x1b4>
				lcd_setString(4,4,"Kelvin",LCD_FONT_8,false);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4a35      	ldr	r2, [pc, #212]	; (8005008 <main+0x280>)
 8004f32:	2104      	movs	r1, #4
 8004f34:	2004      	movs	r0, #4
 8004f36:	f7ff fc43 	bl	80047c0 <lcd_setString>
 8004f3a:	e007      	b.n	8004f4c <main+0x1c4>
			else
				lcd_setString(4,4,"Kelvin PotMod",LCD_FONT_8,false);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2300      	movs	r3, #0
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <main+0x284>)
 8004f44:	2104      	movs	r1, #4
 8004f46:	2004      	movs	r0, #4
 8004f48:	f7ff fc3a 	bl	80047c0 <lcd_setString>
			temperatureDisplay = celsius + 273.15;
 8004f4c:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <main+0x258>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fb fb11 	bl	8000578 <__aeabi_f2d>
 8004f56:	a31c      	add	r3, pc, #112	; (adr r3, 8004fc8 <main+0x240>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb f9ae 	bl	80002bc <__adddf3>
 8004f60:	4603      	mov	r3, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	4618      	mov	r0, r3
 8004f66:	4621      	mov	r1, r4
 8004f68:	f7fb fd70 	bl	8000a4c <__aeabi_d2f>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <main+0x270>)
 8004f70:	601a      	str	r2, [r3, #0]
			break;
 8004f72:	bf00      	nop
		}
		lcd_setLine(127,0,127,31,1);
 8004f74:	2301      	movs	r3, #1
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	231f      	movs	r3, #31
 8004f7a:	227f      	movs	r2, #127	; 0x7f
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	207f      	movs	r0, #127	; 0x7f
 8004f80:	f7ff fc50 	bl	8004824 <lcd_setLine>
		lcd_setLine(0,0,0,31,1);
 8004f84:	2301      	movs	r3, #1
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	231f      	movs	r3, #31
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7ff fc48 	bl	8004824 <lcd_setLine>
		sprintf(charTemp,"%.2f", temperatureDisplay);
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <main+0x270>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb faed 	bl	8000578 <__aeabi_f2d>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	491a      	ldr	r1, [pc, #104]	; (8005010 <main+0x288>)
 8004fa8:	481a      	ldr	r0, [pc, #104]	; (8005014 <main+0x28c>)
 8004faa:	f000 fbed 	bl	8005788 <siprintf>
		lcd_setString(4,18,charTemp,LCD_FONT_8,false);
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4a17      	ldr	r2, [pc, #92]	; (8005014 <main+0x28c>)
 8004fb6:	2112      	movs	r1, #18
 8004fb8:	2004      	movs	r0, #4
 8004fba:	f7ff fc01 	bl	80047c0 <lcd_setString>
		lcd_show();
 8004fbe:	f7ff fd4f 	bl	8004a60 <lcd_show>
	{
 8004fc2:	e70d      	b.n	8004de0 <main+0x58>
 8004fc4:	f3af 8000 	nop.w
 8004fc8:	66666666 	.word	0x66666666
 8004fcc:	40711266 	.word	0x40711266
 8004fd0:	200002a4 	.word	0x200002a4
 8004fd4:	cccccccd 	.word	0xcccccccd
 8004fd8:	20000348 	.word	0x20000348
 8004fdc:	200002ec 	.word	0x200002ec
 8004fe0:	20000344 	.word	0x20000344
 8004fe4:	20000290 	.word	0x20000290
 8004fe8:	3fb00000 	.word	0x3fb00000
 8004fec:	2000028c 	.word	0x2000028c
 8004ff0:	08005fac 	.word	0x08005fac
 8004ff4:	08005fb4 	.word	0x08005fb4
 8004ff8:	20000340 	.word	0x20000340
 8004ffc:	08005fc4 	.word	0x08005fc4
 8005000:	08005fd0 	.word	0x08005fd0
 8005004:	42000000 	.word	0x42000000
 8005008:	08005fe4 	.word	0x08005fe4
 800500c:	08005fec 	.word	0x08005fec
 8005010:	08005ffc 	.word	0x08005ffc
 8005014:	2000034c 	.word	0x2000034c

08005018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b094      	sub	sp, #80	; 0x50
 800501c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800501e:	f107 031c 	add.w	r3, r7, #28
 8005022:	2234      	movs	r2, #52	; 0x34
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fba6 	bl	8005778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800502c:	f107 0308 	add.w	r3, r7, #8
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800503c:	2300      	movs	r3, #0
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <SystemClock_Config+0xb8>)
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <SystemClock_Config+0xb8>)
 8005046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504a:	6413      	str	r3, [r2, #64]	; 0x40
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <SystemClock_Config+0xb8>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005058:	2300      	movs	r3, #0
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <SystemClock_Config+0xbc>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <SystemClock_Config+0xbc>)
 8005066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <SystemClock_Config+0xbc>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005078:	2302      	movs	r3, #2
 800507a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800507c:	2301      	movs	r3, #1
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005080:	2310      	movs	r3, #16
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005084:	2300      	movs	r3, #0
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005088:	f107 031c 	add.w	r3, r7, #28
 800508c:	4618      	mov	r0, r3
 800508e:	f7fd ff8b 	bl	8002fa8 <HAL_RCC_OscConfig>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005098:	f000 f81e 	bl	80050d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800509c:	230f      	movs	r3, #15
 800509e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fd fd22 	bl	8002b00 <HAL_RCC_ClockConfig>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80050c2:	f000 f809 	bl	80050d8 <Error_Handler>
  }
}
 80050c6:	bf00      	nop
 80050c8:	3750      	adds	r7, #80	; 0x50
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40007000 	.word	0x40007000

080050d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80050ec:	4b17      	ldr	r3, [pc, #92]	; (800514c <MX_SPI1_Init+0x64>)
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <MX_SPI1_Init+0x68>)
 80050f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <MX_SPI1_Init+0x64>)
 80050f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <MX_SPI1_Init+0x64>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <MX_SPI1_Init+0x64>)
 8005102:	2200      	movs	r2, #0
 8005104:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <MX_SPI1_Init+0x64>)
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <MX_SPI1_Init+0x64>)
 800510e:	2200      	movs	r2, #0
 8005110:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <MX_SPI1_Init+0x64>)
 8005114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005118:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <MX_SPI1_Init+0x64>)
 800511c:	2210      	movs	r2, #16
 800511e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <MX_SPI1_Init+0x64>)
 8005122:	2200      	movs	r2, #0
 8005124:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <MX_SPI1_Init+0x64>)
 8005128:	2200      	movs	r2, #0
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <MX_SPI1_Init+0x64>)
 800512e:	2200      	movs	r2, #0
 8005130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <MX_SPI1_Init+0x64>)
 8005134:	220a      	movs	r2, #10
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005138:	4804      	ldr	r0, [pc, #16]	; (800514c <MX_SPI1_Init+0x64>)
 800513a:	f7fe f98f 	bl	800345c <HAL_SPI_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005144:	f7ff ffc8 	bl	80050d8 <Error_Handler>
  }

}
 8005148:	bf00      	nop
 800514a:	bd80      	pop	{r7, pc}
 800514c:	2000036c 	.word	0x2000036c
 8005150:	40013000 	.word	0x40013000

08005154 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800515c:	f107 0314 	add.w	r3, r7, #20
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <HAL_SPI_MspInit+0x84>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d12b      	bne.n	80051ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	4b18      	ldr	r3, [pc, #96]	; (80051dc <HAL_SPI_MspInit+0x88>)
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_SPI_MspInit+0x88>)
 8005180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005184:	6453      	str	r3, [r2, #68]	; 0x44
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <HAL_SPI_MspInit+0x88>)
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_SPI_MspInit+0x88>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <HAL_SPI_MspInit+0x88>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6313      	str	r3, [r2, #48]	; 0x30
 80051a2:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <HAL_SPI_MspInit+0x88>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80051ae:	23a0      	movs	r3, #160	; 0xa0
 80051b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b2:	2302      	movs	r3, #2
 80051b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ba:	2303      	movs	r3, #3
 80051bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051be:	2305      	movs	r3, #5
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	4619      	mov	r1, r3
 80051c8:	4805      	ldr	r0, [pc, #20]	; (80051e0 <HAL_SPI_MspInit+0x8c>)
 80051ca:	f7fc fb7f 	bl	80018cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80051ce:	bf00      	nop
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40013000 	.word	0x40013000
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40020000 	.word	0x40020000

080051e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <HAL_MspInit+0x4c>)
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	4a0f      	ldr	r2, [pc, #60]	; (8005230 <HAL_MspInit+0x4c>)
 80051f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f8:	6453      	str	r3, [r2, #68]	; 0x44
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <HAL_MspInit+0x4c>)
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_MspInit+0x4c>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <HAL_MspInit+0x4c>)
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005214:	6413      	str	r3, [r2, #64]	; 0x40
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_MspInit+0x4c>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800

08005234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005246:	e7fe      	b.n	8005246 <HardFault_Handler+0x4>

08005248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800524c:	e7fe      	b.n	800524c <MemManage_Handler+0x4>

0800524e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005252:	e7fe      	b.n	8005252 <BusFault_Handler+0x4>

08005254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005258:	e7fe      	b.n	8005258 <UsageFault_Handler+0x4>

0800525a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800525a:	b480      	push	{r7}
 800525c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800527a:	bf00      	nop
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005288:	f7fb fe02 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800528c:	bf00      	nop
 800528e:	bd80      	pop	{r7, pc}

08005290 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005294:	2001      	movs	r0, #1
 8005296:	f7fc fcc5 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}

0800529e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80052a2:	2002      	movs	r0, #2
 80052a4:	f7fc fcbe 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80052a8:	bf00      	nop
 80052aa:	bd80      	pop	{r7, pc}

080052ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80052b0:	2010      	movs	r0, #16
 80052b2:	f7fc fcb7 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80052b6:	bf00      	nop
 80052b8:	bd80      	pop	{r7, pc}

080052ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80052be:	2020      	movs	r0, #32
 80052c0:	f7fc fcb0 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <_sbrk+0x50>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <_sbrk+0x16>
		heap_end = &end;
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <_sbrk+0x50>)
 80052da:	4a10      	ldr	r2, [pc, #64]	; (800531c <_sbrk+0x54>)
 80052dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <_sbrk+0x50>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <_sbrk+0x50>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4413      	add	r3, r2
 80052ec:	466a      	mov	r2, sp
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d907      	bls.n	8005302 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80052f2:	f000 fa17 	bl	8005724 <__errno>
 80052f6:	4602      	mov	r2, r0
 80052f8:	230c      	movs	r3, #12
 80052fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80052fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005300:	e006      	b.n	8005310 <_sbrk+0x48>
	}

	heap_end += incr;
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <_sbrk+0x50>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	4a03      	ldr	r2, [pc, #12]	; (8005318 <_sbrk+0x50>)
 800530c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800530e:	68fb      	ldr	r3, [r7, #12]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000294 	.word	0x20000294
 800531c:	20000448 	.word	0x20000448

08005320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005324:	4b16      	ldr	r3, [pc, #88]	; (8005380 <SystemInit+0x60>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	4a15      	ldr	r2, [pc, #84]	; (8005380 <SystemInit+0x60>)
 800532c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005334:	4b13      	ldr	r3, [pc, #76]	; (8005384 <SystemInit+0x64>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a12      	ldr	r2, [pc, #72]	; (8005384 <SystemInit+0x64>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005340:	4b10      	ldr	r3, [pc, #64]	; (8005384 <SystemInit+0x64>)
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <SystemInit+0x64>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0e      	ldr	r2, [pc, #56]	; (8005384 <SystemInit+0x64>)
 800534c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <SystemInit+0x64>)
 8005358:	4a0b      	ldr	r2, [pc, #44]	; (8005388 <SystemInit+0x68>)
 800535a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <SystemInit+0x64>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a08      	ldr	r2, [pc, #32]	; (8005384 <SystemInit+0x64>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005366:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <SystemInit+0x64>)
 800536a:	2200      	movs	r2, #0
 800536c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <SystemInit+0x60>)
 8005370:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005374:	609a      	str	r2, [r3, #8]
#endif
}
 8005376:	bf00      	nop
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000ed00 	.word	0xe000ed00
 8005384:	40023800 	.word	0x40023800
 8005388:	24003010 	.word	0x24003010

0800538c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b092      	sub	sp, #72	; 0x48
 8005390:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005392:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800539c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	611a      	str	r2, [r3, #16]
 80053ac:	615a      	str	r2, [r3, #20]
 80053ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	2220      	movs	r2, #32
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f9de 	bl	8005778 <memset>

  htim1.Instance = TIM1;
 80053bc:	4b33      	ldr	r3, [pc, #204]	; (800548c <MX_TIM1_Init+0x100>)
 80053be:	4a34      	ldr	r2, [pc, #208]	; (8005490 <MX_TIM1_Init+0x104>)
 80053c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80053c2:	4b32      	ldr	r3, [pc, #200]	; (800548c <MX_TIM1_Init+0x100>)
 80053c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ca:	4b30      	ldr	r3, [pc, #192]	; (800548c <MX_TIM1_Init+0x100>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <MX_TIM1_Init+0x100>)
 80053d2:	2263      	movs	r2, #99	; 0x63
 80053d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d6:	4b2d      	ldr	r3, [pc, #180]	; (800548c <MX_TIM1_Init+0x100>)
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <MX_TIM1_Init+0x100>)
 80053de:	2200      	movs	r2, #0
 80053e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e2:	4b2a      	ldr	r3, [pc, #168]	; (800548c <MX_TIM1_Init+0x100>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80053e8:	4828      	ldr	r0, [pc, #160]	; (800548c <MX_TIM1_Init+0x100>)
 80053ea:	f7fe fa7b 	bl	80038e4 <HAL_TIM_PWM_Init>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80053f4:	f7ff fe70 	bl	80050d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053f8:	2300      	movs	r3, #0
 80053fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005400:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005404:	4619      	mov	r1, r3
 8005406:	4821      	ldr	r0, [pc, #132]	; (800548c <MX_TIM1_Init+0x100>)
 8005408:	f7fe fe11 	bl	800402e <HAL_TIMEx_MasterConfigSynchronization>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005412:	f7ff fe61 	bl	80050d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005416:	2360      	movs	r3, #96	; 0x60
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800541e:	2300      	movs	r3, #0
 8005420:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005422:	2300      	movs	r3, #0
 8005424:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005426:	2300      	movs	r3, #0
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800542a:	2300      	movs	r3, #0
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005436:	2204      	movs	r2, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4814      	ldr	r0, [pc, #80]	; (800548c <MX_TIM1_Init+0x100>)
 800543c:	f7fe fabc 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8005446:	f7ff fe47 	bl	80050d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800545e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005462:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005464:	2300      	movs	r3, #0
 8005466:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005468:	1d3b      	adds	r3, r7, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4807      	ldr	r0, [pc, #28]	; (800548c <MX_TIM1_Init+0x100>)
 800546e:	f7fe fe23 	bl	80040b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8005478:	f7ff fe2e 	bl	80050d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800547c:	4803      	ldr	r0, [pc, #12]	; (800548c <MX_TIM1_Init+0x100>)
 800547e:	f000 f8a5 	bl	80055cc <HAL_TIM_MspPostInit>

}
 8005482:	bf00      	nop
 8005484:	3748      	adds	r7, #72	; 0x48
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000404 	.word	0x20000404
 8005490:	40010000 	.word	0x40010000

08005494 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800549a:	f107 0320 	add.w	r3, r7, #32
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	611a      	str	r2, [r3, #16]
 80054b2:	615a      	str	r2, [r3, #20]
 80054b4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054b8:	4a27      	ldr	r2, [pc, #156]	; (8005558 <MX_TIM3_Init+0xc4>)
 80054ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80054bc:	4b25      	ldr	r3, [pc, #148]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054c4:	4b23      	ldr	r3, [pc, #140]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054cc:	2263      	movs	r2, #99	; 0x63
 80054ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054d0:	4b20      	ldr	r3, [pc, #128]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054d6:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80054dc:	481d      	ldr	r0, [pc, #116]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054de:	f7fe fa01 	bl	80038e4 <HAL_TIM_PWM_Init>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80054e8:	f7ff fdf6 	bl	80050d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ec:	2300      	movs	r3, #0
 80054ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80054f4:	f107 0320 	add.w	r3, r7, #32
 80054f8:	4619      	mov	r1, r3
 80054fa:	4816      	ldr	r0, [pc, #88]	; (8005554 <MX_TIM3_Init+0xc0>)
 80054fc:	f7fe fd97 	bl	800402e <HAL_TIMEx_MasterConfigSynchronization>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005506:	f7ff fde7 	bl	80050d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800550a:	2360      	movs	r3, #96	; 0x60
 800550c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	2200      	movs	r2, #0
 800551e:	4619      	mov	r1, r3
 8005520:	480c      	ldr	r0, [pc, #48]	; (8005554 <MX_TIM3_Init+0xc0>)
 8005522:	f7fe fa49 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800552c:	f7ff fdd4 	bl	80050d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	2204      	movs	r2, #4
 8005534:	4619      	mov	r1, r3
 8005536:	4807      	ldr	r0, [pc, #28]	; (8005554 <MX_TIM3_Init+0xc0>)
 8005538:	f7fe fa3e 	bl	80039b8 <HAL_TIM_PWM_ConfigChannel>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005542:	f7ff fdc9 	bl	80050d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005546:	4803      	ldr	r0, [pc, #12]	; (8005554 <MX_TIM3_Init+0xc0>)
 8005548:	f000 f840 	bl	80055cc <HAL_TIM_MspPostInit>

}
 800554c:	bf00      	nop
 800554e:	3728      	adds	r7, #40	; 0x28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	200003c4 	.word	0x200003c4
 8005558:	40000400 	.word	0x40000400

0800555c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <HAL_TIM_PWM_MspInit+0x64>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d10e      	bne.n	800558c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <HAL_TIM_PWM_MspInit+0x68>)
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <HAL_TIM_PWM_MspInit+0x68>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6453      	str	r3, [r2, #68]	; 0x44
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <HAL_TIM_PWM_MspInit+0x68>)
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800558a:	e012      	b.n	80055b2 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <HAL_TIM_PWM_MspInit+0x6c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10d      	bne.n	80055b2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_TIM_PWM_MspInit+0x68>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <HAL_TIM_PWM_MspInit+0x68>)
 80055a0:	f043 0302 	orr.w	r3, r3, #2
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <HAL_TIM_PWM_MspInit+0x68>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40000400 	.word	0x40000400

080055cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a33      	ldr	r2, [pc, #204]	; (80056b8 <HAL_TIM_MspPostInit+0xec>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d11f      	bne.n	800562e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	4b32      	ldr	r3, [pc, #200]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	4a31      	ldr	r2, [pc, #196]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	6313      	str	r3, [r2, #48]	; 0x30
 80055fe:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800560a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800560e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005610:	2302      	movs	r3, #2
 8005612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005618:	2300      	movs	r3, #0
 800561a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800561c:	2301      	movs	r3, #1
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005620:	f107 0314 	add.w	r3, r7, #20
 8005624:	4619      	mov	r1, r3
 8005626:	4826      	ldr	r0, [pc, #152]	; (80056c0 <HAL_TIM_MspPostInit+0xf4>)
 8005628:	f7fc f950 	bl	80018cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800562c:	e040      	b.n	80056b0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <HAL_TIM_MspPostInit+0xf8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d13b      	bne.n	80056b0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	4b1f      	ldr	r3, [pc, #124]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	6313      	str	r3, [r2, #48]	; 0x30
 8005648:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	4b18      	ldr	r3, [pc, #96]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4a17      	ldr	r2, [pc, #92]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 800565e:	f043 0302 	orr.w	r3, r3, #2
 8005662:	6313      	str	r3, [r2, #48]	; 0x30
 8005664:	4b15      	ldr	r3, [pc, #84]	; (80056bc <HAL_TIM_MspPostInit+0xf0>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005674:	2302      	movs	r3, #2
 8005676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567c:	2300      	movs	r3, #0
 800567e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005680:	2302      	movs	r3, #2
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005684:	f107 0314 	add.w	r3, r7, #20
 8005688:	4619      	mov	r1, r3
 800568a:	480f      	ldr	r0, [pc, #60]	; (80056c8 <HAL_TIM_MspPostInit+0xfc>)
 800568c:	f7fc f91e 	bl	80018cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005690:	2310      	movs	r3, #16
 8005692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005694:	2302      	movs	r3, #2
 8005696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569c:	2300      	movs	r3, #0
 800569e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056a0:	2302      	movs	r3, #2
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056a4:	f107 0314 	add.w	r3, r7, #20
 80056a8:	4619      	mov	r1, r3
 80056aa:	4808      	ldr	r0, [pc, #32]	; (80056cc <HAL_TIM_MspPostInit+0x100>)
 80056ac:	f7fc f90e 	bl	80018cc <HAL_GPIO_Init>
}
 80056b0:	bf00      	nop
 80056b2:	3728      	adds	r7, #40	; 0x28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40023800 	.word	0x40023800
 80056c0:	40020000 	.word	0x40020000
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40020800 	.word	0x40020800
 80056cc:	40020400 	.word	0x40020400

080056d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056d6:	e003      	b.n	80056e0 <LoopCopyDataInit>

080056d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056de:	3104      	adds	r1, #4

080056e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056e0:	480b      	ldr	r0, [pc, #44]	; (8005710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056e8:	d3f6      	bcc.n	80056d8 <CopyDataInit>
  ldr  r2, =_sbss
 80056ea:	4a0b      	ldr	r2, [pc, #44]	; (8005718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056ec:	e002      	b.n	80056f4 <LoopFillZerobss>

080056ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056f0:	f842 3b04 	str.w	r3, [r2], #4

080056f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056f8:	d3f9      	bcc.n	80056ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056fa:	f7ff fe11 	bl	8005320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056fe:	f000 f817 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005702:	f7ff fb41 	bl	8004d88 <main>
  bx  lr    
 8005706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800570c:	080063e4 	.word	0x080063e4
  ldr  r0, =_sdata
 8005710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005714:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8005718:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800571c:	20000448 	.word	0x20000448

08005720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005720:	e7fe      	b.n	8005720 <ADC_IRQHandler>
	...

08005724 <__errno>:
 8005724:	4b01      	ldr	r3, [pc, #4]	; (800572c <__errno+0x8>)
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	2000000c 	.word	0x2000000c

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4e0d      	ldr	r6, [pc, #52]	; (8005768 <__libc_init_array+0x38>)
 8005734:	4c0d      	ldr	r4, [pc, #52]	; (800576c <__libc_init_array+0x3c>)
 8005736:	1ba4      	subs	r4, r4, r6
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	2500      	movs	r5, #0
 800573c:	42a5      	cmp	r5, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	4e0b      	ldr	r6, [pc, #44]	; (8005770 <__libc_init_array+0x40>)
 8005742:	4c0c      	ldr	r4, [pc, #48]	; (8005774 <__libc_init_array+0x44>)
 8005744:	f000 fc26 	bl	8005f94 <_init>
 8005748:	1ba4      	subs	r4, r4, r6
 800574a:	10a4      	asrs	r4, r4, #2
 800574c:	2500      	movs	r5, #0
 800574e:	42a5      	cmp	r5, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005758:	4798      	blx	r3
 800575a:	3501      	adds	r5, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005762:	4798      	blx	r3
 8005764:	3501      	adds	r5, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	080063dc 	.word	0x080063dc
 800576c:	080063dc 	.word	0x080063dc
 8005770:	080063dc 	.word	0x080063dc
 8005774:	080063e0 	.word	0x080063e0

08005778 <memset>:
 8005778:	4402      	add	r2, r0
 800577a:	4603      	mov	r3, r0
 800577c:	4293      	cmp	r3, r2
 800577e:	d100      	bne.n	8005782 <memset+0xa>
 8005780:	4770      	bx	lr
 8005782:	f803 1b01 	strb.w	r1, [r3], #1
 8005786:	e7f9      	b.n	800577c <memset+0x4>

08005788 <siprintf>:
 8005788:	b40e      	push	{r1, r2, r3}
 800578a:	b500      	push	{lr}
 800578c:	b09c      	sub	sp, #112	; 0x70
 800578e:	ab1d      	add	r3, sp, #116	; 0x74
 8005790:	9002      	str	r0, [sp, #8]
 8005792:	9006      	str	r0, [sp, #24]
 8005794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005798:	4809      	ldr	r0, [pc, #36]	; (80057c0 <siprintf+0x38>)
 800579a:	9107      	str	r1, [sp, #28]
 800579c:	9104      	str	r1, [sp, #16]
 800579e:	4909      	ldr	r1, [pc, #36]	; (80057c4 <siprintf+0x3c>)
 80057a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a4:	9105      	str	r1, [sp, #20]
 80057a6:	6800      	ldr	r0, [r0, #0]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	a902      	add	r1, sp, #8
 80057ac:	f000 f866 	bl	800587c <_svfiprintf_r>
 80057b0:	9b02      	ldr	r3, [sp, #8]
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	b01c      	add	sp, #112	; 0x70
 80057b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057bc:	b003      	add	sp, #12
 80057be:	4770      	bx	lr
 80057c0:	2000000c 	.word	0x2000000c
 80057c4:	ffff0208 	.word	0xffff0208

080057c8 <__ssputs_r>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	688e      	ldr	r6, [r1, #8]
 80057ce:	429e      	cmp	r6, r3
 80057d0:	4682      	mov	sl, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4690      	mov	r8, r2
 80057d6:	4699      	mov	r9, r3
 80057d8:	d837      	bhi.n	800584a <__ssputs_r+0x82>
 80057da:	898a      	ldrh	r2, [r1, #12]
 80057dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057e0:	d031      	beq.n	8005846 <__ssputs_r+0x7e>
 80057e2:	6825      	ldr	r5, [r4, #0]
 80057e4:	6909      	ldr	r1, [r1, #16]
 80057e6:	1a6f      	subs	r7, r5, r1
 80057e8:	6965      	ldr	r5, [r4, #20]
 80057ea:	2302      	movs	r3, #2
 80057ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80057f4:	f109 0301 	add.w	r3, r9, #1
 80057f8:	443b      	add	r3, r7
 80057fa:	429d      	cmp	r5, r3
 80057fc:	bf38      	it	cc
 80057fe:	461d      	movcc	r5, r3
 8005800:	0553      	lsls	r3, r2, #21
 8005802:	d530      	bpl.n	8005866 <__ssputs_r+0x9e>
 8005804:	4629      	mov	r1, r5
 8005806:	f000 fb2b 	bl	8005e60 <_malloc_r>
 800580a:	4606      	mov	r6, r0
 800580c:	b950      	cbnz	r0, 8005824 <__ssputs_r+0x5c>
 800580e:	230c      	movs	r3, #12
 8005810:	f8ca 3000 	str.w	r3, [sl]
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005824:	463a      	mov	r2, r7
 8005826:	6921      	ldr	r1, [r4, #16]
 8005828:	f000 faa8 	bl	8005d7c <memcpy>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	6126      	str	r6, [r4, #16]
 800583a:	6165      	str	r5, [r4, #20]
 800583c:	443e      	add	r6, r7
 800583e:	1bed      	subs	r5, r5, r7
 8005840:	6026      	str	r6, [r4, #0]
 8005842:	60a5      	str	r5, [r4, #8]
 8005844:	464e      	mov	r6, r9
 8005846:	454e      	cmp	r6, r9
 8005848:	d900      	bls.n	800584c <__ssputs_r+0x84>
 800584a:	464e      	mov	r6, r9
 800584c:	4632      	mov	r2, r6
 800584e:	4641      	mov	r1, r8
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	f000 fa9e 	bl	8005d92 <memmove>
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	1b9b      	subs	r3, r3, r6
 800585a:	60a3      	str	r3, [r4, #8]
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	441e      	add	r6, r3
 8005860:	6026      	str	r6, [r4, #0]
 8005862:	2000      	movs	r0, #0
 8005864:	e7dc      	b.n	8005820 <__ssputs_r+0x58>
 8005866:	462a      	mov	r2, r5
 8005868:	f000 fb54 	bl	8005f14 <_realloc_r>
 800586c:	4606      	mov	r6, r0
 800586e:	2800      	cmp	r0, #0
 8005870:	d1e2      	bne.n	8005838 <__ssputs_r+0x70>
 8005872:	6921      	ldr	r1, [r4, #16]
 8005874:	4650      	mov	r0, sl
 8005876:	f000 faa5 	bl	8005dc4 <_free_r>
 800587a:	e7c8      	b.n	800580e <__ssputs_r+0x46>

0800587c <_svfiprintf_r>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	461d      	mov	r5, r3
 8005882:	898b      	ldrh	r3, [r1, #12]
 8005884:	061f      	lsls	r7, r3, #24
 8005886:	b09d      	sub	sp, #116	; 0x74
 8005888:	4680      	mov	r8, r0
 800588a:	460c      	mov	r4, r1
 800588c:	4616      	mov	r6, r2
 800588e:	d50f      	bpl.n	80058b0 <_svfiprintf_r+0x34>
 8005890:	690b      	ldr	r3, [r1, #16]
 8005892:	b96b      	cbnz	r3, 80058b0 <_svfiprintf_r+0x34>
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	f000 fae3 	bl	8005e60 <_malloc_r>
 800589a:	6020      	str	r0, [r4, #0]
 800589c:	6120      	str	r0, [r4, #16]
 800589e:	b928      	cbnz	r0, 80058ac <_svfiprintf_r+0x30>
 80058a0:	230c      	movs	r3, #12
 80058a2:	f8c8 3000 	str.w	r3, [r8]
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	e0c8      	b.n	8005a3e <_svfiprintf_r+0x1c2>
 80058ac:	2340      	movs	r3, #64	; 0x40
 80058ae:	6163      	str	r3, [r4, #20]
 80058b0:	2300      	movs	r3, #0
 80058b2:	9309      	str	r3, [sp, #36]	; 0x24
 80058b4:	2320      	movs	r3, #32
 80058b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ba:	2330      	movs	r3, #48	; 0x30
 80058bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058c0:	9503      	str	r5, [sp, #12]
 80058c2:	f04f 0b01 	mov.w	fp, #1
 80058c6:	4637      	mov	r7, r6
 80058c8:	463d      	mov	r5, r7
 80058ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058ce:	b10b      	cbz	r3, 80058d4 <_svfiprintf_r+0x58>
 80058d0:	2b25      	cmp	r3, #37	; 0x25
 80058d2:	d13e      	bne.n	8005952 <_svfiprintf_r+0xd6>
 80058d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80058d8:	d00b      	beq.n	80058f2 <_svfiprintf_r+0x76>
 80058da:	4653      	mov	r3, sl
 80058dc:	4632      	mov	r2, r6
 80058de:	4621      	mov	r1, r4
 80058e0:	4640      	mov	r0, r8
 80058e2:	f7ff ff71 	bl	80057c8 <__ssputs_r>
 80058e6:	3001      	adds	r0, #1
 80058e8:	f000 80a4 	beq.w	8005a34 <_svfiprintf_r+0x1b8>
 80058ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ee:	4453      	add	r3, sl
 80058f0:	9309      	str	r3, [sp, #36]	; 0x24
 80058f2:	783b      	ldrb	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 809d 	beq.w	8005a34 <_svfiprintf_r+0x1b8>
 80058fa:	2300      	movs	r3, #0
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800590c:	931a      	str	r3, [sp, #104]	; 0x68
 800590e:	462f      	mov	r7, r5
 8005910:	2205      	movs	r2, #5
 8005912:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005916:	4850      	ldr	r0, [pc, #320]	; (8005a58 <_svfiprintf_r+0x1dc>)
 8005918:	f7fa fc7a 	bl	8000210 <memchr>
 800591c:	9b04      	ldr	r3, [sp, #16]
 800591e:	b9d0      	cbnz	r0, 8005956 <_svfiprintf_r+0xda>
 8005920:	06d9      	lsls	r1, r3, #27
 8005922:	bf44      	itt	mi
 8005924:	2220      	movmi	r2, #32
 8005926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800592a:	071a      	lsls	r2, r3, #28
 800592c:	bf44      	itt	mi
 800592e:	222b      	movmi	r2, #43	; 0x2b
 8005930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005934:	782a      	ldrb	r2, [r5, #0]
 8005936:	2a2a      	cmp	r2, #42	; 0x2a
 8005938:	d015      	beq.n	8005966 <_svfiprintf_r+0xea>
 800593a:	9a07      	ldr	r2, [sp, #28]
 800593c:	462f      	mov	r7, r5
 800593e:	2000      	movs	r0, #0
 8005940:	250a      	movs	r5, #10
 8005942:	4639      	mov	r1, r7
 8005944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005948:	3b30      	subs	r3, #48	; 0x30
 800594a:	2b09      	cmp	r3, #9
 800594c:	d94d      	bls.n	80059ea <_svfiprintf_r+0x16e>
 800594e:	b1b8      	cbz	r0, 8005980 <_svfiprintf_r+0x104>
 8005950:	e00f      	b.n	8005972 <_svfiprintf_r+0xf6>
 8005952:	462f      	mov	r7, r5
 8005954:	e7b8      	b.n	80058c8 <_svfiprintf_r+0x4c>
 8005956:	4a40      	ldr	r2, [pc, #256]	; (8005a58 <_svfiprintf_r+0x1dc>)
 8005958:	1a80      	subs	r0, r0, r2
 800595a:	fa0b f000 	lsl.w	r0, fp, r0
 800595e:	4318      	orrs	r0, r3
 8005960:	9004      	str	r0, [sp, #16]
 8005962:	463d      	mov	r5, r7
 8005964:	e7d3      	b.n	800590e <_svfiprintf_r+0x92>
 8005966:	9a03      	ldr	r2, [sp, #12]
 8005968:	1d11      	adds	r1, r2, #4
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	9103      	str	r1, [sp, #12]
 800596e:	2a00      	cmp	r2, #0
 8005970:	db01      	blt.n	8005976 <_svfiprintf_r+0xfa>
 8005972:	9207      	str	r2, [sp, #28]
 8005974:	e004      	b.n	8005980 <_svfiprintf_r+0x104>
 8005976:	4252      	negs	r2, r2
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	9207      	str	r2, [sp, #28]
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	783b      	ldrb	r3, [r7, #0]
 8005982:	2b2e      	cmp	r3, #46	; 0x2e
 8005984:	d10c      	bne.n	80059a0 <_svfiprintf_r+0x124>
 8005986:	787b      	ldrb	r3, [r7, #1]
 8005988:	2b2a      	cmp	r3, #42	; 0x2a
 800598a:	d133      	bne.n	80059f4 <_svfiprintf_r+0x178>
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	9203      	str	r2, [sp, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	bfb8      	it	lt
 8005998:	f04f 33ff 	movlt.w	r3, #4294967295
 800599c:	3702      	adds	r7, #2
 800599e:	9305      	str	r3, [sp, #20]
 80059a0:	4d2e      	ldr	r5, [pc, #184]	; (8005a5c <_svfiprintf_r+0x1e0>)
 80059a2:	7839      	ldrb	r1, [r7, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	4628      	mov	r0, r5
 80059a8:	f7fa fc32 	bl	8000210 <memchr>
 80059ac:	b138      	cbz	r0, 80059be <_svfiprintf_r+0x142>
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	1b40      	subs	r0, r0, r5
 80059b2:	fa03 f000 	lsl.w	r0, r3, r0
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	4303      	orrs	r3, r0
 80059ba:	3701      	adds	r7, #1
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	7839      	ldrb	r1, [r7, #0]
 80059c0:	4827      	ldr	r0, [pc, #156]	; (8005a60 <_svfiprintf_r+0x1e4>)
 80059c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c6:	2206      	movs	r2, #6
 80059c8:	1c7e      	adds	r6, r7, #1
 80059ca:	f7fa fc21 	bl	8000210 <memchr>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d038      	beq.n	8005a44 <_svfiprintf_r+0x1c8>
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <_svfiprintf_r+0x1e8>)
 80059d4:	bb13      	cbnz	r3, 8005a1c <_svfiprintf_r+0x1a0>
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	3307      	adds	r3, #7
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	3308      	adds	r3, #8
 80059e0:	9303      	str	r3, [sp, #12]
 80059e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e4:	444b      	add	r3, r9
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	e76d      	b.n	80058c6 <_svfiprintf_r+0x4a>
 80059ea:	fb05 3202 	mla	r2, r5, r2, r3
 80059ee:	2001      	movs	r0, #1
 80059f0:	460f      	mov	r7, r1
 80059f2:	e7a6      	b.n	8005942 <_svfiprintf_r+0xc6>
 80059f4:	2300      	movs	r3, #0
 80059f6:	3701      	adds	r7, #1
 80059f8:	9305      	str	r3, [sp, #20]
 80059fa:	4619      	mov	r1, r3
 80059fc:	250a      	movs	r5, #10
 80059fe:	4638      	mov	r0, r7
 8005a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a04:	3a30      	subs	r2, #48	; 0x30
 8005a06:	2a09      	cmp	r2, #9
 8005a08:	d903      	bls.n	8005a12 <_svfiprintf_r+0x196>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0c8      	beq.n	80059a0 <_svfiprintf_r+0x124>
 8005a0e:	9105      	str	r1, [sp, #20]
 8005a10:	e7c6      	b.n	80059a0 <_svfiprintf_r+0x124>
 8005a12:	fb05 2101 	mla	r1, r5, r1, r2
 8005a16:	2301      	movs	r3, #1
 8005a18:	4607      	mov	r7, r0
 8005a1a:	e7f0      	b.n	80059fe <_svfiprintf_r+0x182>
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4622      	mov	r2, r4
 8005a22:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <_svfiprintf_r+0x1ec>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4640      	mov	r0, r8
 8005a28:	f3af 8000 	nop.w
 8005a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a30:	4681      	mov	r9, r0
 8005a32:	d1d6      	bne.n	80059e2 <_svfiprintf_r+0x166>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	065b      	lsls	r3, r3, #25
 8005a38:	f53f af35 	bmi.w	80058a6 <_svfiprintf_r+0x2a>
 8005a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3e:	b01d      	add	sp, #116	; 0x74
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	ab03      	add	r3, sp, #12
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <_svfiprintf_r+0x1ec>)
 8005a4c:	a904      	add	r1, sp, #16
 8005a4e:	4640      	mov	r0, r8
 8005a50:	f000 f882 	bl	8005b58 <_printf_i>
 8005a54:	e7ea      	b.n	8005a2c <_svfiprintf_r+0x1b0>
 8005a56:	bf00      	nop
 8005a58:	080063a0 	.word	0x080063a0
 8005a5c:	080063a6 	.word	0x080063a6
 8005a60:	080063aa 	.word	0x080063aa
 8005a64:	00000000 	.word	0x00000000
 8005a68:	080057c9 	.word	0x080057c9

08005a6c <_printf_common>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	4691      	mov	r9, r2
 8005a72:	461f      	mov	r7, r3
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bfb8      	it	lt
 8005a80:	4613      	movlt	r3, r2
 8005a82:	f8c9 3000 	str.w	r3, [r9]
 8005a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	b112      	cbz	r2, 8005a96 <_printf_common+0x2a>
 8005a90:	3301      	adds	r3, #1
 8005a92:	f8c9 3000 	str.w	r3, [r9]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	0699      	lsls	r1, r3, #26
 8005a9a:	bf42      	ittt	mi
 8005a9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005aa0:	3302      	addmi	r3, #2
 8005aa2:	f8c9 3000 	strmi.w	r3, [r9]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	f015 0506 	ands.w	r5, r5, #6
 8005aac:	d107      	bne.n	8005abe <_printf_common+0x52>
 8005aae:	f104 0a19 	add.w	sl, r4, #25
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	42ab      	cmp	r3, r5
 8005abc:	dc28      	bgt.n	8005b10 <_printf_common+0xa4>
 8005abe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	3300      	adds	r3, #0
 8005ac6:	bf18      	it	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	0692      	lsls	r2, r2, #26
 8005acc:	d42d      	bmi.n	8005b2a <_printf_common+0xbe>
 8005ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	47c0      	blx	r8
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d020      	beq.n	8005b1e <_printf_common+0xb2>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	68e5      	ldr	r5, [r4, #12]
 8005ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ae4:	f003 0306 	and.w	r3, r3, #6
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	bf08      	it	eq
 8005aec:	1aad      	subeq	r5, r5, r2
 8005aee:	68a3      	ldr	r3, [r4, #8]
 8005af0:	6922      	ldr	r2, [r4, #16]
 8005af2:	bf0c      	ite	eq
 8005af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af8:	2500      	movne	r5, #0
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bfc4      	itt	gt
 8005afe:	1a9b      	subgt	r3, r3, r2
 8005b00:	18ed      	addgt	r5, r5, r3
 8005b02:	f04f 0900 	mov.w	r9, #0
 8005b06:	341a      	adds	r4, #26
 8005b08:	454d      	cmp	r5, r9
 8005b0a:	d11a      	bne.n	8005b42 <_printf_common+0xd6>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e008      	b.n	8005b22 <_printf_common+0xb6>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4652      	mov	r2, sl
 8005b14:	4639      	mov	r1, r7
 8005b16:	4630      	mov	r0, r6
 8005b18:	47c0      	blx	r8
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d103      	bne.n	8005b26 <_printf_common+0xba>
 8005b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b26:	3501      	adds	r5, #1
 8005b28:	e7c3      	b.n	8005ab2 <_printf_common+0x46>
 8005b2a:	18e1      	adds	r1, r4, r3
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	2030      	movs	r0, #48	; 0x30
 8005b30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b34:	4422      	add	r2, r4
 8005b36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b3e:	3302      	adds	r3, #2
 8005b40:	e7c5      	b.n	8005ace <_printf_common+0x62>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4622      	mov	r2, r4
 8005b46:	4639      	mov	r1, r7
 8005b48:	4630      	mov	r0, r6
 8005b4a:	47c0      	blx	r8
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d0e6      	beq.n	8005b1e <_printf_common+0xb2>
 8005b50:	f109 0901 	add.w	r9, r9, #1
 8005b54:	e7d8      	b.n	8005b08 <_printf_common+0x9c>
	...

08005b58 <_printf_i>:
 8005b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b60:	460c      	mov	r4, r1
 8005b62:	7e09      	ldrb	r1, [r1, #24]
 8005b64:	b085      	sub	sp, #20
 8005b66:	296e      	cmp	r1, #110	; 0x6e
 8005b68:	4617      	mov	r7, r2
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	4698      	mov	r8, r3
 8005b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b70:	f000 80b3 	beq.w	8005cda <_printf_i+0x182>
 8005b74:	d822      	bhi.n	8005bbc <_printf_i+0x64>
 8005b76:	2963      	cmp	r1, #99	; 0x63
 8005b78:	d036      	beq.n	8005be8 <_printf_i+0x90>
 8005b7a:	d80a      	bhi.n	8005b92 <_printf_i+0x3a>
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	f000 80b9 	beq.w	8005cf4 <_printf_i+0x19c>
 8005b82:	2958      	cmp	r1, #88	; 0x58
 8005b84:	f000 8083 	beq.w	8005c8e <_printf_i+0x136>
 8005b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b90:	e032      	b.n	8005bf8 <_printf_i+0xa0>
 8005b92:	2964      	cmp	r1, #100	; 0x64
 8005b94:	d001      	beq.n	8005b9a <_printf_i+0x42>
 8005b96:	2969      	cmp	r1, #105	; 0x69
 8005b98:	d1f6      	bne.n	8005b88 <_printf_i+0x30>
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	6813      	ldr	r3, [r2, #0]
 8005b9e:	0605      	lsls	r5, r0, #24
 8005ba0:	f103 0104 	add.w	r1, r3, #4
 8005ba4:	d52a      	bpl.n	8005bfc <_printf_i+0xa4>
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da03      	bge.n	8005bb6 <_printf_i+0x5e>
 8005bae:	222d      	movs	r2, #45	; 0x2d
 8005bb0:	425b      	negs	r3, r3
 8005bb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005bb6:	486f      	ldr	r0, [pc, #444]	; (8005d74 <_printf_i+0x21c>)
 8005bb8:	220a      	movs	r2, #10
 8005bba:	e039      	b.n	8005c30 <_printf_i+0xd8>
 8005bbc:	2973      	cmp	r1, #115	; 0x73
 8005bbe:	f000 809d 	beq.w	8005cfc <_printf_i+0x1a4>
 8005bc2:	d808      	bhi.n	8005bd6 <_printf_i+0x7e>
 8005bc4:	296f      	cmp	r1, #111	; 0x6f
 8005bc6:	d020      	beq.n	8005c0a <_printf_i+0xb2>
 8005bc8:	2970      	cmp	r1, #112	; 0x70
 8005bca:	d1dd      	bne.n	8005b88 <_printf_i+0x30>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	f043 0320 	orr.w	r3, r3, #32
 8005bd2:	6023      	str	r3, [r4, #0]
 8005bd4:	e003      	b.n	8005bde <_printf_i+0x86>
 8005bd6:	2975      	cmp	r1, #117	; 0x75
 8005bd8:	d017      	beq.n	8005c0a <_printf_i+0xb2>
 8005bda:	2978      	cmp	r1, #120	; 0x78
 8005bdc:	d1d4      	bne.n	8005b88 <_printf_i+0x30>
 8005bde:	2378      	movs	r3, #120	; 0x78
 8005be0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005be4:	4864      	ldr	r0, [pc, #400]	; (8005d78 <_printf_i+0x220>)
 8005be6:	e055      	b.n	8005c94 <_printf_i+0x13c>
 8005be8:	6813      	ldr	r3, [r2, #0]
 8005bea:	1d19      	adds	r1, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6011      	str	r1, [r2, #0]
 8005bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e08c      	b.n	8005d16 <_printf_i+0x1be>
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6011      	str	r1, [r2, #0]
 8005c00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c04:	bf18      	it	ne
 8005c06:	b21b      	sxthne	r3, r3
 8005c08:	e7cf      	b.n	8005baa <_printf_i+0x52>
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	6825      	ldr	r5, [r4, #0]
 8005c0e:	1d18      	adds	r0, r3, #4
 8005c10:	6010      	str	r0, [r2, #0]
 8005c12:	0628      	lsls	r0, r5, #24
 8005c14:	d501      	bpl.n	8005c1a <_printf_i+0xc2>
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	e002      	b.n	8005c20 <_printf_i+0xc8>
 8005c1a:	0668      	lsls	r0, r5, #25
 8005c1c:	d5fb      	bpl.n	8005c16 <_printf_i+0xbe>
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	4854      	ldr	r0, [pc, #336]	; (8005d74 <_printf_i+0x21c>)
 8005c22:	296f      	cmp	r1, #111	; 0x6f
 8005c24:	bf14      	ite	ne
 8005c26:	220a      	movne	r2, #10
 8005c28:	2208      	moveq	r2, #8
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c30:	6865      	ldr	r5, [r4, #4]
 8005c32:	60a5      	str	r5, [r4, #8]
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	f2c0 8095 	blt.w	8005d64 <_printf_i+0x20c>
 8005c3a:	6821      	ldr	r1, [r4, #0]
 8005c3c:	f021 0104 	bic.w	r1, r1, #4
 8005c40:	6021      	str	r1, [r4, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d13d      	bne.n	8005cc2 <_printf_i+0x16a>
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	f040 808e 	bne.w	8005d68 <_printf_i+0x210>
 8005c4c:	4665      	mov	r5, ip
 8005c4e:	2a08      	cmp	r2, #8
 8005c50:	d10b      	bne.n	8005c6a <_printf_i+0x112>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	07db      	lsls	r3, r3, #31
 8005c56:	d508      	bpl.n	8005c6a <_printf_i+0x112>
 8005c58:	6923      	ldr	r3, [r4, #16]
 8005c5a:	6862      	ldr	r2, [r4, #4]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	bfde      	ittt	le
 8005c60:	2330      	movle	r3, #48	; 0x30
 8005c62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c6a:	ebac 0305 	sub.w	r3, ip, r5
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	f8cd 8000 	str.w	r8, [sp]
 8005c74:	463b      	mov	r3, r7
 8005c76:	aa03      	add	r2, sp, #12
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff fef6 	bl	8005a6c <_printf_common>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d14d      	bne.n	8005d20 <_printf_i+0x1c8>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b005      	add	sp, #20
 8005c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c8e:	4839      	ldr	r0, [pc, #228]	; (8005d74 <_printf_i+0x21c>)
 8005c90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c94:	6813      	ldr	r3, [r2, #0]
 8005c96:	6821      	ldr	r1, [r4, #0]
 8005c98:	1d1d      	adds	r5, r3, #4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6015      	str	r5, [r2, #0]
 8005c9e:	060a      	lsls	r2, r1, #24
 8005ca0:	d50b      	bpl.n	8005cba <_printf_i+0x162>
 8005ca2:	07ca      	lsls	r2, r1, #31
 8005ca4:	bf44      	itt	mi
 8005ca6:	f041 0120 	orrmi.w	r1, r1, #32
 8005caa:	6021      	strmi	r1, [r4, #0]
 8005cac:	b91b      	cbnz	r3, 8005cb6 <_printf_i+0x15e>
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	f022 0220 	bic.w	r2, r2, #32
 8005cb4:	6022      	str	r2, [r4, #0]
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	e7b7      	b.n	8005c2a <_printf_i+0xd2>
 8005cba:	064d      	lsls	r5, r1, #25
 8005cbc:	bf48      	it	mi
 8005cbe:	b29b      	uxthmi	r3, r3
 8005cc0:	e7ef      	b.n	8005ca2 <_printf_i+0x14a>
 8005cc2:	4665      	mov	r5, ip
 8005cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cc8:	fb02 3311 	mls	r3, r2, r1, r3
 8005ccc:	5cc3      	ldrb	r3, [r0, r3]
 8005cce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d1f5      	bne.n	8005cc4 <_printf_i+0x16c>
 8005cd8:	e7b9      	b.n	8005c4e <_printf_i+0xf6>
 8005cda:	6813      	ldr	r3, [r2, #0]
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	6961      	ldr	r1, [r4, #20]
 8005ce0:	1d18      	adds	r0, r3, #4
 8005ce2:	6010      	str	r0, [r2, #0]
 8005ce4:	0628      	lsls	r0, r5, #24
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	d501      	bpl.n	8005cee <_printf_i+0x196>
 8005cea:	6019      	str	r1, [r3, #0]
 8005cec:	e002      	b.n	8005cf4 <_printf_i+0x19c>
 8005cee:	066a      	lsls	r2, r5, #25
 8005cf0:	d5fb      	bpl.n	8005cea <_printf_i+0x192>
 8005cf2:	8019      	strh	r1, [r3, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	4665      	mov	r5, ip
 8005cfa:	e7b9      	b.n	8005c70 <_printf_i+0x118>
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	1d19      	adds	r1, r3, #4
 8005d00:	6011      	str	r1, [r2, #0]
 8005d02:	681d      	ldr	r5, [r3, #0]
 8005d04:	6862      	ldr	r2, [r4, #4]
 8005d06:	2100      	movs	r1, #0
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f7fa fa81 	bl	8000210 <memchr>
 8005d0e:	b108      	cbz	r0, 8005d14 <_printf_i+0x1bc>
 8005d10:	1b40      	subs	r0, r0, r5
 8005d12:	6060      	str	r0, [r4, #4]
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d1e:	e7a7      	b.n	8005c70 <_printf_i+0x118>
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	462a      	mov	r2, r5
 8005d24:	4639      	mov	r1, r7
 8005d26:	4630      	mov	r0, r6
 8005d28:	47c0      	blx	r8
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d0aa      	beq.n	8005c84 <_printf_i+0x12c>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	079b      	lsls	r3, r3, #30
 8005d32:	d413      	bmi.n	8005d5c <_printf_i+0x204>
 8005d34:	68e0      	ldr	r0, [r4, #12]
 8005d36:	9b03      	ldr	r3, [sp, #12]
 8005d38:	4298      	cmp	r0, r3
 8005d3a:	bfb8      	it	lt
 8005d3c:	4618      	movlt	r0, r3
 8005d3e:	e7a3      	b.n	8005c88 <_printf_i+0x130>
 8005d40:	2301      	movs	r3, #1
 8005d42:	464a      	mov	r2, r9
 8005d44:	4639      	mov	r1, r7
 8005d46:	4630      	mov	r0, r6
 8005d48:	47c0      	blx	r8
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d09a      	beq.n	8005c84 <_printf_i+0x12c>
 8005d4e:	3501      	adds	r5, #1
 8005d50:	68e3      	ldr	r3, [r4, #12]
 8005d52:	9a03      	ldr	r2, [sp, #12]
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	42ab      	cmp	r3, r5
 8005d58:	dcf2      	bgt.n	8005d40 <_printf_i+0x1e8>
 8005d5a:	e7eb      	b.n	8005d34 <_printf_i+0x1dc>
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	f104 0919 	add.w	r9, r4, #25
 8005d62:	e7f5      	b.n	8005d50 <_printf_i+0x1f8>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1ac      	bne.n	8005cc2 <_printf_i+0x16a>
 8005d68:	7803      	ldrb	r3, [r0, #0]
 8005d6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d72:	e76c      	b.n	8005c4e <_printf_i+0xf6>
 8005d74:	080063b1 	.word	0x080063b1
 8005d78:	080063c2 	.word	0x080063c2

08005d7c <memcpy>:
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	1e43      	subs	r3, r0, #1
 8005d80:	440a      	add	r2, r1
 8005d82:	4291      	cmp	r1, r2
 8005d84:	d100      	bne.n	8005d88 <memcpy+0xc>
 8005d86:	bd10      	pop	{r4, pc}
 8005d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d90:	e7f7      	b.n	8005d82 <memcpy+0x6>

08005d92 <memmove>:
 8005d92:	4288      	cmp	r0, r1
 8005d94:	b510      	push	{r4, lr}
 8005d96:	eb01 0302 	add.w	r3, r1, r2
 8005d9a:	d807      	bhi.n	8005dac <memmove+0x1a>
 8005d9c:	1e42      	subs	r2, r0, #1
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	d00a      	beq.n	8005db8 <memmove+0x26>
 8005da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005daa:	e7f8      	b.n	8005d9e <memmove+0xc>
 8005dac:	4283      	cmp	r3, r0
 8005dae:	d9f5      	bls.n	8005d9c <memmove+0xa>
 8005db0:	1881      	adds	r1, r0, r2
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	42d3      	cmn	r3, r2
 8005db6:	d100      	bne.n	8005dba <memmove+0x28>
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005dc2:	e7f7      	b.n	8005db4 <memmove+0x22>

08005dc4 <_free_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	d045      	beq.n	8005e58 <_free_r+0x94>
 8005dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd0:	1f0c      	subs	r4, r1, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bfb8      	it	lt
 8005dd6:	18e4      	addlt	r4, r4, r3
 8005dd8:	f000 f8d2 	bl	8005f80 <__malloc_lock>
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <_free_r+0x98>)
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	4610      	mov	r0, r2
 8005de2:	b933      	cbnz	r3, 8005df2 <_free_r+0x2e>
 8005de4:	6063      	str	r3, [r4, #4]
 8005de6:	6014      	str	r4, [r2, #0]
 8005de8:	4628      	mov	r0, r5
 8005dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dee:	f000 b8c8 	b.w	8005f82 <__malloc_unlock>
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	d90c      	bls.n	8005e10 <_free_r+0x4c>
 8005df6:	6821      	ldr	r1, [r4, #0]
 8005df8:	1862      	adds	r2, r4, r1
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	bf04      	itt	eq
 8005dfe:	681a      	ldreq	r2, [r3, #0]
 8005e00:	685b      	ldreq	r3, [r3, #4]
 8005e02:	6063      	str	r3, [r4, #4]
 8005e04:	bf04      	itt	eq
 8005e06:	1852      	addeq	r2, r2, r1
 8005e08:	6022      	streq	r2, [r4, #0]
 8005e0a:	6004      	str	r4, [r0, #0]
 8005e0c:	e7ec      	b.n	8005de8 <_free_r+0x24>
 8005e0e:	4613      	mov	r3, r2
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	b10a      	cbz	r2, 8005e18 <_free_r+0x54>
 8005e14:	42a2      	cmp	r2, r4
 8005e16:	d9fa      	bls.n	8005e0e <_free_r+0x4a>
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	1858      	adds	r0, r3, r1
 8005e1c:	42a0      	cmp	r0, r4
 8005e1e:	d10b      	bne.n	8005e38 <_free_r+0x74>
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	4401      	add	r1, r0
 8005e24:	1858      	adds	r0, r3, r1
 8005e26:	4282      	cmp	r2, r0
 8005e28:	6019      	str	r1, [r3, #0]
 8005e2a:	d1dd      	bne.n	8005de8 <_free_r+0x24>
 8005e2c:	6810      	ldr	r0, [r2, #0]
 8005e2e:	6852      	ldr	r2, [r2, #4]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	4401      	add	r1, r0
 8005e34:	6019      	str	r1, [r3, #0]
 8005e36:	e7d7      	b.n	8005de8 <_free_r+0x24>
 8005e38:	d902      	bls.n	8005e40 <_free_r+0x7c>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	e7d3      	b.n	8005de8 <_free_r+0x24>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	1821      	adds	r1, r4, r0
 8005e44:	428a      	cmp	r2, r1
 8005e46:	bf04      	itt	eq
 8005e48:	6811      	ldreq	r1, [r2, #0]
 8005e4a:	6852      	ldreq	r2, [r2, #4]
 8005e4c:	6062      	str	r2, [r4, #4]
 8005e4e:	bf04      	itt	eq
 8005e50:	1809      	addeq	r1, r1, r0
 8005e52:	6021      	streq	r1, [r4, #0]
 8005e54:	605c      	str	r4, [r3, #4]
 8005e56:	e7c7      	b.n	8005de8 <_free_r+0x24>
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000298 	.word	0x20000298

08005e60 <_malloc_r>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	1ccd      	adds	r5, r1, #3
 8005e64:	f025 0503 	bic.w	r5, r5, #3
 8005e68:	3508      	adds	r5, #8
 8005e6a:	2d0c      	cmp	r5, #12
 8005e6c:	bf38      	it	cc
 8005e6e:	250c      	movcc	r5, #12
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	4606      	mov	r6, r0
 8005e74:	db01      	blt.n	8005e7a <_malloc_r+0x1a>
 8005e76:	42a9      	cmp	r1, r5
 8005e78:	d903      	bls.n	8005e82 <_malloc_r+0x22>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6033      	str	r3, [r6, #0]
 8005e7e:	2000      	movs	r0, #0
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
 8005e82:	f000 f87d 	bl	8005f80 <__malloc_lock>
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <_malloc_r+0xac>)
 8005e88:	6814      	ldr	r4, [r2, #0]
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	b991      	cbnz	r1, 8005eb4 <_malloc_r+0x54>
 8005e8e:	4c20      	ldr	r4, [pc, #128]	; (8005f10 <_malloc_r+0xb0>)
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	b91b      	cbnz	r3, 8005e9c <_malloc_r+0x3c>
 8005e94:	4630      	mov	r0, r6
 8005e96:	f000 f863 	bl	8005f60 <_sbrk_r>
 8005e9a:	6020      	str	r0, [r4, #0]
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f000 f85e 	bl	8005f60 <_sbrk_r>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d124      	bne.n	8005ef2 <_malloc_r+0x92>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	6033      	str	r3, [r6, #0]
 8005eac:	4630      	mov	r0, r6
 8005eae:	f000 f868 	bl	8005f82 <__malloc_unlock>
 8005eb2:	e7e4      	b.n	8005e7e <_malloc_r+0x1e>
 8005eb4:	680b      	ldr	r3, [r1, #0]
 8005eb6:	1b5b      	subs	r3, r3, r5
 8005eb8:	d418      	bmi.n	8005eec <_malloc_r+0x8c>
 8005eba:	2b0b      	cmp	r3, #11
 8005ebc:	d90f      	bls.n	8005ede <_malloc_r+0x7e>
 8005ebe:	600b      	str	r3, [r1, #0]
 8005ec0:	50cd      	str	r5, [r1, r3]
 8005ec2:	18cc      	adds	r4, r1, r3
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 f85c 	bl	8005f82 <__malloc_unlock>
 8005eca:	f104 000b 	add.w	r0, r4, #11
 8005ece:	1d23      	adds	r3, r4, #4
 8005ed0:	f020 0007 	bic.w	r0, r0, #7
 8005ed4:	1ac3      	subs	r3, r0, r3
 8005ed6:	d0d3      	beq.n	8005e80 <_malloc_r+0x20>
 8005ed8:	425a      	negs	r2, r3
 8005eda:	50e2      	str	r2, [r4, r3]
 8005edc:	e7d0      	b.n	8005e80 <_malloc_r+0x20>
 8005ede:	428c      	cmp	r4, r1
 8005ee0:	684b      	ldr	r3, [r1, #4]
 8005ee2:	bf16      	itet	ne
 8005ee4:	6063      	strne	r3, [r4, #4]
 8005ee6:	6013      	streq	r3, [r2, #0]
 8005ee8:	460c      	movne	r4, r1
 8005eea:	e7eb      	b.n	8005ec4 <_malloc_r+0x64>
 8005eec:	460c      	mov	r4, r1
 8005eee:	6849      	ldr	r1, [r1, #4]
 8005ef0:	e7cc      	b.n	8005e8c <_malloc_r+0x2c>
 8005ef2:	1cc4      	adds	r4, r0, #3
 8005ef4:	f024 0403 	bic.w	r4, r4, #3
 8005ef8:	42a0      	cmp	r0, r4
 8005efa:	d005      	beq.n	8005f08 <_malloc_r+0xa8>
 8005efc:	1a21      	subs	r1, r4, r0
 8005efe:	4630      	mov	r0, r6
 8005f00:	f000 f82e 	bl	8005f60 <_sbrk_r>
 8005f04:	3001      	adds	r0, #1
 8005f06:	d0cf      	beq.n	8005ea8 <_malloc_r+0x48>
 8005f08:	6025      	str	r5, [r4, #0]
 8005f0a:	e7db      	b.n	8005ec4 <_malloc_r+0x64>
 8005f0c:	20000298 	.word	0x20000298
 8005f10:	2000029c 	.word	0x2000029c

08005f14 <_realloc_r>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	4607      	mov	r7, r0
 8005f18:	4614      	mov	r4, r2
 8005f1a:	460e      	mov	r6, r1
 8005f1c:	b921      	cbnz	r1, 8005f28 <_realloc_r+0x14>
 8005f1e:	4611      	mov	r1, r2
 8005f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f24:	f7ff bf9c 	b.w	8005e60 <_malloc_r>
 8005f28:	b922      	cbnz	r2, 8005f34 <_realloc_r+0x20>
 8005f2a:	f7ff ff4b 	bl	8005dc4 <_free_r>
 8005f2e:	4625      	mov	r5, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f34:	f000 f826 	bl	8005f84 <_malloc_usable_size_r>
 8005f38:	42a0      	cmp	r0, r4
 8005f3a:	d20f      	bcs.n	8005f5c <_realloc_r+0x48>
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7ff ff8e 	bl	8005e60 <_malloc_r>
 8005f44:	4605      	mov	r5, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0f2      	beq.n	8005f30 <_realloc_r+0x1c>
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	f7ff ff15 	bl	8005d7c <memcpy>
 8005f52:	4631      	mov	r1, r6
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff ff35 	bl	8005dc4 <_free_r>
 8005f5a:	e7e9      	b.n	8005f30 <_realloc_r+0x1c>
 8005f5c:	4635      	mov	r5, r6
 8005f5e:	e7e7      	b.n	8005f30 <_realloc_r+0x1c>

08005f60 <_sbrk_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4c06      	ldr	r4, [pc, #24]	; (8005f7c <_sbrk_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4605      	mov	r5, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	f7ff f9ac 	bl	80052c8 <_sbrk>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_sbrk_r+0x1a>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_sbrk_r+0x1a>
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000444 	.word	0x20000444

08005f80 <__malloc_lock>:
 8005f80:	4770      	bx	lr

08005f82 <__malloc_unlock>:
 8005f82:	4770      	bx	lr

08005f84 <_malloc_usable_size_r>:
 8005f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f88:	1f18      	subs	r0, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bfbc      	itt	lt
 8005f8e:	580b      	ldrlt	r3, [r1, r0]
 8005f90:	18c0      	addlt	r0, r0, r3
 8005f92:	4770      	bx	lr

08005f94 <_init>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr

08005fa0 <_fini>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr
