
uControllerProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054cc  080054cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d4  080054d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000070  0800554c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  0800554c  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fc5  00000000  00000000  0002d466  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  0002fee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c2c  00000000  00000000  000308a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b886  00000000  00000000  000524d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca7b3  00000000  00000000  0005dd5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012850d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003494  00000000  00000000  00128588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005050 	.word	0x08005050

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005050 	.word	0x08005050

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f92f 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f002 feec 	bl	8003bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f939 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f90f 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000000 	.word	0x20000000

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	2000029c 	.word	0x2000029c

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000029c 	.word	0x2000029c

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_Delay+0x40>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000004 	.word	0x20000004

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff47 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff5c 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb0 	bl	8001034 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e165      	b.n	80013c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 8154 	bne.w	80013c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x4a>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b12      	cmp	r3, #18
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	69b9      	ldr	r1, [r7, #24]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d00b      	beq.n	80011c6 <HAL_GPIO_Init+0xe6>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ba:	2b11      	cmp	r3, #17
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d130      	bne.n	8001228 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80ae 	beq.w	80013c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <HAL_GPIO_Init+0x2fc>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a5b      	ldr	r2, [pc, #364]	; (80013dc <HAL_GPIO_Init+0x2fc>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_GPIO_Init+0x2fc>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a57      	ldr	r2, [pc, #348]	; (80013e0 <HAL_GPIO_Init+0x300>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4e      	ldr	r2, [pc, #312]	; (80013e4 <HAL_GPIO_Init+0x304>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d025      	beq.n	80012fa <HAL_GPIO_Init+0x21a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4d      	ldr	r2, [pc, #308]	; (80013e8 <HAL_GPIO_Init+0x308>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d01f      	beq.n	80012f6 <HAL_GPIO_Init+0x216>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <HAL_GPIO_Init+0x30c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d019      	beq.n	80012f2 <HAL_GPIO_Init+0x212>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <HAL_GPIO_Init+0x310>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d013      	beq.n	80012ee <HAL_GPIO_Init+0x20e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4a      	ldr	r2, [pc, #296]	; (80013f4 <HAL_GPIO_Init+0x314>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00d      	beq.n	80012ea <HAL_GPIO_Init+0x20a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <HAL_GPIO_Init+0x318>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x206>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a48      	ldr	r2, [pc, #288]	; (80013fc <HAL_GPIO_Init+0x31c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_GPIO_Init+0x202>
 80012de:	2306      	movs	r3, #6
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x21c>
 80012e2:	2307      	movs	r3, #7
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x21c>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x21c>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x21c>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x21c>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x21c>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x21c>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4934      	ldr	r1, [pc, #208]	; (80013e0 <HAL_GPIO_Init+0x300>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <HAL_GPIO_Init+0x320>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <HAL_GPIO_Init+0x320>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_GPIO_Init+0x320>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001368:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_GPIO_Init+0x320>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_GPIO_Init+0x320>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_GPIO_Init+0x320>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_GPIO_Init+0x320>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_GPIO_Init+0x320>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae96 	bls.w	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	; 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	401a      	ands	r2, r3
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	429a      	cmp	r2, r3
 800144e:	d104      	bne.n	800145a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	041a      	lsls	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001458:	e002      	b.n	8001460 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e10f      	b.n	800169e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f001 fee6 	bl	8003264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b0:	f001 f820 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <HAL_I2C_Init+0x23c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d807      	bhi.n	80014d0 <HAL_I2C_Init+0x64>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a7a      	ldr	r2, [pc, #488]	; (80016ac <HAL_I2C_Init+0x240>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf94      	ite	ls
 80014c8:	2301      	movls	r3, #1
 80014ca:	2300      	movhi	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	e006      	b.n	80014de <HAL_I2C_Init+0x72>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_I2C_Init+0x244>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	bf94      	ite	ls
 80014d8:	2301      	movls	r3, #1
 80014da:	2300      	movhi	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0db      	b.n	800169e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4a72      	ldr	r2, [pc, #456]	; (80016b4 <HAL_I2C_Init+0x248>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	0c9b      	lsrs	r3, r3, #18
 80014f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a64      	ldr	r2, [pc, #400]	; (80016a8 <HAL_I2C_Init+0x23c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d802      	bhi.n	8001520 <HAL_I2C_Init+0xb4>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3301      	adds	r3, #1
 800151e:	e009      	b.n	8001534 <HAL_I2C_Init+0xc8>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a63      	ldr	r2, [pc, #396]	; (80016b8 <HAL_I2C_Init+0x24c>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	3301      	adds	r3, #1
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	430b      	orrs	r3, r1
 800153a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4956      	ldr	r1, [pc, #344]	; (80016a8 <HAL_I2C_Init+0x23c>)
 8001550:	428b      	cmp	r3, r1
 8001552:	d80d      	bhi.n	8001570 <HAL_I2C_Init+0x104>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1e59      	subs	r1, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	bf38      	it	cc
 800156c:	2304      	movcc	r3, #4
 800156e:	e04f      	b.n	8001610 <HAL_I2C_Init+0x1a4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d111      	bne.n	800159c <HAL_I2C_Init+0x130>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e012      	b.n	80015c2 <HAL_I2C_Init+0x156>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e58      	subs	r0, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	0099      	lsls	r1, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Init+0x15e>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e022      	b.n	8001610 <HAL_I2C_Init+0x1a4>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10e      	bne.n	80015f0 <HAL_I2C_Init+0x184>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1e58      	subs	r0, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	440b      	add	r3, r1
 80015e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ee:	e00f      	b.n	8001610 <HAL_I2C_Init+0x1a4>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	6809      	ldr	r1, [r1, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800163e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6911      	ldr	r1, [r2, #16]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68d2      	ldr	r2, [r2, #12]
 800164a:	4311      	orrs	r1, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	430b      	orrs	r3, r1
 8001652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	000186a0 	.word	0x000186a0
 80016ac:	001e847f 	.word	0x001e847f
 80016b0:	003d08ff 	.word	0x003d08ff
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	10624dd3 	.word	0x10624dd3

080016bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	461a      	mov	r2, r3
 80016c8:	460b      	mov	r3, r1
 80016ca:	817b      	strh	r3, [r7, #10]
 80016cc:	4613      	mov	r3, r2
 80016ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff fbf2 	bl	8000eb8 <HAL_GetTick>
 80016d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b20      	cmp	r3, #32
 80016e0:	f040 80e0 	bne.w	80018a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2319      	movs	r3, #25
 80016ea:	2201      	movs	r2, #1
 80016ec:	4970      	ldr	r1, [pc, #448]	; (80018b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 fc34 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016fa:	2302      	movs	r3, #2
 80016fc:	e0d3      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_I2C_Master_Transmit+0x50>
 8001708:	2302      	movs	r3, #2
 800170a:	e0cc      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1ea>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d007      	beq.n	8001732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2221      	movs	r2, #33	; 0x21
 8001746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2210      	movs	r2, #16
 800174e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	893a      	ldrh	r2, [r7, #8]
 8001762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001774:	8979      	ldrh	r1, [r7, #10]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	6a3a      	ldr	r2, [r7, #32]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fac2 	bl	8001d04 <I2C_MasterRequestWrite>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e08d      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017a0:	e066      	b.n	8001870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	6a39      	ldr	r1, [r7, #32]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 fcae 	bl	8002108 <I2C_WaitOnTXEFlagUntilTimeout>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d107      	bne.n	80017ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b04      	cmp	r3, #4
 800180a:	d11b      	bne.n	8001844 <HAL_I2C_Master_Transmit+0x188>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d017      	beq.n	8001844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	6a39      	ldr	r1, [r7, #32]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 fc9e 	bl	800218a <I2C_WaitOnBTFFlagUntilTimeout>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	2b04      	cmp	r3, #4
 800185a:	d107      	bne.n	800186c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e01a      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d194      	bne.n	80017a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
  }
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	00100002 	.word	0x00100002
 80018b4:	ffff0000 	.word	0xffff0000

080018b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	460b      	mov	r3, r1
 80018c6:	817b      	strh	r3, [r7, #10]
 80018c8:	4613      	mov	r3, r2
 80018ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff faf4 	bl	8000eb8 <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b20      	cmp	r3, #32
 80018dc:	f040 820b 	bne.w	8001cf6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2319      	movs	r3, #25
 80018e6:	2201      	movs	r2, #1
 80018e8:	497c      	ldr	r1, [pc, #496]	; (8001adc <HAL_I2C_Master_Receive+0x224>)
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fb36 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80018f6:	2302      	movs	r3, #2
 80018f8:	e1fe      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_I2C_Master_Receive+0x50>
 8001904:	2302      	movs	r3, #2
 8001906:	e1f7      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d007      	beq.n	800192e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2222      	movs	r2, #34	; 0x22
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2210      	movs	r2, #16
 800194a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	893a      	ldrh	r2, [r7, #8]
 800195e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29a      	uxth	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4a5c      	ldr	r2, [pc, #368]	; (8001ae0 <HAL_I2C_Master_Receive+0x228>)
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fa3a 	bl	8001df0 <I2C_MasterRequestRead>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1b8      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e18c      	b.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d11b      	bne.n	80019f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e16c      	b.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d11b      	bne.n	8001a36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	e14c      	b.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a5c:	e138      	b.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	f200 80f1 	bhi.w	8001c4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d123      	bne.n	8001ab8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 fbc9 	bl	800220c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e139      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ab6:	e10b      	b.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d14e      	bne.n	8001b5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4906      	ldr	r1, [pc, #24]	; (8001ae4 <HAL_I2C_Master_Receive+0x22c>)
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa46 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d008      	beq.n	8001ae8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e10e      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
 8001ada:	bf00      	nop
 8001adc:	00100002 	.word	0x00100002
 8001ae0:	ffff0000 	.word	0xffff0000
 8001ae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b5c:	e0b8      	b.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b64:	2200      	movs	r2, #0
 8001b66:	4966      	ldr	r1, [pc, #408]	; (8001d00 <HAL_I2C_Master_Receive+0x448>)
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f9f7 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0bf      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	494f      	ldr	r1, [pc, #316]	; (8001d00 <HAL_I2C_Master_Receive+0x448>)
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f9c9 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e091      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c48:	e042      	b.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fadc 	bl	800220c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e04c      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d118      	bne.n	8001cd0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f aec2 	bne.w	8001a5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001cf6:	2302      	movs	r3, #2
  }
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	00010004 	.word	0x00010004

08001d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d006      	beq.n	8001d2e <I2C_MasterRequestWrite+0x2a>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d003      	beq.n	8001d2e <I2C_MasterRequestWrite+0x2a>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d2c:	d108      	bne.n	8001d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e00b      	b.n	8001d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d107      	bne.n	8001d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f8f9 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e035      	b.n	8001de0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d7c:	d108      	bne.n	8001d90 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	e01b      	b.n	8001dc8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	11db      	asrs	r3, r3, #7
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f003 0306 	and.w	r3, r3, #6
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f063 030f 	orn	r3, r3, #15
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	490e      	ldr	r1, [pc, #56]	; (8001de8 <I2C_MasterRequestWrite+0xe4>)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f92b 	bl	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e010      	b.n	8001de0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <I2C_MasterRequestWrite+0xe8>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f91b 	bl	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	00010008 	.word	0x00010008
 8001dec:	00010002 	.word	0x00010002

08001df0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d006      	beq.n	8001e2a <I2C_MasterRequestRead+0x3a>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d003      	beq.n	8001e2a <I2C_MasterRequestRead+0x3a>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e28:	d108      	bne.n	8001e3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e00b      	b.n	8001e54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	2b11      	cmp	r3, #17
 8001e42:	d107      	bne.n	8001e54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f87b 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e06d      	b.n	8001f4c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e78:	d108      	bne.n	8001e8c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	e053      	b.n	8001f34 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e8c:	897b      	ldrh	r3, [r7, #10]
 8001e8e:	11db      	asrs	r3, r3, #7
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 0306 	and.w	r3, r3, #6
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f063 030f 	orn	r3, r3, #15
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	492a      	ldr	r1, [pc, #168]	; (8001f54 <I2C_MasterRequestRead+0x164>)
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f8ad 	bl	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e048      	b.n	8001f4c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eba:	897b      	ldrh	r3, [r7, #10]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4923      	ldr	r1, [pc, #140]	; (8001f58 <I2C_MasterRequestRead+0x168>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f89d 	bl	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e038      	b.n	8001f4c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001efe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f825 	bl	8001f5c <I2C_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e017      	b.n	8001f4c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f1c:	897b      	ldrh	r3, [r7, #10]
 8001f1e:	11db      	asrs	r3, r3, #7
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 0306 	and.w	r3, r3, #6
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f063 030e 	orn	r3, r3, #14
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <I2C_MasterRequestRead+0x168>)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f865 	bl	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	00010008 	.word	0x00010008
 8001f58:	00010002 	.word	0x00010002

08001f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f6c:	e025      	b.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d021      	beq.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f76:	f7fe ff9f 	bl	8000eb8 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d302      	bcc.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d116      	bne.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e023      	b.n	8002002 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10d      	bne.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2301      	moveq	r3, #1
 8001fd8:	2300      	movne	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	e00c      	b.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d0b6      	beq.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002018:	e051      	b.n	80020be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002028:	d123      	bne.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002038:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002042:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e046      	b.n	8002100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d021      	beq.n	80020be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207a:	f7fe ff1d 	bl	8000eb8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d302      	bcc.n	8002090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d116      	bne.n	80020be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f043 0220 	orr.w	r2, r3, #32
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e020      	b.n	8002100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10c      	bne.n	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4013      	ands	r3, r2
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	e00b      	b.n	80020fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	43da      	mvns	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d18d      	bne.n	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002114:	e02d      	b.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f8ce 	bl	80022b8 <I2C_IsAcknowledgeFailed>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e02d      	b.n	8002182 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d021      	beq.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212e:	f7fe fec3 	bl	8000eb8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d116      	bne.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e007      	b.n	8002182 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d1ca      	bne.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002196:	e02d      	b.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f88d 	bl	80022b8 <I2C_IsAcknowledgeFailed>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e02d      	b.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d021      	beq.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b0:	f7fe fe82 	bl	8000eb8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d302      	bcc.n	80021c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e007      	b.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d1ca      	bne.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002218:	e042      	b.n	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d119      	bne.n	800225c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e029      	b.n	80022b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225c:	f7fe fe2c 	bl	8000eb8 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d302      	bcc.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e007      	b.n	80022b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b40      	cmp	r3, #64	; 0x40
 80022ac:	d1b5      	bne.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d11b      	bne.n	8002308 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f043 0204 	orr.w	r2, r3, #4
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0ca      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_ClockConfig+0x1b4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d90c      	bls.n	8002354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b64      	ldr	r3, [pc, #400]	; (80024cc <HAL_RCC_ClockConfig+0x1b4>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_ClockConfig+0x1b4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b6      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b52      	ldr	r3, [pc, #328]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a51      	ldr	r2, [pc, #324]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494c      	ldr	r1, [pc, #304]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d044      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d119      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07d      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06d      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e065      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4933      	ldr	r1, [pc, #204]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe fd56 	bl	8000eb8 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fd52 	bl	8000eb8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e04d      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_ClockConfig+0x1b4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_ClockConfig+0x1b4>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCC_ClockConfig+0x1b4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e030      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4915      	ldr	r1, [pc, #84]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490d      	ldr	r1, [pc, #52]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f83d 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024a2:	4601      	mov	r1, r0
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	fa21 f303 	lsr.w	r3, r1, r3
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe fcb8 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00
 80024d0:	40023800 	.word	0x40023800
 80024d4:	0800541c 	.word	0x0800541c
 80024d8:	20000008 	.word	0x20000008

080024dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008

080024f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024f8:	f7ff fff0 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 80024fc:	4601      	mov	r1, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0a9b      	lsrs	r3, r3, #10
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4a03      	ldr	r2, [pc, #12]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	0800542c 	.word	0x0800542c

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002536:	4b9f      	ldr	r3, [pc, #636]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b0c      	cmp	r3, #12
 8002540:	f200 8130 	bhi.w	80027a4 <HAL_RCC_GetSysClockFreq+0x288>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_RCC_GetSysClockFreq+0x30>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	08002581 	.word	0x08002581
 8002550:	080027a5 	.word	0x080027a5
 8002554:	080027a5 	.word	0x080027a5
 8002558:	080027a5 	.word	0x080027a5
 800255c:	08002587 	.word	0x08002587
 8002560:	080027a5 	.word	0x080027a5
 8002564:	080027a5 	.word	0x080027a5
 8002568:	080027a5 	.word	0x080027a5
 800256c:	0800258d 	.word	0x0800258d
 8002570:	080027a5 	.word	0x080027a5
 8002574:	080027a5 	.word	0x080027a5
 8002578:	080027a5 	.word	0x080027a5
 800257c:	0800269b 	.word	0x0800269b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b8d      	ldr	r3, [pc, #564]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002582:	613b      	str	r3, [r7, #16]
       break;
 8002584:	e111      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002586:	4b8d      	ldr	r3, [pc, #564]	; (80027bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002588:	613b      	str	r3, [r7, #16]
      break;
 800258a:	e10e      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002594:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d023      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b84      	ldr	r3, [pc, #528]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	ea03 0501 	and.w	r5, r3, r1
 80025b8:	ea04 0602 	and.w	r6, r4, r2
 80025bc:	4a7f      	ldr	r2, [pc, #508]	; (80027bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025be:	fb02 f106 	mul.w	r1, r2, r6
 80025c2:	2200      	movs	r2, #0
 80025c4:	fb02 f205 	mul.w	r2, r2, r5
 80025c8:	440a      	add	r2, r1
 80025ca:	497c      	ldr	r1, [pc, #496]	; (80027bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80025cc:	fba5 0101 	umull	r0, r1, r5, r1
 80025d0:	1853      	adds	r3, r2, r1
 80025d2:	4619      	mov	r1, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f04f 0400 	mov.w	r4, #0
 80025da:	461a      	mov	r2, r3
 80025dc:	4623      	mov	r3, r4
 80025de:	f7fe fa85 	bl	8000aec <__aeabi_uldivmod>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e049      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	ea03 0501 	and.w	r5, r3, r1
 8002600:	ea04 0602 	and.w	r6, r4, r2
 8002604:	4629      	mov	r1, r5
 8002606:	4632      	mov	r2, r6
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	f04f 0400 	mov.w	r4, #0
 8002610:	0154      	lsls	r4, r2, #5
 8002612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002616:	014b      	lsls	r3, r1, #5
 8002618:	4619      	mov	r1, r3
 800261a:	4622      	mov	r2, r4
 800261c:	1b49      	subs	r1, r1, r5
 800261e:	eb62 0206 	sbc.w	r2, r2, r6
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	f04f 0400 	mov.w	r4, #0
 800262a:	0194      	lsls	r4, r2, #6
 800262c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002630:	018b      	lsls	r3, r1, #6
 8002632:	1a5b      	subs	r3, r3, r1
 8002634:	eb64 0402 	sbc.w	r4, r4, r2
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	00e2      	lsls	r2, r4, #3
 8002642:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002646:	00d9      	lsls	r1, r3, #3
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	195b      	adds	r3, r3, r5
 800264e:	eb44 0406 	adc.w	r4, r4, r6
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	02a2      	lsls	r2, r4, #10
 800265c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002660:	0299      	lsls	r1, r3, #10
 8002662:	460b      	mov	r3, r1
 8002664:	4614      	mov	r4, r2
 8002666:	4618      	mov	r0, r3
 8002668:	4621      	mov	r1, r4
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f04f 0400 	mov.w	r4, #0
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	f7fe fa3a 	bl	8000aec <__aeabi_uldivmod>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267e:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	3301      	adds	r3, #1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	e087      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800269a:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a2:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	f04f 0400 	mov.w	r4, #0
 80026ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	ea03 0501 	and.w	r5, r3, r1
 80026c6:	ea04 0602 	and.w	r6, r4, r2
 80026ca:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80026cc:	fb02 f106 	mul.w	r1, r2, r6
 80026d0:	2200      	movs	r2, #0
 80026d2:	fb02 f205 	mul.w	r2, r2, r5
 80026d6:	440a      	add	r2, r1
 80026d8:	4938      	ldr	r1, [pc, #224]	; (80027bc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80026da:	fba5 0101 	umull	r0, r1, r5, r1
 80026de:	1853      	adds	r3, r2, r1
 80026e0:	4619      	mov	r1, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f04f 0400 	mov.w	r4, #0
 80026e8:	461a      	mov	r2, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	f7fe f9fe 	bl	8000aec <__aeabi_uldivmod>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e049      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	f04f 0400 	mov.w	r4, #0
 8002702:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	ea03 0501 	and.w	r5, r3, r1
 800270e:	ea04 0602 	and.w	r6, r4, r2
 8002712:	4629      	mov	r1, r5
 8002714:	4632      	mov	r2, r6
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	f04f 0400 	mov.w	r4, #0
 800271e:	0154      	lsls	r4, r2, #5
 8002720:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002724:	014b      	lsls	r3, r1, #5
 8002726:	4619      	mov	r1, r3
 8002728:	4622      	mov	r2, r4
 800272a:	1b49      	subs	r1, r1, r5
 800272c:	eb62 0206 	sbc.w	r2, r2, r6
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	f04f 0400 	mov.w	r4, #0
 8002738:	0194      	lsls	r4, r2, #6
 800273a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800273e:	018b      	lsls	r3, r1, #6
 8002740:	1a5b      	subs	r3, r3, r1
 8002742:	eb64 0402 	sbc.w	r4, r4, r2
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	00e2      	lsls	r2, r4, #3
 8002750:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002754:	00d9      	lsls	r1, r3, #3
 8002756:	460b      	mov	r3, r1
 8002758:	4614      	mov	r4, r2
 800275a:	195b      	adds	r3, r3, r5
 800275c:	eb44 0406 	adc.w	r4, r4, r6
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	02a2      	lsls	r2, r4, #10
 800276a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800276e:	0299      	lsls	r1, r3, #10
 8002770:	460b      	mov	r3, r1
 8002772:	4614      	mov	r4, r2
 8002774:	4618      	mov	r0, r3
 8002776:	4621      	mov	r1, r4
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	461a      	mov	r2, r3
 8002780:	4623      	mov	r3, r4
 8002782:	f7fe f9b3 	bl	8000aec <__aeabi_uldivmod>
 8002786:	4603      	mov	r3, r0
 8002788:	460c      	mov	r4, r1
 800278a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x298>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	0f1b      	lsrs	r3, r3, #28
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	613b      	str	r3, [r7, #16]
      break;
 80027a2:	e002      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x29c>)
 80027a6:	613b      	str	r3, [r7, #16]
      break;
 80027a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027aa:	693b      	ldr	r3, [r7, #16]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	00f42400 	.word	0x00f42400
 80027bc:	017d7840 	.word	0x017d7840

080027c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8083 	beq.w	80028e0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027da:	4b95      	ldr	r3, [pc, #596]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d019      	beq.n	800281a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027e6:	4b92      	ldr	r3, [pc, #584]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027f2:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fe:	d00c      	beq.n	800281a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002800:	4b8b      	ldr	r3, [pc, #556]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d112      	bne.n	8002832 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280c:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002818:	d10b      	bne.n	8002832 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281a:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d05b      	beq.n	80028de <HAL_RCC_OscConfig+0x11e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d157      	bne.n	80028de <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e216      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x8a>
 800283c:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e01d      	b.n	8002886 <HAL_RCC_OscConfig+0xc6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0xae>
 8002854:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a75      	ldr	r2, [pc, #468]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800285a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a72      	ldr	r2, [pc, #456]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0xc6>
 800286e:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6f      	ldr	r2, [pc, #444]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6c      	ldr	r2, [pc, #432]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d013      	beq.n	80028b6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fb13 	bl	8000eb8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002896:	f7fe fb0f 	bl	8000eb8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b64      	cmp	r3, #100	; 0x64
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1db      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0xd6>
 80028b4:	e014      	b.n	80028e0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe faff 	bl	8000eb8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028be:	f7fe fafb 	bl	8000eb8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1c7      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d0:	4b57      	ldr	r3, [pc, #348]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0xfe>
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d06f      	beq.n	80029cc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d017      	beq.n	8002928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028f8:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002900:	2b08      	cmp	r3, #8
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002904:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002910:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d11c      	bne.n	8002956 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291c:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d116      	bne.n	8002956 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002928:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x180>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e18f      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4938      	ldr	r1, [pc, #224]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002954:	e03a      	b.n	80029cc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d020      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295e:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_RCC_OscConfig+0x274>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe faa8 	bl	8000eb8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296c:	f7fe faa4 	bl	8000eb8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e170      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4925      	ldr	r1, [pc, #148]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
 800299e:	e015      	b.n	80029cc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a0:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_RCC_OscConfig+0x274>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe fa87 	bl	8000eb8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ae:	f7fe fa83 	bl	8000eb8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e14f      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d037      	beq.n	8002a48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_RCC_OscConfig+0x278>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fa67 	bl	8000eb8 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe fa63 	bl	8000eb8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e12f      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x22e>
 8002a0c:	e01c      	b.n	8002a48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_OscConfig+0x278>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe fa50 	bl	8000eb8 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1a:	e00f      	b.n	8002a3c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fa4c 	bl	8000eb8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d908      	bls.n	8002a3c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e118      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470000 	.word	0x42470000
 8002a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	4b8a      	ldr	r3, [pc, #552]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e9      	bne.n	8002a1c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8097 	beq.w	8002b84 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b83      	ldr	r3, [pc, #524]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b7f      	ldr	r3, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a7e      	ldr	r2, [pc, #504]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b7c      	ldr	r3, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b79      	ldr	r3, [pc, #484]	; (8002c6c <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x4ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fa0b 	bl	8000eb8 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7fe fa07 	bl	8000eb8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0d3      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <HAL_RCC_OscConfig+0x4ac>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x31a>
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x354>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x33c>
 8002ae2:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a60      	ldr	r2, [pc, #384]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	4b5e      	ldr	r3, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a5d      	ldr	r2, [pc, #372]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0x354>
 8002afc:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a59      	ldr	r2, [pc, #356]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a56      	ldr	r2, [pc, #344]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b0e:	f023 0304 	bic.w	r3, r3, #4
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe f9cc 	bl	8000eb8 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe f9c8 	bl	8000eb8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e092      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ee      	beq.n	8002b24 <HAL_RCC_OscConfig+0x364>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7fe f9b6 	bl	8000eb8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe f9b2 	bl	8000eb8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e07c      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ee      	bne.n	8002b50 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d068      	beq.n	8002c5e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d060      	beq.n	8002c5a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d145      	bne.n	8002c2c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_RCC_OscConfig+0x4b0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe f987 	bl	8000eb8 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe f983 	bl	8000eb8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e04f      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	019b      	lsls	r3, r3, #6
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	3b01      	subs	r3, #1
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	061b      	lsls	r3, r3, #24
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	071b      	lsls	r3, r3, #28
 8002bf8:	491b      	ldr	r1, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_RCC_OscConfig+0x4b0>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe f958 	bl	8000eb8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe f954 	bl	8000eb8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e020      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x44c>
 8002c2a:	e018      	b.n	8002c5e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x4b0>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe f941 	bl	8000eb8 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe f93d 	bl	8000eb8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e009      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x4a8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x47a>
 8002c58:	e001      	b.n	8002c5e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42470060 	.word	0x42470060

08002c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e056      	b.n	8002d34 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 ff63 	bl	8003b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	ea42 0103 	orr.w	r1, r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 0104 	and.w	r1, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_SPI_Transmit+0x22>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e11e      	b.n	8002f9c <HAL_SPI_Transmit+0x260>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d66:	f7fe f8a7 	bl	8000eb8 <HAL_GetTick>
 8002d6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d002      	beq.n	8002d82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d80:	e103      	b.n	8002f8a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_SPI_Transmit+0x52>
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d92:	e0fa      	b.n	8002f8a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2203      	movs	r2, #3
 8002d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	88fa      	ldrh	r2, [r7, #6]
 8002db2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dda:	d107      	bne.n	8002dec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d007      	beq.n	8002e0a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e12:	d14b      	bne.n	8002eac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_SPI_Transmit+0xe6>
 8002e1c:	8afb      	ldrh	r3, [r7, #22]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d13e      	bne.n	8002ea0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e46:	e02b      	b.n	8002ea0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d112      	bne.n	8002e7c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	1c9a      	adds	r2, r3, #2
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e7a:	e011      	b.n	8002ea0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e7c:	f7fe f81c 	bl	8000eb8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d803      	bhi.n	8002e94 <HAL_SPI_Transmit+0x158>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d102      	bne.n	8002e9a <HAL_SPI_Transmit+0x15e>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e9e:	e074      	b.n	8002f8a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ce      	bne.n	8002e48 <HAL_SPI_Transmit+0x10c>
 8002eaa:	e04c      	b.n	8002f46 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Transmit+0x17e>
 8002eb4:	8afb      	ldrh	r3, [r7, #22]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d140      	bne.n	8002f3c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	7812      	ldrb	r2, [r2, #0]
 8002ec6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ee0:	e02c      	b.n	8002f3c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d113      	bne.n	8002f18 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f16:	e011      	b.n	8002f3c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f18:	f7fd ffce 	bl	8000eb8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d803      	bhi.n	8002f30 <HAL_SPI_Transmit+0x1f4>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d102      	bne.n	8002f36 <HAL_SPI_Transmit+0x1fa>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f3a:	e026      	b.n	8002f8a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1cd      	bne.n	8002ee2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	6839      	ldr	r1, [r7, #0]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f894 	bl	8003078 <SPI_EndRxTxTransaction>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e000      	b.n	8002f8a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002f88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb4:	e04c      	b.n	8003050 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d048      	beq.n	8003050 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fbe:	f7fd ff7b 	bl	8000eb8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d902      	bls.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13d      	bne.n	8003050 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fe2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fec:	d111      	bne.n	8003012 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff6:	d004      	beq.n	8003002 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003000:	d107      	bne.n	8003012 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003010:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301a:	d10f      	bne.n	800303c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800303a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e00f      	b.n	8003070 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	d1a3      	bne.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <SPI_EndRxTxTransaction+0x7c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <SPI_EndRxTxTransaction+0x80>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0d5b      	lsrs	r3, r3, #21
 8003090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a2:	d112      	bne.n	80030ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff ff78 	bl	8002fa4 <SPI_WaitFlagStateUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e00f      	b.n	80030ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d0f2      	beq.n	80030ca <SPI_EndRxTxTransaction+0x52>
 80030e4:	e000      	b.n	80030e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80030e6:	bf00      	nop
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000008 	.word	0x20000008
 80030f8:	165e9f81 	.word	0x165e9f81

080030fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <MX_GPIO_Init+0xfc>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a37      	ldr	r2, [pc, #220]	; (80031f8 <MX_GPIO_Init+0xfc>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <MX_GPIO_Init+0xfc>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <MX_GPIO_Init+0xfc>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a30      	ldr	r2, [pc, #192]	; (80031f8 <MX_GPIO_Init+0xfc>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b2e      	ldr	r3, [pc, #184]	; (80031f8 <MX_GPIO_Init+0xfc>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <MX_GPIO_Init+0xfc>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <MX_GPIO_Init+0xfc>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <MX_GPIO_Init+0xfc>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003166:	2200      	movs	r2, #0
 8003168:	f240 3141 	movw	r1, #833	; 0x341
 800316c:	4823      	ldr	r0, [pc, #140]	; (80031fc <MX_GPIO_Init+0x100>)
 800316e:	f7fe f949 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 8003172:	2200      	movs	r2, #0
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	4822      	ldr	r0, [pc, #136]	; (8003200 <MX_GPIO_Init+0x104>)
 8003178:	f7fe f944 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 800317c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	4619      	mov	r1, r3
 8003190:	481c      	ldr	r0, [pc, #112]	; (8003204 <MX_GPIO_Init+0x108>)
 8003192:	f7fd ffa5 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 8003196:	f240 1341 	movw	r3, #321	; 0x141
 800319a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319c:	2301      	movs	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4619      	mov	r1, r3
 80031ae:	4813      	ldr	r0, [pc, #76]	; (80031fc <MX_GPIO_Init+0x100>)
 80031b0:	f7fd ff96 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80031b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	4619      	mov	r1, r3
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <MX_GPIO_Init+0x100>)
 80031ce:	f7fd ff87 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d6:	2301      	movs	r3, #1
 80031d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	4619      	mov	r1, r3
 80031e8:	4805      	ldr	r0, [pc, #20]	; (8003200 <MX_GPIO_Init+0x104>)
 80031ea:	f7fd ff79 	bl	80010e0 <HAL_GPIO_Init>

}
 80031ee:	bf00      	nop
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40020400 	.word	0x40020400
 8003204:	40020800 	.word	0x40020800

08003208 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <MX_I2C1_Init+0x50>)
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <MX_I2C1_Init+0x54>)
 8003210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <MX_I2C1_Init+0x50>)
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <MX_I2C1_Init+0x58>)
 8003216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <MX_I2C1_Init+0x50>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <MX_I2C1_Init+0x50>)
 8003220:	2200      	movs	r2, #0
 8003222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <MX_I2C1_Init+0x50>)
 8003226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800322a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <MX_I2C1_Init+0x50>)
 800322e:	2200      	movs	r2, #0
 8003230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <MX_I2C1_Init+0x50>)
 8003234:	2200      	movs	r2, #0
 8003236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <MX_I2C1_Init+0x50>)
 800323a:	2200      	movs	r2, #0
 800323c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <MX_I2C1_Init+0x50>)
 8003240:	2200      	movs	r2, #0
 8003242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003244:	4804      	ldr	r0, [pc, #16]	; (8003258 <MX_I2C1_Init+0x50>)
 8003246:	f7fe f911 	bl	800146c <HAL_I2C_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003250:	f000 fc4e 	bl	8003af0 <Error_Handler>
  }

}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200002a0 	.word	0x200002a0
 800325c:	40005400 	.word	0x40005400
 8003260:	000186a0 	.word	0x000186a0

08003264 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_I2C_MspInit+0x84>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12c      	bne.n	80032e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_I2C_MspInit+0x88>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_I2C_MspInit+0x88>)
 8003290:	f043 0302 	orr.w	r3, r3, #2
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_I2C_MspInit+0x88>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032a8:	2312      	movs	r3, #18
 80032aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ac:	2301      	movs	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032b4:	2304      	movs	r3, #4
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	4619      	mov	r1, r3
 80032be:	480c      	ldr	r0, [pc, #48]	; (80032f0 <HAL_I2C_MspInit+0x8c>)
 80032c0:	f7fd ff0e 	bl	80010e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_I2C_MspInit+0x88>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_I2C_MspInit+0x88>)
 80032ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d2:	6413      	str	r3, [r2, #64]	; 0x40
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_I2C_MspInit+0x88>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80032e0:	bf00      	nop
 80032e2:	3728      	adds	r7, #40	; 0x28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40005400 	.word	0x40005400
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40020400 	.word	0x40020400

080032f4 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f083 0301 	eor.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	2140      	movs	r1, #64	; 0x40
 800330a:	4803      	ldr	r0, [pc, #12]	; (8003318 <chipSelect+0x24>)
 800330c:	f7fe f87a 	bl	8001404 <HAL_GPIO_WritePin>
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40020400 	.word	0x40020400

0800331c <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	461a      	mov	r2, r3
 800332a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800332e:	4803      	ldr	r0, [pc, #12]	; (800333c <registerSelect+0x20>)
 8003330:	f7fe f868 	bl	8001404 <HAL_GPIO_WritePin>
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40020000 	.word	0x40020000

08003340 <displayReset>:

static void displayReset(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 8003344:	2000      	movs	r0, #0
 8003346:	f7ff ffd5 	bl	80032f4 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	2140      	movs	r1, #64	; 0x40
 800334e:	4808      	ldr	r0, [pc, #32]	; (8003370 <displayReset+0x30>)
 8003350:	f7fe f858 	bl	8001404 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003354:	2001      	movs	r0, #1
 8003356:	f7fd fdbb 	bl	8000ed0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800335a:	2201      	movs	r2, #1
 800335c:	2140      	movs	r1, #64	; 0x40
 800335e:	4804      	ldr	r0, [pc, #16]	; (8003370 <displayReset+0x30>)
 8003360:	f7fe f850 	bl	8001404 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 8003364:	2001      	movs	r0, #1
 8003366:	f7ff ffc5 	bl	80032f4 <chipSelect>
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40020000 	.word	0x40020000

08003374 <sendInstruction>:

static void sendInstruction(instruction command)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 800337e:	2000      	movs	r0, #0
 8003380:	f7ff ffcc 	bl	800331c <registerSelect>
    chipSelect(true);
 8003384:	2001      	movs	r0, #1
 8003386:	f7ff ffb5 	bl	80032f4 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 800338a:	1df9      	adds	r1, r7, #7
 800338c:	2301      	movs	r3, #1
 800338e:	2201      	movs	r2, #1
 8003390:	4804      	ldr	r0, [pc, #16]	; (80033a4 <sendInstruction+0x30>)
 8003392:	f7ff fcd3 	bl	8002d3c <HAL_SPI_Transmit>
    chipSelect(false);
 8003396:	2000      	movs	r0, #0
 8003398:	f7ff ffac 	bl	80032f4 <chipSelect>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000318 	.word	0x20000318

080033a8 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7ff ffb2 	bl	800331c <registerSelect>
    chipSelect(true);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7ff ff9b 	bl	80032f4 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 80033be:	1df9      	adds	r1, r7, #7
 80033c0:	2301      	movs	r3, #1
 80033c2:	2201      	movs	r2, #1
 80033c4:	4804      	ldr	r0, [pc, #16]	; (80033d8 <sendData+0x30>)
 80033c6:	f7ff fcb9 	bl	8002d3c <HAL_SPI_Transmit>
    chipSelect(false);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7ff ff92 	bl	80032f4 <chipSelect>
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000318 	.word	0x20000318

080033dc <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	2b3f      	cmp	r3, #63	; 0x3f
 80033ea:	d806      	bhi.n	80033fa <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 80033ec:	2081      	movs	r0, #129	; 0x81
 80033ee:	f7ff ffc1 	bl	8003374 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ffbd 	bl	8003374 <sendInstruction>
    }
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <lcd_init>:

void lcd_init(void)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	af00      	add	r7, sp, #0
    lcd_clear();
 8003406:	f000 f857 	bl	80034b8 <lcd_clear>
    displayReset();
 800340a:	f7ff ff99 	bl	8003340 <displayReset>

    sendInstruction(ADC_NORMAL);
 800340e:	20a0      	movs	r0, #160	; 0xa0
 8003410:	f7ff ffb0 	bl	8003374 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8003414:	20ae      	movs	r0, #174	; 0xae
 8003416:	f7ff ffad 	bl	8003374 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 800341a:	20c8      	movs	r0, #200	; 0xc8
 800341c:	f7ff ffaa 	bl	8003374 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8003420:	20a2      	movs	r0, #162	; 0xa2
 8003422:	f7ff ffa7 	bl	8003374 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 8003426:	202f      	movs	r0, #47	; 0x2f
 8003428:	f7ff ffa4 	bl	8003374 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 800342c:	2021      	movs	r0, #33	; 0x21
 800342e:	f7ff ffa1 	bl	8003374 <sendInstruction>
    lcd_setContrast(40);
 8003432:	2028      	movs	r0, #40	; 0x28
 8003434:	f7ff ffd2 	bl	80033dc <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8003438:	20af      	movs	r0, #175	; 0xaf
 800343a:	f7ff ff9b 	bl	8003374 <sendInstruction>
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
 800344e:	460b      	mov	r3, r1
 8003450:	71bb      	strb	r3, [r7, #6]
 8003452:	4613      	mov	r3, r2
 8003454:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db23      	blt.n	80034a6 <lcd_setPixel+0x62>
 800345e:	79bb      	ldrb	r3, [r7, #6]
 8003460:	2b1f      	cmp	r3, #31
 8003462:	d820      	bhi.n	80034a6 <lcd_setPixel+0x62>
        if (pixelIsSet)
 8003464:	797b      	ldrb	r3, [r7, #5]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00e      	beq.n	8003488 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <lcd_setPixel+0x70>)
 800346e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003472:	79bb      	ldrb	r3, [r7, #6]
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	4619      	mov	r1, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	430a      	orrs	r2, r1
 8003480:	490c      	ldr	r1, [pc, #48]	; (80034b4 <lcd_setPixel+0x70>)
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 8003486:	e00e      	b.n	80034a6 <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <lcd_setPixel+0x70>)
 800348c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003490:	79bb      	ldrb	r3, [r7, #6]
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	4619      	mov	r1, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	400a      	ands	r2, r1
 80034a0:	4904      	ldr	r1, [pc, #16]	; (80034b4 <lcd_setPixel+0x70>)
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000008c 	.word	0x2000008c

080034b8 <lcd_clear>:

void lcd_clear(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 80034be:	2300      	movs	r3, #0
 80034c0:	71fb      	strb	r3, [r7, #7]
 80034c2:	e007      	b.n	80034d4 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <lcd_clear+0x30>)
 80034c8:	2100      	movs	r1, #0
 80034ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	3301      	adds	r3, #1
 80034d2:	71fb      	strb	r3, [r7, #7]
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	daf3      	bge.n	80034c4 <lcd_clear+0xc>
    }
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	2000008c 	.word	0x2000008c

080034ec <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4604      	mov	r4, r0
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	71fb      	strb	r3, [r7, #7]
 80034fe:	4603      	mov	r3, r0
 8003500:	71bb      	strb	r3, [r7, #6]
 8003502:	460b      	mov	r3, r1
 8003504:	717b      	strb	r3, [r7, #5]
 8003506:	4613      	mov	r3, r2
 8003508:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 800350a:	797b      	ldrb	r3, [r7, #5]
 800350c:	3b20      	subs	r3, #32
 800350e:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e049      	b.n	80035aa <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8003516:	2300      	movs	r3, #0
 8003518:	73bb      	strb	r3, [r7, #14]
 800351a:	e03b      	b.n	8003594 <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 800351c:	797b      	ldrb	r3, [r7, #5]
 800351e:	793a      	ldrb	r2, [r7, #4]
 8003520:	4927      	ldr	r1, [pc, #156]	; (80035c0 <lcd_setChar+0xd4>)
 8003522:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8003526:	fb02 f203 	mul.w	r2, r2, r3
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	4413      	add	r3, r2
 800352e:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <lcd_setChar+0xd8>)
 8003530:	5cd3      	ldrb	r3, [r2, r3]
 8003532:	461a      	mov	r2, r3
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	fa42 f303 	asr.w	r3, r2, r3
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 8003542:	79fa      	ldrb	r2, [r7, #7]
 8003544:	7bbb      	ldrb	r3, [r7, #14]
 8003546:	4413      	add	r3, r2
 8003548:	b2d8      	uxtb	r0, r3
 800354a:	79ba      	ldrb	r2, [r7, #6]
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	4413      	add	r3, r2
 8003550:	b2d9      	uxtb	r1, r3
 8003552:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf14      	ite	ne
 800355a:	2301      	movne	r3, #1
 800355c:	2300      	moveq	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f083 0301 	eor.w	r3, r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	f7ff ff69 	bl	8003444 <lcd_setPixel>
 8003572:	e00c      	b.n	800358e <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 8003574:	79fa      	ldrb	r2, [r7, #7]
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	4413      	add	r3, r2
 800357a:	b2d8      	uxtb	r0, r3
 800357c:	79ba      	ldrb	r2, [r7, #6]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	4413      	add	r3, r2
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003588:	4619      	mov	r1, r3
 800358a:	f7ff ff5b 	bl	8003444 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800358e:	7bbb      	ldrb	r3, [r7, #14]
 8003590:	3301      	adds	r3, #1
 8003592:	73bb      	strb	r3, [r7, #14]
 8003594:	793b      	ldrb	r3, [r7, #4]
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <lcd_setChar+0xd4>)
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	7bba      	ldrb	r2, [r7, #14]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3bb      	bcc.n	800351c <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	3301      	adds	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	793b      	ldrb	r3, [r7, #4]
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <lcd_setChar+0xd4>)
 80035ae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3ae      	bcc.n	8003516 <lcd_setChar+0x2a>
        }
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd90      	pop	{r4, r7, pc}
 80035c0:	08005418 	.word	0x08005418
 80035c4:	08005098 	.word	0x08005098

080035c8 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	603a      	str	r2, [r7, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
 80035d6:	460b      	mov	r3, r1
 80035d8:	71bb      	strb	r3, [r7, #6]
 80035da:	4613      	mov	r3, r2
 80035dc:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 80035de:	797b      	ldrb	r3, [r7, #5]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11c      	bne.n	800361e <lcd_setString+0x56>
 80035e4:	797b      	ldrb	r3, [r7, #5]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d819      	bhi.n	800361e <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 80035ea:	e014      	b.n	8003616 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781a      	ldrb	r2, [r3, #0]
 80035f0:	797c      	ldrb	r4, [r7, #5]
 80035f2:	79b9      	ldrb	r1, [r7, #6]
 80035f4:	79f8      	ldrb	r0, [r7, #7]
 80035f6:	7e3b      	ldrb	r3, [r7, #24]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4623      	mov	r3, r4
 80035fc:	f7ff ff76 	bl	80034ec <lcd_setChar>
            xPosition += fontSizes[size].width;
 8003600:	797b      	ldrb	r3, [r7, #5]
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <lcd_setString+0x60>)
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	785a      	ldrb	r2, [r3, #1]
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4413      	add	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e6      	bne.n	80035ec <lcd_setString+0x24>
        }
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	08005418 	.word	0x08005418

0800362c <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b08b      	sub	sp, #44	; 0x2c
 8003630:	af00      	add	r7, sp, #0
 8003632:	4604      	mov	r4, r0
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4623      	mov	r3, r4
 800363c:	81fb      	strh	r3, [r7, #14]
 800363e:	4603      	mov	r3, r0
 8003640:	81bb      	strh	r3, [r7, #12]
 8003642:	460b      	mov	r3, r1
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	4613      	mov	r3, r2
 8003648:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 800364a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003656:	edc7 7a08 	vstr	s15, [r7, #32]
 800365a:	2300      	movs	r3, #0
 800365c:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 800365e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366a:	edc7 7a07 	vstr	s15, [r7, #28]
 800366e:	2300      	movs	r3, #0
 8003670:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 8003672:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	bfb8      	it	lt
 8003680:	425b      	neglt	r3, r3
 8003682:	b21b      	sxth	r3, r3
 8003684:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 8003686:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800368a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bfb8      	it	lt
 8003694:	425b      	neglt	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 800369a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <lcd_setLine+0x8c>
 80036a2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80036a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80036b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 80036b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <lcd_setLine+0xaa>
 80036c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80036c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80036ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 80036d6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80036da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036de:	429a      	cmp	r2, r3
 80036e0:	db5f      	blt.n	80037a2 <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 80036e2:	2300      	movs	r3, #0
 80036e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036e6:	e055      	b.n	8003794 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80036e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80036ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f4:	db20      	blt.n	8003738 <lcd_setLine+0x10c>
 80036f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80036fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	db19      	blt.n	8003738 <lcd_setLine+0x10c>
 8003704:	edd7 7a08 	vldr	s15, [r7, #32]
 8003708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003710:	793b      	ldrb	r3, [r7, #4]
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	edd7 7a07 	vldr	s15, [r7, #28]
 8003718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800371c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003720:	793b      	ldrb	r3, [r7, #4]
 8003722:	b2d9      	uxtb	r1, r3
 8003724:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	f7ff fe86 	bl	8003444 <lcd_setPixel>
			xF += x[1];
 8003738:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003744:	ed97 7a08 	vldr	s14, [r7, #32]
 8003748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374c:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8003750:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800375c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003784:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8003788:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800378c:	b29b      	uxth	r3, r3
 800378e:	3301      	adds	r3, #1
 8003790:	b29b      	uxth	r3, r3
 8003792:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003794:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003798:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800379c:	429a      	cmp	r2, r3
 800379e:	dba3      	blt.n	80036e8 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 80037a0:	e05e      	b.n	8003860 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 80037a2:	2300      	movs	r3, #0
 80037a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037a6:	e055      	b.n	8003854 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 80037a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80037ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	db20      	blt.n	80037f8 <lcd_setLine+0x1cc>
 80037b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80037ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c2:	db19      	blt.n	80037f8 <lcd_setLine+0x1cc>
 80037c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80037c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80037d0:	793b      	ldrb	r3, [r7, #4]
 80037d2:	b2d8      	uxtb	r0, r3
 80037d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80037d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80037e0:	793b      	ldrb	r3, [r7, #4]
 80037e2:	b2d9      	uxtb	r1, r3
 80037e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7ff fe26 	bl	8003444 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 80037f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003804:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003814:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003824:	ed97 7a08 	vldr	s14, [r7, #32]
 8003828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382c:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8003830:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003844:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8003848:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800384c:	b29b      	uxth	r3, r3
 800384e:	3301      	adds	r3, #1
 8003850:	b29b      	uxth	r3, r3
 8003852:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003854:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003858:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800385c:	429a      	cmp	r2, r3
 800385e:	dba3      	blt.n	80037a8 <lcd_setLine+0x17c>
}
 8003860:	bf00      	nop
 8003862:	372c      	adds	r7, #44	; 0x2c
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}

08003868 <lcd_show>:

void lcd_show(void){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 800386e:	2300      	movs	r3, #0
 8003870:	71fb      	strb	r3, [r7, #7]
 8003872:	e022      	b.n	80038ba <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	3b50      	subs	r3, #80	; 0x50
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fd7a 	bl	8003374 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 8003880:	2010      	movs	r0, #16
 8003882:	f7ff fd77 	bl	8003374 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8003886:	2000      	movs	r0, #0
 8003888:	f7ff fd74 	bl	8003374 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 800388c:	2300      	movs	r3, #0
 800388e:	71bb      	strb	r3, [r7, #6]
 8003890:	e00c      	b.n	80038ac <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 8003892:	79ba      	ldrb	r2, [r7, #6]
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	490c      	ldr	r1, [pc, #48]	; (80038c8 <lcd_show+0x60>)
 8003898:	0092      	lsls	r2, r2, #2
 800389a:	440a      	add	r2, r1
 800389c:	4413      	add	r3, r2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fd81 	bl	80033a8 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80038a6:	79bb      	ldrb	r3, [r7, #6]
 80038a8:	3301      	adds	r3, #1
 80038aa:	71bb      	strb	r3, [r7, #6]
 80038ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	daee      	bge.n	8003892 <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	3301      	adds	r3, #1
 80038b8:	71fb      	strb	r3, [r7, #7]
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d9d9      	bls.n	8003874 <lcd_show+0xc>
    }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	2000008c 	.word	0x2000008c

080038cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038d2:	f7fd fa8b 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038d6:	f000 f8ab 	bl	8003a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038da:	f7ff fc0f 	bl	80030fc <MX_GPIO_Init>
  MX_SPI1_Init();
 80038de:	f000 f90f 	bl	8003b00 <MX_SPI1_Init>
  MX_I2C1_Init();
 80038e2:	f7ff fc91 	bl	8003208 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  sendData(0xA5);
 80038e6:	20a5      	movs	r0, #165	; 0xa5
 80038e8:	f7ff fd5e 	bl	80033a8 <sendData>

	// Initialise LCD and show "Welcome" top/left justified
	lcd_init();
 80038ec:	f7ff fd89 	bl	8003402 <lcd_init>
	lcd_clear();
 80038f0:	f7ff fde2 	bl	80034b8 <lcd_clear>

	lcd_setLine(127,0,127,31,1);
 80038f4:	2301      	movs	r3, #1
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	231f      	movs	r3, #31
 80038fa:	227f      	movs	r2, #127	; 0x7f
 80038fc:	2100      	movs	r1, #0
 80038fe:	207f      	movs	r0, #127	; 0x7f
 8003900:	f7ff fe94 	bl	800362c <lcd_setLine>
	lcd_setLine(0,0,0,31,1);
 8003904:	2301      	movs	r3, #1
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	231f      	movs	r3, #31
 800390a:	2200      	movs	r2, #0
 800390c:	2100      	movs	r1, #0
 800390e:	2000      	movs	r0, #0
 8003910:	f7ff fe8c 	bl	800362c <lcd_setLine>
	lcd_setString(4,4,"Thomas Wyss",LCD_FONT_8,false);
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2300      	movs	r3, #0
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <main+0x13c>)
 800391c:	2104      	movs	r1, #4
 800391e:	2004      	movs	r0, #4
 8003920:	f7ff fe52 	bl	80035c8 <lcd_setString>
	//  lcd_setString(0,0,"BIG ",LCD_FONT_24,false);	$bug no big font
	lcd_show();
 8003924:	f7ff ffa0 	bl	8003868 <lcd_show>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin);
 8003928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800392c:	4837      	ldr	r0, [pc, #220]	; (8003a0c <main+0x140>)
 800392e:	f7fd fd82 	bl	8001436 <HAL_GPIO_TogglePin>
	    uint32_t StartTime = HAL_GetTick();
 8003932:	f7fd fac1 	bl	8000eb8 <HAL_GetTick>
 8003936:	60f8      	str	r0, [r7, #12]
		HAL_Delay(500);
 8003938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800393c:	f7fd fac8 	bl	8000ed0 <HAL_Delay>
		count++;
 8003940:	4b33      	ldr	r3, [pc, #204]	; (8003a10 <main+0x144>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <main+0x144>)
 8003948:	6013      	str	r3, [r2, #0]
		printf("Count %4d\n",(int)count);
 800394a:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <main+0x144>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4619      	mov	r1, r3
 8003950:	4830      	ldr	r0, [pc, #192]	; (8003a14 <main+0x148>)
 8003952:	f000 fad5 	bl	8003f00 <iprintf>
		uint32_t EndTime = HAL_GetTick();
 8003956:	f7fd faaf 	bl	8000eb8 <HAL_GetTick>
 800395a:	60b8      	str	r0, [r7, #8]
		uint32_t Differenz = EndTime - StartTime;
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	607b      	str	r3, [r7, #4]

		int16_t TwoByteTemp;
		uint8_t byteTemperature[0];

		HAL_I2C_Master_Transmit(&hi2c1, 0x90, 0x00, 1, HAL_MAX_DELAY);
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	2200      	movs	r2, #0
 800396e:	2190      	movs	r1, #144	; 0x90
 8003970:	4829      	ldr	r0, [pc, #164]	; (8003a18 <main+0x14c>)
 8003972:	f7fd fea3 	bl	80016bc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, 0x91, byteTemperature,2, HAL_MAX_DELAY);
 8003976:	463a      	mov	r2, r7
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2302      	movs	r3, #2
 8003980:	2191      	movs	r1, #145	; 0x91
 8003982:	4825      	ldr	r0, [pc, #148]	; (8003a18 <main+0x14c>)
 8003984:	f7fd ff98 	bl	80018b8 <HAL_I2C_Master_Receive>
//		Need to combine the ByteTemp[1] and [0] into one
		TwoByteTemp = ((int16_t)byteTemperature[0]<<4) | (byteTemperature[1]>>4);
 8003988:	783b      	ldrb	r3, [r7, #0]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	b21a      	sxth	r2, r3
 800398e:	787b      	ldrb	r3, [r7, #1]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	b2db      	uxtb	r3, r3
 8003994:	b21b      	sxth	r3, r3
 8003996:	4313      	orrs	r3, r2
 8003998:	807b      	strh	r3, [r7, #2]

		celsius = TwoByteTemp *0.0625;
 800399a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fdd8 	bl	8000554 <__aeabi_i2d>
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <main+0x150>)
 80039aa:	f7fc fe3d 	bl	8000628 <__aeabi_dmul>
 80039ae:	4603      	mov	r3, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	4618      	mov	r0, r3
 80039b4:	4621      	mov	r1, r4
 80039b6:	f7fd f849 	bl	8000a4c <__aeabi_d2f>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <main+0x154>)
 80039be:	601a      	str	r2, [r3, #0]
		HAL_Delay(50);
 80039c0:	2032      	movs	r0, #50	; 0x32
 80039c2:	f7fd fa85 	bl	8000ed0 <HAL_Delay>

		lcd_setString(4,4,"Celsius Temp",LCD_FONT_8,false);
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <main+0x158>)
 80039ce:	2104      	movs	r1, #4
 80039d0:	2004      	movs	r0, #4
 80039d2:	f7ff fdf9 	bl	80035c8 <lcd_setString>
		sprintf(charTemp,"%.2f", celsius);
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <main+0x154>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fdcc 	bl	8000578 <__aeabi_f2d>
 80039e0:	4603      	mov	r3, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	461a      	mov	r2, r3
 80039e6:	4623      	mov	r3, r4
 80039e8:	490f      	ldr	r1, [pc, #60]	; (8003a28 <main+0x15c>)
 80039ea:	4810      	ldr	r0, [pc, #64]	; (8003a2c <main+0x160>)
 80039ec:	f000 faa0 	bl	8003f30 <siprintf>
		lcd_setString(4,18,charTemp,LCD_FONT_8,false);
 80039f0:	2300      	movs	r3, #0
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <main+0x160>)
 80039f8:	2112      	movs	r1, #18
 80039fa:	2004      	movs	r0, #4
 80039fc:	f7ff fde4 	bl	80035c8 <lcd_setString>
		lcd_show();
 8003a00:	f7ff ff32 	bl	8003868 <lcd_show>
  {
 8003a04:	e790      	b.n	8003928 <main+0x5c>
 8003a06:	bf00      	nop
 8003a08:	08005068 	.word	0x08005068
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	2000028c 	.word	0x2000028c
 8003a14:	08005074 	.word	0x08005074
 8003a18:	200002a0 	.word	0x200002a0
 8003a1c:	3fb00000 	.word	0x3fb00000
 8003a20:	200002f4 	.word	0x200002f4
 8003a24:	08005080 	.word	0x08005080
 8003a28:	08005090 	.word	0x08005090
 8003a2c:	200002f8 	.word	0x200002f8

08003a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b094      	sub	sp, #80	; 0x50
 8003a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a36:	f107 031c 	add.w	r3, r7, #28
 8003a3a:	2234      	movs	r2, #52	; 0x34
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa56 	bl	8003ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a44:	f107 0308 	add.w	r3, r7, #8
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <SystemClock_Config+0xb8>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <SystemClock_Config+0xb8>)
 8003a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a62:	6413      	str	r3, [r2, #64]	; 0x40
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <SystemClock_Config+0xb8>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a70:	2300      	movs	r3, #0
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <SystemClock_Config+0xbc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <SystemClock_Config+0xbc>)
 8003a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <SystemClock_Config+0xbc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a90:	2302      	movs	r3, #2
 8003a92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a94:	2301      	movs	r3, #1
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a98:	2310      	movs	r3, #16
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aa0:	f107 031c 	add.w	r3, r7, #28
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fe8b 	bl	80027c0 <HAL_RCC_OscConfig>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003ab0:	f000 f81e 	bl	8003af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ac8:	f107 0308 	add.w	r3, r7, #8
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fc22 	bl	8002318 <HAL_RCC_ClockConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003ada:	f000 f809 	bl	8003af0 <Error_Handler>
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3750      	adds	r7, #80	; 0x50
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000

08003af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b06:	4a18      	ldr	r2, [pc, #96]	; (8003b68 <MX_SPI1_Init+0x68>)
 8003b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b34:	2210      	movs	r2, #16
 8003b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b4c:	220a      	movs	r2, #10
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b50:	4804      	ldr	r0, [pc, #16]	; (8003b64 <MX_SPI1_Init+0x64>)
 8003b52:	f7ff f88f 	bl	8002c74 <HAL_SPI_Init>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b5c:	f7ff ffc8 	bl	8003af0 <Error_Handler>
  }

}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000318 	.word	0x20000318
 8003b68:	40013000 	.word	0x40013000

08003b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_SPI_MspInit+0x84>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d12b      	bne.n	8003be6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_SPI_MspInit+0x88>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_SPI_MspInit+0x88>)
 8003b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <HAL_SPI_MspInit+0x88>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_SPI_MspInit+0x88>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <HAL_SPI_MspInit+0x88>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_SPI_MspInit+0x88>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8003bc6:	23a0      	movs	r3, #160	; 0xa0
 8003bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bd6:	2305      	movs	r3, #5
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	4619      	mov	r1, r3
 8003be0:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <HAL_SPI_MspInit+0x8c>)
 8003be2:	f7fd fa7d 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003be6:	bf00      	nop
 8003be8:	3728      	adds	r7, #40	; 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40013000 	.word	0x40013000
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020000 	.word	0x40020000

08003bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_MspInit+0x4c>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	4a0f      	ldr	r2, [pc, #60]	; (8003c48 <HAL_MspInit+0x4c>)
 8003c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c10:	6453      	str	r3, [r2, #68]	; 0x44
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <HAL_MspInit+0x4c>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	607b      	str	r3, [r7, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_MspInit+0x4c>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <HAL_MspInit+0x4c>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_MspInit+0x4c>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c5e:	e7fe      	b.n	8003c5e <HardFault_Handler+0x4>

08003c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c64:	e7fe      	b.n	8003c64 <MemManage_Handler+0x4>

08003c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c66:	b480      	push	{r7}
 8003c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c6a:	e7fe      	b.n	8003c6a <BusFault_Handler+0x4>

08003c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c70:	e7fe      	b.n	8003c70 <UsageFault_Handler+0x4>

08003c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ca0:	f7fd f8f6 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e00a      	b.n	8003cd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cba:	f3af 8000 	nop.w
 8003cbe:	4601      	mov	r1, r0
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	60ba      	str	r2, [r7, #8]
 8003cc6:	b2ca      	uxtb	r2, r1
 8003cc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	dbf0      	blt.n	8003cba <_read+0x12>
	}

return len;
 8003cd8:	687b      	ldr	r3, [r7, #4]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	e009      	b.n	8003d08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	60ba      	str	r2, [r7, #8]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3301      	adds	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dbf1      	blt.n	8003cf4 <_write+0x12>
	}
	return len;
 8003d10:	687b      	ldr	r3, [r7, #4]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_close>:

int _close(int file)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
	return -1;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d42:	605a      	str	r2, [r3, #4]
	return 0;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_isatty>:

int _isatty(int file)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
	return 1;
 8003d5a:	2301      	movs	r3, #1
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
	return 0;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <_sbrk+0x50>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <_sbrk+0x16>
		heap_end = &end;
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <_sbrk+0x50>)
 8003d96:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <_sbrk+0x54>)
 8003d98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <_sbrk+0x50>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <_sbrk+0x50>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	466a      	mov	r2, sp
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d907      	bls.n	8003dbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003dae:	f000 f875 	bl	8003e9c <__errno>
 8003db2:	4602      	mov	r2, r0
 8003db4:	230c      	movs	r3, #12
 8003db6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbc:	e006      	b.n	8003dcc <_sbrk+0x48>
	}

	heap_end += incr;
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <_sbrk+0x50>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <_sbrk+0x50>)
 8003dc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000290 	.word	0x20000290
 8003dd8:	20000378 	.word	0x20000378

08003ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de0:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <SystemInit+0x60>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <SystemInit+0x60>)
 8003de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <SystemInit+0x64>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <SystemInit+0x64>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <SystemInit+0x64>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <SystemInit+0x64>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <SystemInit+0x64>)
 8003e08:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <SystemInit+0x64>)
 8003e14:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <SystemInit+0x68>)
 8003e16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <SystemInit+0x64>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <SystemInit+0x64>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <SystemInit+0x64>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <SystemInit+0x60>)
 8003e2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e30:	609a      	str	r2, [r3, #8]
#endif
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	e000ed00 	.word	0xe000ed00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	24003010 	.word	0x24003010

08003e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e4e:	e003      	b.n	8003e58 <LoopCopyDataInit>

08003e50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e56:	3104      	adds	r1, #4

08003e58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e60:	d3f6      	bcc.n	8003e50 <CopyDataInit>
  ldr  r2, =_sbss
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e64:	e002      	b.n	8003e6c <LoopFillZerobss>

08003e66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e68:	f842 3b04 	str.w	r3, [r2], #4

08003e6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e70:	d3f9      	bcc.n	8003e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e72:	f7ff ffb3 	bl	8003ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e76:	f000 f817 	bl	8003ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e7a:	f7ff fd27 	bl	80038cc <main>
  bx  lr    
 8003e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e84:	080054dc 	.word	0x080054dc
  ldr  r0, =_sdata
 8003e88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e8c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003e90:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003e94:	20000374 	.word	0x20000374

08003e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e98:	e7fe      	b.n	8003e98 <ADC_IRQHandler>
	...

08003e9c <__errno>:
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <__errno+0x8>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <__libc_init_array>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	4e0d      	ldr	r6, [pc, #52]	; (8003ee0 <__libc_init_array+0x38>)
 8003eac:	4c0d      	ldr	r4, [pc, #52]	; (8003ee4 <__libc_init_array+0x3c>)
 8003eae:	1ba4      	subs	r4, r4, r6
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	2500      	movs	r5, #0
 8003eb4:	42a5      	cmp	r5, r4
 8003eb6:	d109      	bne.n	8003ecc <__libc_init_array+0x24>
 8003eb8:	4e0b      	ldr	r6, [pc, #44]	; (8003ee8 <__libc_init_array+0x40>)
 8003eba:	4c0c      	ldr	r4, [pc, #48]	; (8003eec <__libc_init_array+0x44>)
 8003ebc:	f001 f8c8 	bl	8005050 <_init>
 8003ec0:	1ba4      	subs	r4, r4, r6
 8003ec2:	10a4      	asrs	r4, r4, #2
 8003ec4:	2500      	movs	r5, #0
 8003ec6:	42a5      	cmp	r5, r4
 8003ec8:	d105      	bne.n	8003ed6 <__libc_init_array+0x2e>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed0:	4798      	blx	r3
 8003ed2:	3501      	adds	r5, #1
 8003ed4:	e7ee      	b.n	8003eb4 <__libc_init_array+0xc>
 8003ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eda:	4798      	blx	r3
 8003edc:	3501      	adds	r5, #1
 8003ede:	e7f2      	b.n	8003ec6 <__libc_init_array+0x1e>
 8003ee0:	080054d4 	.word	0x080054d4
 8003ee4:	080054d4 	.word	0x080054d4
 8003ee8:	080054d4 	.word	0x080054d4
 8003eec:	080054d8 	.word	0x080054d8

08003ef0 <memset>:
 8003ef0:	4402      	add	r2, r0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d100      	bne.n	8003efa <memset+0xa>
 8003ef8:	4770      	bx	lr
 8003efa:	f803 1b01 	strb.w	r1, [r3], #1
 8003efe:	e7f9      	b.n	8003ef4 <memset+0x4>

08003f00 <iprintf>:
 8003f00:	b40f      	push	{r0, r1, r2, r3}
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <iprintf+0x2c>)
 8003f04:	b513      	push	{r0, r1, r4, lr}
 8003f06:	681c      	ldr	r4, [r3, #0]
 8003f08:	b124      	cbz	r4, 8003f14 <iprintf+0x14>
 8003f0a:	69a3      	ldr	r3, [r4, #24]
 8003f0c:	b913      	cbnz	r3, 8003f14 <iprintf+0x14>
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f000 f86e 	bl	8003ff0 <__sinit>
 8003f14:	ab05      	add	r3, sp, #20
 8003f16:	9a04      	ldr	r2, [sp, #16]
 8003f18:	68a1      	ldr	r1, [r4, #8]
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 fac7 	bl	80044b0 <_vfiprintf_r>
 8003f22:	b002      	add	sp, #8
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	b004      	add	sp, #16
 8003f2a:	4770      	bx	lr
 8003f2c:	2000000c 	.word	0x2000000c

08003f30 <siprintf>:
 8003f30:	b40e      	push	{r1, r2, r3}
 8003f32:	b500      	push	{lr}
 8003f34:	b09c      	sub	sp, #112	; 0x70
 8003f36:	ab1d      	add	r3, sp, #116	; 0x74
 8003f38:	9002      	str	r0, [sp, #8]
 8003f3a:	9006      	str	r0, [sp, #24]
 8003f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f40:	4809      	ldr	r0, [pc, #36]	; (8003f68 <siprintf+0x38>)
 8003f42:	9107      	str	r1, [sp, #28]
 8003f44:	9104      	str	r1, [sp, #16]
 8003f46:	4909      	ldr	r1, [pc, #36]	; (8003f6c <siprintf+0x3c>)
 8003f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f4c:	9105      	str	r1, [sp, #20]
 8003f4e:	6800      	ldr	r0, [r0, #0]
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	a902      	add	r1, sp, #8
 8003f54:	f000 f98a 	bl	800426c <_svfiprintf_r>
 8003f58:	9b02      	ldr	r3, [sp, #8]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	b01c      	add	sp, #112	; 0x70
 8003f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f64:	b003      	add	sp, #12
 8003f66:	4770      	bx	lr
 8003f68:	2000000c 	.word	0x2000000c
 8003f6c:	ffff0208 	.word	0xffff0208

08003f70 <std>:
 8003f70:	2300      	movs	r3, #0
 8003f72:	b510      	push	{r4, lr}
 8003f74:	4604      	mov	r4, r0
 8003f76:	e9c0 3300 	strd	r3, r3, [r0]
 8003f7a:	6083      	str	r3, [r0, #8]
 8003f7c:	8181      	strh	r1, [r0, #12]
 8003f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f80:	81c2      	strh	r2, [r0, #14]
 8003f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f86:	6183      	str	r3, [r0, #24]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	305c      	adds	r0, #92	; 0x5c
 8003f8e:	f7ff ffaf 	bl	8003ef0 <memset>
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <std+0x38>)
 8003f94:	6263      	str	r3, [r4, #36]	; 0x24
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <std+0x3c>)
 8003f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <std+0x40>)
 8003f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <std+0x44>)
 8003fa0:	6224      	str	r4, [r4, #32]
 8003fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08004a0d 	.word	0x08004a0d
 8003fac:	08004a2f 	.word	0x08004a2f
 8003fb0:	08004a67 	.word	0x08004a67
 8003fb4:	08004a8b 	.word	0x08004a8b

08003fb8 <_cleanup_r>:
 8003fb8:	4901      	ldr	r1, [pc, #4]	; (8003fc0 <_cleanup_r+0x8>)
 8003fba:	f000 b885 	b.w	80040c8 <_fwalk_reent>
 8003fbe:	bf00      	nop
 8003fc0:	08004d65 	.word	0x08004d65

08003fc4 <__sfmoreglue>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	1e4a      	subs	r2, r1, #1
 8003fc8:	2568      	movs	r5, #104	; 0x68
 8003fca:	4355      	muls	r5, r2
 8003fcc:	460e      	mov	r6, r1
 8003fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fd2:	f000 f897 	bl	8004104 <_malloc_r>
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	b140      	cbz	r0, 8003fec <__sfmoreglue+0x28>
 8003fda:	2100      	movs	r1, #0
 8003fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8003fe0:	300c      	adds	r0, #12
 8003fe2:	60a0      	str	r0, [r4, #8]
 8003fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fe8:	f7ff ff82 	bl	8003ef0 <memset>
 8003fec:	4620      	mov	r0, r4
 8003fee:	bd70      	pop	{r4, r5, r6, pc}

08003ff0 <__sinit>:
 8003ff0:	6983      	ldr	r3, [r0, #24]
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	bb33      	cbnz	r3, 8004046 <__sinit+0x56>
 8003ff8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003ffc:	6503      	str	r3, [r0, #80]	; 0x50
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <__sinit+0x58>)
 8004000:	4a12      	ldr	r2, [pc, #72]	; (800404c <__sinit+0x5c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6282      	str	r2, [r0, #40]	; 0x28
 8004006:	4298      	cmp	r0, r3
 8004008:	bf04      	itt	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	6183      	streq	r3, [r0, #24]
 800400e:	f000 f81f 	bl	8004050 <__sfp>
 8004012:	6060      	str	r0, [r4, #4]
 8004014:	4620      	mov	r0, r4
 8004016:	f000 f81b 	bl	8004050 <__sfp>
 800401a:	60a0      	str	r0, [r4, #8]
 800401c:	4620      	mov	r0, r4
 800401e:	f000 f817 	bl	8004050 <__sfp>
 8004022:	2200      	movs	r2, #0
 8004024:	60e0      	str	r0, [r4, #12]
 8004026:	2104      	movs	r1, #4
 8004028:	6860      	ldr	r0, [r4, #4]
 800402a:	f7ff ffa1 	bl	8003f70 <std>
 800402e:	2201      	movs	r2, #1
 8004030:	2109      	movs	r1, #9
 8004032:	68a0      	ldr	r0, [r4, #8]
 8004034:	f7ff ff9c 	bl	8003f70 <std>
 8004038:	2202      	movs	r2, #2
 800403a:	2112      	movs	r1, #18
 800403c:	68e0      	ldr	r0, [r4, #12]
 800403e:	f7ff ff97 	bl	8003f70 <std>
 8004042:	2301      	movs	r3, #1
 8004044:	61a3      	str	r3, [r4, #24]
 8004046:	bd10      	pop	{r4, pc}
 8004048:	08005434 	.word	0x08005434
 800404c:	08003fb9 	.word	0x08003fb9

08004050 <__sfp>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <__sfp+0x70>)
 8004054:	681e      	ldr	r6, [r3, #0]
 8004056:	69b3      	ldr	r3, [r6, #24]
 8004058:	4607      	mov	r7, r0
 800405a:	b913      	cbnz	r3, 8004062 <__sfp+0x12>
 800405c:	4630      	mov	r0, r6
 800405e:	f7ff ffc7 	bl	8003ff0 <__sinit>
 8004062:	3648      	adds	r6, #72	; 0x48
 8004064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004068:	3b01      	subs	r3, #1
 800406a:	d503      	bpl.n	8004074 <__sfp+0x24>
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	b133      	cbz	r3, 800407e <__sfp+0x2e>
 8004070:	6836      	ldr	r6, [r6, #0]
 8004072:	e7f7      	b.n	8004064 <__sfp+0x14>
 8004074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004078:	b16d      	cbz	r5, 8004096 <__sfp+0x46>
 800407a:	3468      	adds	r4, #104	; 0x68
 800407c:	e7f4      	b.n	8004068 <__sfp+0x18>
 800407e:	2104      	movs	r1, #4
 8004080:	4638      	mov	r0, r7
 8004082:	f7ff ff9f 	bl	8003fc4 <__sfmoreglue>
 8004086:	6030      	str	r0, [r6, #0]
 8004088:	2800      	cmp	r0, #0
 800408a:	d1f1      	bne.n	8004070 <__sfp+0x20>
 800408c:	230c      	movs	r3, #12
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4604      	mov	r4, r0
 8004092:	4620      	mov	r0, r4
 8004094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <__sfp+0x74>)
 8004098:	6665      	str	r5, [r4, #100]	; 0x64
 800409a:	e9c4 5500 	strd	r5, r5, [r4]
 800409e:	60a5      	str	r5, [r4, #8]
 80040a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80040a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80040a8:	2208      	movs	r2, #8
 80040aa:	4629      	mov	r1, r5
 80040ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040b0:	f7ff ff1e 	bl	8003ef0 <memset>
 80040b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040bc:	e7e9      	b.n	8004092 <__sfp+0x42>
 80040be:	bf00      	nop
 80040c0:	08005434 	.word	0x08005434
 80040c4:	ffff0001 	.word	0xffff0001

080040c8 <_fwalk_reent>:
 80040c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040cc:	4680      	mov	r8, r0
 80040ce:	4689      	mov	r9, r1
 80040d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80040d4:	2600      	movs	r6, #0
 80040d6:	b914      	cbnz	r4, 80040de <_fwalk_reent+0x16>
 80040d8:	4630      	mov	r0, r6
 80040da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80040e2:	3f01      	subs	r7, #1
 80040e4:	d501      	bpl.n	80040ea <_fwalk_reent+0x22>
 80040e6:	6824      	ldr	r4, [r4, #0]
 80040e8:	e7f5      	b.n	80040d6 <_fwalk_reent+0xe>
 80040ea:	89ab      	ldrh	r3, [r5, #12]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d907      	bls.n	8004100 <_fwalk_reent+0x38>
 80040f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040f4:	3301      	adds	r3, #1
 80040f6:	d003      	beq.n	8004100 <_fwalk_reent+0x38>
 80040f8:	4629      	mov	r1, r5
 80040fa:	4640      	mov	r0, r8
 80040fc:	47c8      	blx	r9
 80040fe:	4306      	orrs	r6, r0
 8004100:	3568      	adds	r5, #104	; 0x68
 8004102:	e7ee      	b.n	80040e2 <_fwalk_reent+0x1a>

08004104 <_malloc_r>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	1ccd      	adds	r5, r1, #3
 8004108:	f025 0503 	bic.w	r5, r5, #3
 800410c:	3508      	adds	r5, #8
 800410e:	2d0c      	cmp	r5, #12
 8004110:	bf38      	it	cc
 8004112:	250c      	movcc	r5, #12
 8004114:	2d00      	cmp	r5, #0
 8004116:	4606      	mov	r6, r0
 8004118:	db01      	blt.n	800411e <_malloc_r+0x1a>
 800411a:	42a9      	cmp	r1, r5
 800411c:	d903      	bls.n	8004126 <_malloc_r+0x22>
 800411e:	230c      	movs	r3, #12
 8004120:	6033      	str	r3, [r6, #0]
 8004122:	2000      	movs	r0, #0
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	f000 fee1 	bl	8004eec <__malloc_lock>
 800412a:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <_malloc_r+0xac>)
 800412c:	6814      	ldr	r4, [r2, #0]
 800412e:	4621      	mov	r1, r4
 8004130:	b991      	cbnz	r1, 8004158 <_malloc_r+0x54>
 8004132:	4c20      	ldr	r4, [pc, #128]	; (80041b4 <_malloc_r+0xb0>)
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	b91b      	cbnz	r3, 8004140 <_malloc_r+0x3c>
 8004138:	4630      	mov	r0, r6
 800413a:	f000 fc57 	bl	80049ec <_sbrk_r>
 800413e:	6020      	str	r0, [r4, #0]
 8004140:	4629      	mov	r1, r5
 8004142:	4630      	mov	r0, r6
 8004144:	f000 fc52 	bl	80049ec <_sbrk_r>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d124      	bne.n	8004196 <_malloc_r+0x92>
 800414c:	230c      	movs	r3, #12
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	4630      	mov	r0, r6
 8004152:	f000 fecc 	bl	8004eee <__malloc_unlock>
 8004156:	e7e4      	b.n	8004122 <_malloc_r+0x1e>
 8004158:	680b      	ldr	r3, [r1, #0]
 800415a:	1b5b      	subs	r3, r3, r5
 800415c:	d418      	bmi.n	8004190 <_malloc_r+0x8c>
 800415e:	2b0b      	cmp	r3, #11
 8004160:	d90f      	bls.n	8004182 <_malloc_r+0x7e>
 8004162:	600b      	str	r3, [r1, #0]
 8004164:	50cd      	str	r5, [r1, r3]
 8004166:	18cc      	adds	r4, r1, r3
 8004168:	4630      	mov	r0, r6
 800416a:	f000 fec0 	bl	8004eee <__malloc_unlock>
 800416e:	f104 000b 	add.w	r0, r4, #11
 8004172:	1d23      	adds	r3, r4, #4
 8004174:	f020 0007 	bic.w	r0, r0, #7
 8004178:	1ac3      	subs	r3, r0, r3
 800417a:	d0d3      	beq.n	8004124 <_malloc_r+0x20>
 800417c:	425a      	negs	r2, r3
 800417e:	50e2      	str	r2, [r4, r3]
 8004180:	e7d0      	b.n	8004124 <_malloc_r+0x20>
 8004182:	428c      	cmp	r4, r1
 8004184:	684b      	ldr	r3, [r1, #4]
 8004186:	bf16      	itet	ne
 8004188:	6063      	strne	r3, [r4, #4]
 800418a:	6013      	streq	r3, [r2, #0]
 800418c:	460c      	movne	r4, r1
 800418e:	e7eb      	b.n	8004168 <_malloc_r+0x64>
 8004190:	460c      	mov	r4, r1
 8004192:	6849      	ldr	r1, [r1, #4]
 8004194:	e7cc      	b.n	8004130 <_malloc_r+0x2c>
 8004196:	1cc4      	adds	r4, r0, #3
 8004198:	f024 0403 	bic.w	r4, r4, #3
 800419c:	42a0      	cmp	r0, r4
 800419e:	d005      	beq.n	80041ac <_malloc_r+0xa8>
 80041a0:	1a21      	subs	r1, r4, r0
 80041a2:	4630      	mov	r0, r6
 80041a4:	f000 fc22 	bl	80049ec <_sbrk_r>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d0cf      	beq.n	800414c <_malloc_r+0x48>
 80041ac:	6025      	str	r5, [r4, #0]
 80041ae:	e7db      	b.n	8004168 <_malloc_r+0x64>
 80041b0:	20000294 	.word	0x20000294
 80041b4:	20000298 	.word	0x20000298

080041b8 <__ssputs_r>:
 80041b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	688e      	ldr	r6, [r1, #8]
 80041be:	429e      	cmp	r6, r3
 80041c0:	4682      	mov	sl, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	4690      	mov	r8, r2
 80041c6:	4699      	mov	r9, r3
 80041c8:	d837      	bhi.n	800423a <__ssputs_r+0x82>
 80041ca:	898a      	ldrh	r2, [r1, #12]
 80041cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041d0:	d031      	beq.n	8004236 <__ssputs_r+0x7e>
 80041d2:	6825      	ldr	r5, [r4, #0]
 80041d4:	6909      	ldr	r1, [r1, #16]
 80041d6:	1a6f      	subs	r7, r5, r1
 80041d8:	6965      	ldr	r5, [r4, #20]
 80041da:	2302      	movs	r3, #2
 80041dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80041e4:	f109 0301 	add.w	r3, r9, #1
 80041e8:	443b      	add	r3, r7
 80041ea:	429d      	cmp	r5, r3
 80041ec:	bf38      	it	cc
 80041ee:	461d      	movcc	r5, r3
 80041f0:	0553      	lsls	r3, r2, #21
 80041f2:	d530      	bpl.n	8004256 <__ssputs_r+0x9e>
 80041f4:	4629      	mov	r1, r5
 80041f6:	f7ff ff85 	bl	8004104 <_malloc_r>
 80041fa:	4606      	mov	r6, r0
 80041fc:	b950      	cbnz	r0, 8004214 <__ssputs_r+0x5c>
 80041fe:	230c      	movs	r3, #12
 8004200:	f8ca 3000 	str.w	r3, [sl]
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	463a      	mov	r2, r7
 8004216:	6921      	ldr	r1, [r4, #16]
 8004218:	f000 fe44 	bl	8004ea4 <memcpy>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	6126      	str	r6, [r4, #16]
 800422a:	6165      	str	r5, [r4, #20]
 800422c:	443e      	add	r6, r7
 800422e:	1bed      	subs	r5, r5, r7
 8004230:	6026      	str	r6, [r4, #0]
 8004232:	60a5      	str	r5, [r4, #8]
 8004234:	464e      	mov	r6, r9
 8004236:	454e      	cmp	r6, r9
 8004238:	d900      	bls.n	800423c <__ssputs_r+0x84>
 800423a:	464e      	mov	r6, r9
 800423c:	4632      	mov	r2, r6
 800423e:	4641      	mov	r1, r8
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	f000 fe3a 	bl	8004eba <memmove>
 8004246:	68a3      	ldr	r3, [r4, #8]
 8004248:	1b9b      	subs	r3, r3, r6
 800424a:	60a3      	str	r3, [r4, #8]
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	441e      	add	r6, r3
 8004250:	6026      	str	r6, [r4, #0]
 8004252:	2000      	movs	r0, #0
 8004254:	e7dc      	b.n	8004210 <__ssputs_r+0x58>
 8004256:	462a      	mov	r2, r5
 8004258:	f000 fe98 	bl	8004f8c <_realloc_r>
 800425c:	4606      	mov	r6, r0
 800425e:	2800      	cmp	r0, #0
 8004260:	d1e2      	bne.n	8004228 <__ssputs_r+0x70>
 8004262:	6921      	ldr	r1, [r4, #16]
 8004264:	4650      	mov	r0, sl
 8004266:	f000 fe43 	bl	8004ef0 <_free_r>
 800426a:	e7c8      	b.n	80041fe <__ssputs_r+0x46>

0800426c <_svfiprintf_r>:
 800426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004270:	461d      	mov	r5, r3
 8004272:	898b      	ldrh	r3, [r1, #12]
 8004274:	061f      	lsls	r7, r3, #24
 8004276:	b09d      	sub	sp, #116	; 0x74
 8004278:	4680      	mov	r8, r0
 800427a:	460c      	mov	r4, r1
 800427c:	4616      	mov	r6, r2
 800427e:	d50f      	bpl.n	80042a0 <_svfiprintf_r+0x34>
 8004280:	690b      	ldr	r3, [r1, #16]
 8004282:	b96b      	cbnz	r3, 80042a0 <_svfiprintf_r+0x34>
 8004284:	2140      	movs	r1, #64	; 0x40
 8004286:	f7ff ff3d 	bl	8004104 <_malloc_r>
 800428a:	6020      	str	r0, [r4, #0]
 800428c:	6120      	str	r0, [r4, #16]
 800428e:	b928      	cbnz	r0, 800429c <_svfiprintf_r+0x30>
 8004290:	230c      	movs	r3, #12
 8004292:	f8c8 3000 	str.w	r3, [r8]
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	e0c8      	b.n	800442e <_svfiprintf_r+0x1c2>
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	6163      	str	r3, [r4, #20]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9309      	str	r3, [sp, #36]	; 0x24
 80042a4:	2320      	movs	r3, #32
 80042a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042aa:	2330      	movs	r3, #48	; 0x30
 80042ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042b0:	9503      	str	r5, [sp, #12]
 80042b2:	f04f 0b01 	mov.w	fp, #1
 80042b6:	4637      	mov	r7, r6
 80042b8:	463d      	mov	r5, r7
 80042ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80042be:	b10b      	cbz	r3, 80042c4 <_svfiprintf_r+0x58>
 80042c0:	2b25      	cmp	r3, #37	; 0x25
 80042c2:	d13e      	bne.n	8004342 <_svfiprintf_r+0xd6>
 80042c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80042c8:	d00b      	beq.n	80042e2 <_svfiprintf_r+0x76>
 80042ca:	4653      	mov	r3, sl
 80042cc:	4632      	mov	r2, r6
 80042ce:	4621      	mov	r1, r4
 80042d0:	4640      	mov	r0, r8
 80042d2:	f7ff ff71 	bl	80041b8 <__ssputs_r>
 80042d6:	3001      	adds	r0, #1
 80042d8:	f000 80a4 	beq.w	8004424 <_svfiprintf_r+0x1b8>
 80042dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042de:	4453      	add	r3, sl
 80042e0:	9309      	str	r3, [sp, #36]	; 0x24
 80042e2:	783b      	ldrb	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 809d 	beq.w	8004424 <_svfiprintf_r+0x1b8>
 80042ea:	2300      	movs	r3, #0
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042f4:	9304      	str	r3, [sp, #16]
 80042f6:	9307      	str	r3, [sp, #28]
 80042f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042fc:	931a      	str	r3, [sp, #104]	; 0x68
 80042fe:	462f      	mov	r7, r5
 8004300:	2205      	movs	r2, #5
 8004302:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004306:	4850      	ldr	r0, [pc, #320]	; (8004448 <_svfiprintf_r+0x1dc>)
 8004308:	f7fb ff82 	bl	8000210 <memchr>
 800430c:	9b04      	ldr	r3, [sp, #16]
 800430e:	b9d0      	cbnz	r0, 8004346 <_svfiprintf_r+0xda>
 8004310:	06d9      	lsls	r1, r3, #27
 8004312:	bf44      	itt	mi
 8004314:	2220      	movmi	r2, #32
 8004316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800431a:	071a      	lsls	r2, r3, #28
 800431c:	bf44      	itt	mi
 800431e:	222b      	movmi	r2, #43	; 0x2b
 8004320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004324:	782a      	ldrb	r2, [r5, #0]
 8004326:	2a2a      	cmp	r2, #42	; 0x2a
 8004328:	d015      	beq.n	8004356 <_svfiprintf_r+0xea>
 800432a:	9a07      	ldr	r2, [sp, #28]
 800432c:	462f      	mov	r7, r5
 800432e:	2000      	movs	r0, #0
 8004330:	250a      	movs	r5, #10
 8004332:	4639      	mov	r1, r7
 8004334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004338:	3b30      	subs	r3, #48	; 0x30
 800433a:	2b09      	cmp	r3, #9
 800433c:	d94d      	bls.n	80043da <_svfiprintf_r+0x16e>
 800433e:	b1b8      	cbz	r0, 8004370 <_svfiprintf_r+0x104>
 8004340:	e00f      	b.n	8004362 <_svfiprintf_r+0xf6>
 8004342:	462f      	mov	r7, r5
 8004344:	e7b8      	b.n	80042b8 <_svfiprintf_r+0x4c>
 8004346:	4a40      	ldr	r2, [pc, #256]	; (8004448 <_svfiprintf_r+0x1dc>)
 8004348:	1a80      	subs	r0, r0, r2
 800434a:	fa0b f000 	lsl.w	r0, fp, r0
 800434e:	4318      	orrs	r0, r3
 8004350:	9004      	str	r0, [sp, #16]
 8004352:	463d      	mov	r5, r7
 8004354:	e7d3      	b.n	80042fe <_svfiprintf_r+0x92>
 8004356:	9a03      	ldr	r2, [sp, #12]
 8004358:	1d11      	adds	r1, r2, #4
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	9103      	str	r1, [sp, #12]
 800435e:	2a00      	cmp	r2, #0
 8004360:	db01      	blt.n	8004366 <_svfiprintf_r+0xfa>
 8004362:	9207      	str	r2, [sp, #28]
 8004364:	e004      	b.n	8004370 <_svfiprintf_r+0x104>
 8004366:	4252      	negs	r2, r2
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	9207      	str	r2, [sp, #28]
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	783b      	ldrb	r3, [r7, #0]
 8004372:	2b2e      	cmp	r3, #46	; 0x2e
 8004374:	d10c      	bne.n	8004390 <_svfiprintf_r+0x124>
 8004376:	787b      	ldrb	r3, [r7, #1]
 8004378:	2b2a      	cmp	r3, #42	; 0x2a
 800437a:	d133      	bne.n	80043e4 <_svfiprintf_r+0x178>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	9203      	str	r2, [sp, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	bfb8      	it	lt
 8004388:	f04f 33ff 	movlt.w	r3, #4294967295
 800438c:	3702      	adds	r7, #2
 800438e:	9305      	str	r3, [sp, #20]
 8004390:	4d2e      	ldr	r5, [pc, #184]	; (800444c <_svfiprintf_r+0x1e0>)
 8004392:	7839      	ldrb	r1, [r7, #0]
 8004394:	2203      	movs	r2, #3
 8004396:	4628      	mov	r0, r5
 8004398:	f7fb ff3a 	bl	8000210 <memchr>
 800439c:	b138      	cbz	r0, 80043ae <_svfiprintf_r+0x142>
 800439e:	2340      	movs	r3, #64	; 0x40
 80043a0:	1b40      	subs	r0, r0, r5
 80043a2:	fa03 f000 	lsl.w	r0, r3, r0
 80043a6:	9b04      	ldr	r3, [sp, #16]
 80043a8:	4303      	orrs	r3, r0
 80043aa:	3701      	adds	r7, #1
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	7839      	ldrb	r1, [r7, #0]
 80043b0:	4827      	ldr	r0, [pc, #156]	; (8004450 <_svfiprintf_r+0x1e4>)
 80043b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043b6:	2206      	movs	r2, #6
 80043b8:	1c7e      	adds	r6, r7, #1
 80043ba:	f7fb ff29 	bl	8000210 <memchr>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d038      	beq.n	8004434 <_svfiprintf_r+0x1c8>
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <_svfiprintf_r+0x1e8>)
 80043c4:	bb13      	cbnz	r3, 800440c <_svfiprintf_r+0x1a0>
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	3307      	adds	r3, #7
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	3308      	adds	r3, #8
 80043d0:	9303      	str	r3, [sp, #12]
 80043d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d4:	444b      	add	r3, r9
 80043d6:	9309      	str	r3, [sp, #36]	; 0x24
 80043d8:	e76d      	b.n	80042b6 <_svfiprintf_r+0x4a>
 80043da:	fb05 3202 	mla	r2, r5, r2, r3
 80043de:	2001      	movs	r0, #1
 80043e0:	460f      	mov	r7, r1
 80043e2:	e7a6      	b.n	8004332 <_svfiprintf_r+0xc6>
 80043e4:	2300      	movs	r3, #0
 80043e6:	3701      	adds	r7, #1
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	4619      	mov	r1, r3
 80043ec:	250a      	movs	r5, #10
 80043ee:	4638      	mov	r0, r7
 80043f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f4:	3a30      	subs	r2, #48	; 0x30
 80043f6:	2a09      	cmp	r2, #9
 80043f8:	d903      	bls.n	8004402 <_svfiprintf_r+0x196>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0c8      	beq.n	8004390 <_svfiprintf_r+0x124>
 80043fe:	9105      	str	r1, [sp, #20]
 8004400:	e7c6      	b.n	8004390 <_svfiprintf_r+0x124>
 8004402:	fb05 2101 	mla	r1, r5, r1, r2
 8004406:	2301      	movs	r3, #1
 8004408:	4607      	mov	r7, r0
 800440a:	e7f0      	b.n	80043ee <_svfiprintf_r+0x182>
 800440c:	ab03      	add	r3, sp, #12
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	4622      	mov	r2, r4
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <_svfiprintf_r+0x1ec>)
 8004414:	a904      	add	r1, sp, #16
 8004416:	4640      	mov	r0, r8
 8004418:	f3af 8000 	nop.w
 800441c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004420:	4681      	mov	r9, r0
 8004422:	d1d6      	bne.n	80043d2 <_svfiprintf_r+0x166>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	065b      	lsls	r3, r3, #25
 8004428:	f53f af35 	bmi.w	8004296 <_svfiprintf_r+0x2a>
 800442c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442e:	b01d      	add	sp, #116	; 0x74
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	ab03      	add	r3, sp, #12
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	4622      	mov	r2, r4
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <_svfiprintf_r+0x1ec>)
 800443c:	a904      	add	r1, sp, #16
 800443e:	4640      	mov	r0, r8
 8004440:	f000 f9c2 	bl	80047c8 <_printf_i>
 8004444:	e7ea      	b.n	800441c <_svfiprintf_r+0x1b0>
 8004446:	bf00      	nop
 8004448:	08005498 	.word	0x08005498
 800444c:	0800549e 	.word	0x0800549e
 8004450:	080054a2 	.word	0x080054a2
 8004454:	00000000 	.word	0x00000000
 8004458:	080041b9 	.word	0x080041b9

0800445c <__sfputc_r>:
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	3b01      	subs	r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	b410      	push	{r4}
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	da08      	bge.n	800447a <__sfputc_r+0x1e>
 8004468:	6994      	ldr	r4, [r2, #24]
 800446a:	42a3      	cmp	r3, r4
 800446c:	db01      	blt.n	8004472 <__sfputc_r+0x16>
 800446e:	290a      	cmp	r1, #10
 8004470:	d103      	bne.n	800447a <__sfputc_r+0x1e>
 8004472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004476:	f000 bb0d 	b.w	8004a94 <__swbuf_r>
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	1c58      	adds	r0, r3, #1
 800447e:	6010      	str	r0, [r2, #0]
 8004480:	7019      	strb	r1, [r3, #0]
 8004482:	4608      	mov	r0, r1
 8004484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004488:	4770      	bx	lr

0800448a <__sfputs_r>:
 800448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448c:	4606      	mov	r6, r0
 800448e:	460f      	mov	r7, r1
 8004490:	4614      	mov	r4, r2
 8004492:	18d5      	adds	r5, r2, r3
 8004494:	42ac      	cmp	r4, r5
 8004496:	d101      	bne.n	800449c <__sfputs_r+0x12>
 8004498:	2000      	movs	r0, #0
 800449a:	e007      	b.n	80044ac <__sfputs_r+0x22>
 800449c:	463a      	mov	r2, r7
 800449e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a2:	4630      	mov	r0, r6
 80044a4:	f7ff ffda 	bl	800445c <__sfputc_r>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d1f3      	bne.n	8004494 <__sfputs_r+0xa>
 80044ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044b0 <_vfiprintf_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	460c      	mov	r4, r1
 80044b6:	b09d      	sub	sp, #116	; 0x74
 80044b8:	4617      	mov	r7, r2
 80044ba:	461d      	mov	r5, r3
 80044bc:	4606      	mov	r6, r0
 80044be:	b118      	cbz	r0, 80044c8 <_vfiprintf_r+0x18>
 80044c0:	6983      	ldr	r3, [r0, #24]
 80044c2:	b90b      	cbnz	r3, 80044c8 <_vfiprintf_r+0x18>
 80044c4:	f7ff fd94 	bl	8003ff0 <__sinit>
 80044c8:	4b7c      	ldr	r3, [pc, #496]	; (80046bc <_vfiprintf_r+0x20c>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d158      	bne.n	8004580 <_vfiprintf_r+0xd0>
 80044ce:	6874      	ldr	r4, [r6, #4]
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	0718      	lsls	r0, r3, #28
 80044d4:	d55e      	bpl.n	8004594 <_vfiprintf_r+0xe4>
 80044d6:	6923      	ldr	r3, [r4, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05b      	beq.n	8004594 <_vfiprintf_r+0xe4>
 80044dc:	2300      	movs	r3, #0
 80044de:	9309      	str	r3, [sp, #36]	; 0x24
 80044e0:	2320      	movs	r3, #32
 80044e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044e6:	2330      	movs	r3, #48	; 0x30
 80044e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044ec:	9503      	str	r5, [sp, #12]
 80044ee:	f04f 0b01 	mov.w	fp, #1
 80044f2:	46b8      	mov	r8, r7
 80044f4:	4645      	mov	r5, r8
 80044f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80044fa:	b10b      	cbz	r3, 8004500 <_vfiprintf_r+0x50>
 80044fc:	2b25      	cmp	r3, #37	; 0x25
 80044fe:	d154      	bne.n	80045aa <_vfiprintf_r+0xfa>
 8004500:	ebb8 0a07 	subs.w	sl, r8, r7
 8004504:	d00b      	beq.n	800451e <_vfiprintf_r+0x6e>
 8004506:	4653      	mov	r3, sl
 8004508:	463a      	mov	r2, r7
 800450a:	4621      	mov	r1, r4
 800450c:	4630      	mov	r0, r6
 800450e:	f7ff ffbc 	bl	800448a <__sfputs_r>
 8004512:	3001      	adds	r0, #1
 8004514:	f000 80c2 	beq.w	800469c <_vfiprintf_r+0x1ec>
 8004518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451a:	4453      	add	r3, sl
 800451c:	9309      	str	r3, [sp, #36]	; 0x24
 800451e:	f898 3000 	ldrb.w	r3, [r8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80ba 	beq.w	800469c <_vfiprintf_r+0x1ec>
 8004528:	2300      	movs	r3, #0
 800452a:	f04f 32ff 	mov.w	r2, #4294967295
 800452e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	9307      	str	r3, [sp, #28]
 8004536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800453a:	931a      	str	r3, [sp, #104]	; 0x68
 800453c:	46a8      	mov	r8, r5
 800453e:	2205      	movs	r2, #5
 8004540:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004544:	485e      	ldr	r0, [pc, #376]	; (80046c0 <_vfiprintf_r+0x210>)
 8004546:	f7fb fe63 	bl	8000210 <memchr>
 800454a:	9b04      	ldr	r3, [sp, #16]
 800454c:	bb78      	cbnz	r0, 80045ae <_vfiprintf_r+0xfe>
 800454e:	06d9      	lsls	r1, r3, #27
 8004550:	bf44      	itt	mi
 8004552:	2220      	movmi	r2, #32
 8004554:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004558:	071a      	lsls	r2, r3, #28
 800455a:	bf44      	itt	mi
 800455c:	222b      	movmi	r2, #43	; 0x2b
 800455e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004562:	782a      	ldrb	r2, [r5, #0]
 8004564:	2a2a      	cmp	r2, #42	; 0x2a
 8004566:	d02a      	beq.n	80045be <_vfiprintf_r+0x10e>
 8004568:	9a07      	ldr	r2, [sp, #28]
 800456a:	46a8      	mov	r8, r5
 800456c:	2000      	movs	r0, #0
 800456e:	250a      	movs	r5, #10
 8004570:	4641      	mov	r1, r8
 8004572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004576:	3b30      	subs	r3, #48	; 0x30
 8004578:	2b09      	cmp	r3, #9
 800457a:	d969      	bls.n	8004650 <_vfiprintf_r+0x1a0>
 800457c:	b360      	cbz	r0, 80045d8 <_vfiprintf_r+0x128>
 800457e:	e024      	b.n	80045ca <_vfiprintf_r+0x11a>
 8004580:	4b50      	ldr	r3, [pc, #320]	; (80046c4 <_vfiprintf_r+0x214>)
 8004582:	429c      	cmp	r4, r3
 8004584:	d101      	bne.n	800458a <_vfiprintf_r+0xda>
 8004586:	68b4      	ldr	r4, [r6, #8]
 8004588:	e7a2      	b.n	80044d0 <_vfiprintf_r+0x20>
 800458a:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <_vfiprintf_r+0x218>)
 800458c:	429c      	cmp	r4, r3
 800458e:	bf08      	it	eq
 8004590:	68f4      	ldreq	r4, [r6, #12]
 8004592:	e79d      	b.n	80044d0 <_vfiprintf_r+0x20>
 8004594:	4621      	mov	r1, r4
 8004596:	4630      	mov	r0, r6
 8004598:	f000 fae0 	bl	8004b5c <__swsetup_r>
 800459c:	2800      	cmp	r0, #0
 800459e:	d09d      	beq.n	80044dc <_vfiprintf_r+0x2c>
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	b01d      	add	sp, #116	; 0x74
 80045a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045aa:	46a8      	mov	r8, r5
 80045ac:	e7a2      	b.n	80044f4 <_vfiprintf_r+0x44>
 80045ae:	4a44      	ldr	r2, [pc, #272]	; (80046c0 <_vfiprintf_r+0x210>)
 80045b0:	1a80      	subs	r0, r0, r2
 80045b2:	fa0b f000 	lsl.w	r0, fp, r0
 80045b6:	4318      	orrs	r0, r3
 80045b8:	9004      	str	r0, [sp, #16]
 80045ba:	4645      	mov	r5, r8
 80045bc:	e7be      	b.n	800453c <_vfiprintf_r+0x8c>
 80045be:	9a03      	ldr	r2, [sp, #12]
 80045c0:	1d11      	adds	r1, r2, #4
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	9103      	str	r1, [sp, #12]
 80045c6:	2a00      	cmp	r2, #0
 80045c8:	db01      	blt.n	80045ce <_vfiprintf_r+0x11e>
 80045ca:	9207      	str	r2, [sp, #28]
 80045cc:	e004      	b.n	80045d8 <_vfiprintf_r+0x128>
 80045ce:	4252      	negs	r2, r2
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	9207      	str	r2, [sp, #28]
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	f898 3000 	ldrb.w	r3, [r8]
 80045dc:	2b2e      	cmp	r3, #46	; 0x2e
 80045de:	d10e      	bne.n	80045fe <_vfiprintf_r+0x14e>
 80045e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80045e4:	2b2a      	cmp	r3, #42	; 0x2a
 80045e6:	d138      	bne.n	800465a <_vfiprintf_r+0x1aa>
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	9203      	str	r2, [sp, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bfb8      	it	lt
 80045f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f8:	f108 0802 	add.w	r8, r8, #2
 80045fc:	9305      	str	r3, [sp, #20]
 80045fe:	4d33      	ldr	r5, [pc, #204]	; (80046cc <_vfiprintf_r+0x21c>)
 8004600:	f898 1000 	ldrb.w	r1, [r8]
 8004604:	2203      	movs	r2, #3
 8004606:	4628      	mov	r0, r5
 8004608:	f7fb fe02 	bl	8000210 <memchr>
 800460c:	b140      	cbz	r0, 8004620 <_vfiprintf_r+0x170>
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	1b40      	subs	r0, r0, r5
 8004612:	fa03 f000 	lsl.w	r0, r3, r0
 8004616:	9b04      	ldr	r3, [sp, #16]
 8004618:	4303      	orrs	r3, r0
 800461a:	f108 0801 	add.w	r8, r8, #1
 800461e:	9304      	str	r3, [sp, #16]
 8004620:	f898 1000 	ldrb.w	r1, [r8]
 8004624:	482a      	ldr	r0, [pc, #168]	; (80046d0 <_vfiprintf_r+0x220>)
 8004626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800462a:	2206      	movs	r2, #6
 800462c:	f108 0701 	add.w	r7, r8, #1
 8004630:	f7fb fdee 	bl	8000210 <memchr>
 8004634:	2800      	cmp	r0, #0
 8004636:	d037      	beq.n	80046a8 <_vfiprintf_r+0x1f8>
 8004638:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <_vfiprintf_r+0x224>)
 800463a:	bb1b      	cbnz	r3, 8004684 <_vfiprintf_r+0x1d4>
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	3307      	adds	r3, #7
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	3308      	adds	r3, #8
 8004646:	9303      	str	r3, [sp, #12]
 8004648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464a:	444b      	add	r3, r9
 800464c:	9309      	str	r3, [sp, #36]	; 0x24
 800464e:	e750      	b.n	80044f2 <_vfiprintf_r+0x42>
 8004650:	fb05 3202 	mla	r2, r5, r2, r3
 8004654:	2001      	movs	r0, #1
 8004656:	4688      	mov	r8, r1
 8004658:	e78a      	b.n	8004570 <_vfiprintf_r+0xc0>
 800465a:	2300      	movs	r3, #0
 800465c:	f108 0801 	add.w	r8, r8, #1
 8004660:	9305      	str	r3, [sp, #20]
 8004662:	4619      	mov	r1, r3
 8004664:	250a      	movs	r5, #10
 8004666:	4640      	mov	r0, r8
 8004668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800466c:	3a30      	subs	r2, #48	; 0x30
 800466e:	2a09      	cmp	r2, #9
 8004670:	d903      	bls.n	800467a <_vfiprintf_r+0x1ca>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0c3      	beq.n	80045fe <_vfiprintf_r+0x14e>
 8004676:	9105      	str	r1, [sp, #20]
 8004678:	e7c1      	b.n	80045fe <_vfiprintf_r+0x14e>
 800467a:	fb05 2101 	mla	r1, r5, r1, r2
 800467e:	2301      	movs	r3, #1
 8004680:	4680      	mov	r8, r0
 8004682:	e7f0      	b.n	8004666 <_vfiprintf_r+0x1b6>
 8004684:	ab03      	add	r3, sp, #12
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4622      	mov	r2, r4
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <_vfiprintf_r+0x228>)
 800468c:	a904      	add	r1, sp, #16
 800468e:	4630      	mov	r0, r6
 8004690:	f3af 8000 	nop.w
 8004694:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004698:	4681      	mov	r9, r0
 800469a:	d1d5      	bne.n	8004648 <_vfiprintf_r+0x198>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	065b      	lsls	r3, r3, #25
 80046a0:	f53f af7e 	bmi.w	80045a0 <_vfiprintf_r+0xf0>
 80046a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046a6:	e77d      	b.n	80045a4 <_vfiprintf_r+0xf4>
 80046a8:	ab03      	add	r3, sp, #12
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4622      	mov	r2, r4
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <_vfiprintf_r+0x228>)
 80046b0:	a904      	add	r1, sp, #16
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f888 	bl	80047c8 <_printf_i>
 80046b8:	e7ec      	b.n	8004694 <_vfiprintf_r+0x1e4>
 80046ba:	bf00      	nop
 80046bc:	08005458 	.word	0x08005458
 80046c0:	08005498 	.word	0x08005498
 80046c4:	08005478 	.word	0x08005478
 80046c8:	08005438 	.word	0x08005438
 80046cc:	0800549e 	.word	0x0800549e
 80046d0:	080054a2 	.word	0x080054a2
 80046d4:	00000000 	.word	0x00000000
 80046d8:	0800448b 	.word	0x0800448b

080046dc <_printf_common>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	4691      	mov	r9, r2
 80046e2:	461f      	mov	r7, r3
 80046e4:	688a      	ldr	r2, [r1, #8]
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bfb8      	it	lt
 80046f0:	4613      	movlt	r3, r2
 80046f2:	f8c9 3000 	str.w	r3, [r9]
 80046f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046fa:	4606      	mov	r6, r0
 80046fc:	460c      	mov	r4, r1
 80046fe:	b112      	cbz	r2, 8004706 <_printf_common+0x2a>
 8004700:	3301      	adds	r3, #1
 8004702:	f8c9 3000 	str.w	r3, [r9]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	0699      	lsls	r1, r3, #26
 800470a:	bf42      	ittt	mi
 800470c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004710:	3302      	addmi	r3, #2
 8004712:	f8c9 3000 	strmi.w	r3, [r9]
 8004716:	6825      	ldr	r5, [r4, #0]
 8004718:	f015 0506 	ands.w	r5, r5, #6
 800471c:	d107      	bne.n	800472e <_printf_common+0x52>
 800471e:	f104 0a19 	add.w	sl, r4, #25
 8004722:	68e3      	ldr	r3, [r4, #12]
 8004724:	f8d9 2000 	ldr.w	r2, [r9]
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	42ab      	cmp	r3, r5
 800472c:	dc28      	bgt.n	8004780 <_printf_common+0xa4>
 800472e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	3300      	adds	r3, #0
 8004736:	bf18      	it	ne
 8004738:	2301      	movne	r3, #1
 800473a:	0692      	lsls	r2, r2, #26
 800473c:	d42d      	bmi.n	800479a <_printf_common+0xbe>
 800473e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004742:	4639      	mov	r1, r7
 8004744:	4630      	mov	r0, r6
 8004746:	47c0      	blx	r8
 8004748:	3001      	adds	r0, #1
 800474a:	d020      	beq.n	800478e <_printf_common+0xb2>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	68e5      	ldr	r5, [r4, #12]
 8004750:	f8d9 2000 	ldr.w	r2, [r9]
 8004754:	f003 0306 	and.w	r3, r3, #6
 8004758:	2b04      	cmp	r3, #4
 800475a:	bf08      	it	eq
 800475c:	1aad      	subeq	r5, r5, r2
 800475e:	68a3      	ldr	r3, [r4, #8]
 8004760:	6922      	ldr	r2, [r4, #16]
 8004762:	bf0c      	ite	eq
 8004764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004768:	2500      	movne	r5, #0
 800476a:	4293      	cmp	r3, r2
 800476c:	bfc4      	itt	gt
 800476e:	1a9b      	subgt	r3, r3, r2
 8004770:	18ed      	addgt	r5, r5, r3
 8004772:	f04f 0900 	mov.w	r9, #0
 8004776:	341a      	adds	r4, #26
 8004778:	454d      	cmp	r5, r9
 800477a:	d11a      	bne.n	80047b2 <_printf_common+0xd6>
 800477c:	2000      	movs	r0, #0
 800477e:	e008      	b.n	8004792 <_printf_common+0xb6>
 8004780:	2301      	movs	r3, #1
 8004782:	4652      	mov	r2, sl
 8004784:	4639      	mov	r1, r7
 8004786:	4630      	mov	r0, r6
 8004788:	47c0      	blx	r8
 800478a:	3001      	adds	r0, #1
 800478c:	d103      	bne.n	8004796 <_printf_common+0xba>
 800478e:	f04f 30ff 	mov.w	r0, #4294967295
 8004792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004796:	3501      	adds	r5, #1
 8004798:	e7c3      	b.n	8004722 <_printf_common+0x46>
 800479a:	18e1      	adds	r1, r4, r3
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	2030      	movs	r0, #48	; 0x30
 80047a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047a4:	4422      	add	r2, r4
 80047a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ae:	3302      	adds	r3, #2
 80047b0:	e7c5      	b.n	800473e <_printf_common+0x62>
 80047b2:	2301      	movs	r3, #1
 80047b4:	4622      	mov	r2, r4
 80047b6:	4639      	mov	r1, r7
 80047b8:	4630      	mov	r0, r6
 80047ba:	47c0      	blx	r8
 80047bc:	3001      	adds	r0, #1
 80047be:	d0e6      	beq.n	800478e <_printf_common+0xb2>
 80047c0:	f109 0901 	add.w	r9, r9, #1
 80047c4:	e7d8      	b.n	8004778 <_printf_common+0x9c>
	...

080047c8 <_printf_i>:
 80047c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80047d0:	460c      	mov	r4, r1
 80047d2:	7e09      	ldrb	r1, [r1, #24]
 80047d4:	b085      	sub	sp, #20
 80047d6:	296e      	cmp	r1, #110	; 0x6e
 80047d8:	4617      	mov	r7, r2
 80047da:	4606      	mov	r6, r0
 80047dc:	4698      	mov	r8, r3
 80047de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047e0:	f000 80b3 	beq.w	800494a <_printf_i+0x182>
 80047e4:	d822      	bhi.n	800482c <_printf_i+0x64>
 80047e6:	2963      	cmp	r1, #99	; 0x63
 80047e8:	d036      	beq.n	8004858 <_printf_i+0x90>
 80047ea:	d80a      	bhi.n	8004802 <_printf_i+0x3a>
 80047ec:	2900      	cmp	r1, #0
 80047ee:	f000 80b9 	beq.w	8004964 <_printf_i+0x19c>
 80047f2:	2958      	cmp	r1, #88	; 0x58
 80047f4:	f000 8083 	beq.w	80048fe <_printf_i+0x136>
 80047f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004800:	e032      	b.n	8004868 <_printf_i+0xa0>
 8004802:	2964      	cmp	r1, #100	; 0x64
 8004804:	d001      	beq.n	800480a <_printf_i+0x42>
 8004806:	2969      	cmp	r1, #105	; 0x69
 8004808:	d1f6      	bne.n	80047f8 <_printf_i+0x30>
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	0605      	lsls	r5, r0, #24
 8004810:	f103 0104 	add.w	r1, r3, #4
 8004814:	d52a      	bpl.n	800486c <_printf_i+0xa4>
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6011      	str	r1, [r2, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da03      	bge.n	8004826 <_printf_i+0x5e>
 800481e:	222d      	movs	r2, #45	; 0x2d
 8004820:	425b      	negs	r3, r3
 8004822:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004826:	486f      	ldr	r0, [pc, #444]	; (80049e4 <_printf_i+0x21c>)
 8004828:	220a      	movs	r2, #10
 800482a:	e039      	b.n	80048a0 <_printf_i+0xd8>
 800482c:	2973      	cmp	r1, #115	; 0x73
 800482e:	f000 809d 	beq.w	800496c <_printf_i+0x1a4>
 8004832:	d808      	bhi.n	8004846 <_printf_i+0x7e>
 8004834:	296f      	cmp	r1, #111	; 0x6f
 8004836:	d020      	beq.n	800487a <_printf_i+0xb2>
 8004838:	2970      	cmp	r1, #112	; 0x70
 800483a:	d1dd      	bne.n	80047f8 <_printf_i+0x30>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f043 0320 	orr.w	r3, r3, #32
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	e003      	b.n	800484e <_printf_i+0x86>
 8004846:	2975      	cmp	r1, #117	; 0x75
 8004848:	d017      	beq.n	800487a <_printf_i+0xb2>
 800484a:	2978      	cmp	r1, #120	; 0x78
 800484c:	d1d4      	bne.n	80047f8 <_printf_i+0x30>
 800484e:	2378      	movs	r3, #120	; 0x78
 8004850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004854:	4864      	ldr	r0, [pc, #400]	; (80049e8 <_printf_i+0x220>)
 8004856:	e055      	b.n	8004904 <_printf_i+0x13c>
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	1d19      	adds	r1, r3, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6011      	str	r1, [r2, #0]
 8004860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004868:	2301      	movs	r3, #1
 800486a:	e08c      	b.n	8004986 <_printf_i+0x1be>
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6011      	str	r1, [r2, #0]
 8004870:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004874:	bf18      	it	ne
 8004876:	b21b      	sxthne	r3, r3
 8004878:	e7cf      	b.n	800481a <_printf_i+0x52>
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	6825      	ldr	r5, [r4, #0]
 800487e:	1d18      	adds	r0, r3, #4
 8004880:	6010      	str	r0, [r2, #0]
 8004882:	0628      	lsls	r0, r5, #24
 8004884:	d501      	bpl.n	800488a <_printf_i+0xc2>
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	e002      	b.n	8004890 <_printf_i+0xc8>
 800488a:	0668      	lsls	r0, r5, #25
 800488c:	d5fb      	bpl.n	8004886 <_printf_i+0xbe>
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	4854      	ldr	r0, [pc, #336]	; (80049e4 <_printf_i+0x21c>)
 8004892:	296f      	cmp	r1, #111	; 0x6f
 8004894:	bf14      	ite	ne
 8004896:	220a      	movne	r2, #10
 8004898:	2208      	moveq	r2, #8
 800489a:	2100      	movs	r1, #0
 800489c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048a0:	6865      	ldr	r5, [r4, #4]
 80048a2:	60a5      	str	r5, [r4, #8]
 80048a4:	2d00      	cmp	r5, #0
 80048a6:	f2c0 8095 	blt.w	80049d4 <_printf_i+0x20c>
 80048aa:	6821      	ldr	r1, [r4, #0]
 80048ac:	f021 0104 	bic.w	r1, r1, #4
 80048b0:	6021      	str	r1, [r4, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d13d      	bne.n	8004932 <_printf_i+0x16a>
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	f040 808e 	bne.w	80049d8 <_printf_i+0x210>
 80048bc:	4665      	mov	r5, ip
 80048be:	2a08      	cmp	r2, #8
 80048c0:	d10b      	bne.n	80048da <_printf_i+0x112>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	d508      	bpl.n	80048da <_printf_i+0x112>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	bfde      	ittt	le
 80048d0:	2330      	movle	r3, #48	; 0x30
 80048d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048da:	ebac 0305 	sub.w	r3, ip, r5
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	f8cd 8000 	str.w	r8, [sp]
 80048e4:	463b      	mov	r3, r7
 80048e6:	aa03      	add	r2, sp, #12
 80048e8:	4621      	mov	r1, r4
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7ff fef6 	bl	80046dc <_printf_common>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d14d      	bne.n	8004990 <_printf_i+0x1c8>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	b005      	add	sp, #20
 80048fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048fe:	4839      	ldr	r0, [pc, #228]	; (80049e4 <_printf_i+0x21c>)
 8004900:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004904:	6813      	ldr	r3, [r2, #0]
 8004906:	6821      	ldr	r1, [r4, #0]
 8004908:	1d1d      	adds	r5, r3, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6015      	str	r5, [r2, #0]
 800490e:	060a      	lsls	r2, r1, #24
 8004910:	d50b      	bpl.n	800492a <_printf_i+0x162>
 8004912:	07ca      	lsls	r2, r1, #31
 8004914:	bf44      	itt	mi
 8004916:	f041 0120 	orrmi.w	r1, r1, #32
 800491a:	6021      	strmi	r1, [r4, #0]
 800491c:	b91b      	cbnz	r3, 8004926 <_printf_i+0x15e>
 800491e:	6822      	ldr	r2, [r4, #0]
 8004920:	f022 0220 	bic.w	r2, r2, #32
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	2210      	movs	r2, #16
 8004928:	e7b7      	b.n	800489a <_printf_i+0xd2>
 800492a:	064d      	lsls	r5, r1, #25
 800492c:	bf48      	it	mi
 800492e:	b29b      	uxthmi	r3, r3
 8004930:	e7ef      	b.n	8004912 <_printf_i+0x14a>
 8004932:	4665      	mov	r5, ip
 8004934:	fbb3 f1f2 	udiv	r1, r3, r2
 8004938:	fb02 3311 	mls	r3, r2, r1, r3
 800493c:	5cc3      	ldrb	r3, [r0, r3]
 800493e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004942:	460b      	mov	r3, r1
 8004944:	2900      	cmp	r1, #0
 8004946:	d1f5      	bne.n	8004934 <_printf_i+0x16c>
 8004948:	e7b9      	b.n	80048be <_printf_i+0xf6>
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	6825      	ldr	r5, [r4, #0]
 800494e:	6961      	ldr	r1, [r4, #20]
 8004950:	1d18      	adds	r0, r3, #4
 8004952:	6010      	str	r0, [r2, #0]
 8004954:	0628      	lsls	r0, r5, #24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	d501      	bpl.n	800495e <_printf_i+0x196>
 800495a:	6019      	str	r1, [r3, #0]
 800495c:	e002      	b.n	8004964 <_printf_i+0x19c>
 800495e:	066a      	lsls	r2, r5, #25
 8004960:	d5fb      	bpl.n	800495a <_printf_i+0x192>
 8004962:	8019      	strh	r1, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	6123      	str	r3, [r4, #16]
 8004968:	4665      	mov	r5, ip
 800496a:	e7b9      	b.n	80048e0 <_printf_i+0x118>
 800496c:	6813      	ldr	r3, [r2, #0]
 800496e:	1d19      	adds	r1, r3, #4
 8004970:	6011      	str	r1, [r2, #0]
 8004972:	681d      	ldr	r5, [r3, #0]
 8004974:	6862      	ldr	r2, [r4, #4]
 8004976:	2100      	movs	r1, #0
 8004978:	4628      	mov	r0, r5
 800497a:	f7fb fc49 	bl	8000210 <memchr>
 800497e:	b108      	cbz	r0, 8004984 <_printf_i+0x1bc>
 8004980:	1b40      	subs	r0, r0, r5
 8004982:	6060      	str	r0, [r4, #4]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2300      	movs	r3, #0
 800498a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498e:	e7a7      	b.n	80048e0 <_printf_i+0x118>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	462a      	mov	r2, r5
 8004994:	4639      	mov	r1, r7
 8004996:	4630      	mov	r0, r6
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d0aa      	beq.n	80048f4 <_printf_i+0x12c>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	079b      	lsls	r3, r3, #30
 80049a2:	d413      	bmi.n	80049cc <_printf_i+0x204>
 80049a4:	68e0      	ldr	r0, [r4, #12]
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	4298      	cmp	r0, r3
 80049aa:	bfb8      	it	lt
 80049ac:	4618      	movlt	r0, r3
 80049ae:	e7a3      	b.n	80048f8 <_printf_i+0x130>
 80049b0:	2301      	movs	r3, #1
 80049b2:	464a      	mov	r2, r9
 80049b4:	4639      	mov	r1, r7
 80049b6:	4630      	mov	r0, r6
 80049b8:	47c0      	blx	r8
 80049ba:	3001      	adds	r0, #1
 80049bc:	d09a      	beq.n	80048f4 <_printf_i+0x12c>
 80049be:	3501      	adds	r5, #1
 80049c0:	68e3      	ldr	r3, [r4, #12]
 80049c2:	9a03      	ldr	r2, [sp, #12]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	42ab      	cmp	r3, r5
 80049c8:	dcf2      	bgt.n	80049b0 <_printf_i+0x1e8>
 80049ca:	e7eb      	b.n	80049a4 <_printf_i+0x1dc>
 80049cc:	2500      	movs	r5, #0
 80049ce:	f104 0919 	add.w	r9, r4, #25
 80049d2:	e7f5      	b.n	80049c0 <_printf_i+0x1f8>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ac      	bne.n	8004932 <_printf_i+0x16a>
 80049d8:	7803      	ldrb	r3, [r0, #0]
 80049da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e2:	e76c      	b.n	80048be <_printf_i+0xf6>
 80049e4:	080054a9 	.word	0x080054a9
 80049e8:	080054ba 	.word	0x080054ba

080049ec <_sbrk_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4c06      	ldr	r4, [pc, #24]	; (8004a08 <_sbrk_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4605      	mov	r5, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	f7ff f9c4 	bl	8003d84 <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_sbrk_r+0x1a>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_sbrk_r+0x1a>
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20000370 	.word	0x20000370

08004a0c <__sread>:
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	460c      	mov	r4, r1
 8004a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a14:	f000 fae0 	bl	8004fd8 <_read_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	bfab      	itete	ge
 8004a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a20:	181b      	addge	r3, r3, r0
 8004a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a26:	bfac      	ite	ge
 8004a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a2a:	81a3      	strhlt	r3, [r4, #12]
 8004a2c:	bd10      	pop	{r4, pc}

08004a2e <__swrite>:
 8004a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a32:	461f      	mov	r7, r3
 8004a34:	898b      	ldrh	r3, [r1, #12]
 8004a36:	05db      	lsls	r3, r3, #23
 8004a38:	4605      	mov	r5, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	d505      	bpl.n	8004a4c <__swrite+0x1e>
 8004a40:	2302      	movs	r3, #2
 8004a42:	2200      	movs	r2, #0
 8004a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a48:	f000 f9b6 	bl	8004db8 <_lseek_r>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	4632      	mov	r2, r6
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a62:	f000 b869 	b.w	8004b38 <_write_r>

08004a66 <__sseek>:
 8004a66:	b510      	push	{r4, lr}
 8004a68:	460c      	mov	r4, r1
 8004a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6e:	f000 f9a3 	bl	8004db8 <_lseek_r>
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	bf15      	itete	ne
 8004a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a82:	81a3      	strheq	r3, [r4, #12]
 8004a84:	bf18      	it	ne
 8004a86:	81a3      	strhne	r3, [r4, #12]
 8004a88:	bd10      	pop	{r4, pc}

08004a8a <__sclose>:
 8004a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8e:	f000 b8d3 	b.w	8004c38 <_close_r>
	...

08004a94 <__swbuf_r>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	460e      	mov	r6, r1
 8004a98:	4614      	mov	r4, r2
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	b118      	cbz	r0, 8004aa6 <__swbuf_r+0x12>
 8004a9e:	6983      	ldr	r3, [r0, #24]
 8004aa0:	b90b      	cbnz	r3, 8004aa6 <__swbuf_r+0x12>
 8004aa2:	f7ff faa5 	bl	8003ff0 <__sinit>
 8004aa6:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <__swbuf_r+0x98>)
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	d12a      	bne.n	8004b02 <__swbuf_r+0x6e>
 8004aac:	686c      	ldr	r4, [r5, #4]
 8004aae:	69a3      	ldr	r3, [r4, #24]
 8004ab0:	60a3      	str	r3, [r4, #8]
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	071a      	lsls	r2, r3, #28
 8004ab6:	d52e      	bpl.n	8004b16 <__swbuf_r+0x82>
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	b363      	cbz	r3, 8004b16 <__swbuf_r+0x82>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	1ac0      	subs	r0, r0, r3
 8004ac2:	6963      	ldr	r3, [r4, #20]
 8004ac4:	b2f6      	uxtb	r6, r6
 8004ac6:	4283      	cmp	r3, r0
 8004ac8:	4637      	mov	r7, r6
 8004aca:	dc04      	bgt.n	8004ad6 <__swbuf_r+0x42>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 f948 	bl	8004d64 <_fflush_r>
 8004ad4:	bb28      	cbnz	r0, 8004b22 <__swbuf_r+0x8e>
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	60a3      	str	r3, [r4, #8]
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	701e      	strb	r6, [r3, #0]
 8004ae4:	6963      	ldr	r3, [r4, #20]
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	4283      	cmp	r3, r0
 8004aea:	d004      	beq.n	8004af6 <__swbuf_r+0x62>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d519      	bpl.n	8004b26 <__swbuf_r+0x92>
 8004af2:	2e0a      	cmp	r6, #10
 8004af4:	d117      	bne.n	8004b26 <__swbuf_r+0x92>
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f933 	bl	8004d64 <_fflush_r>
 8004afe:	b190      	cbz	r0, 8004b26 <__swbuf_r+0x92>
 8004b00:	e00f      	b.n	8004b22 <__swbuf_r+0x8e>
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <__swbuf_r+0x9c>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d101      	bne.n	8004b0c <__swbuf_r+0x78>
 8004b08:	68ac      	ldr	r4, [r5, #8]
 8004b0a:	e7d0      	b.n	8004aae <__swbuf_r+0x1a>
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <__swbuf_r+0xa0>)
 8004b0e:	429c      	cmp	r4, r3
 8004b10:	bf08      	it	eq
 8004b12:	68ec      	ldreq	r4, [r5, #12]
 8004b14:	e7cb      	b.n	8004aae <__swbuf_r+0x1a>
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 f81f 	bl	8004b5c <__swsetup_r>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0cc      	beq.n	8004abc <__swbuf_r+0x28>
 8004b22:	f04f 37ff 	mov.w	r7, #4294967295
 8004b26:	4638      	mov	r0, r7
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08005458 	.word	0x08005458
 8004b30:	08005478 	.word	0x08005478
 8004b34:	08005438 	.word	0x08005438

08004b38 <_write_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4c07      	ldr	r4, [pc, #28]	; (8004b58 <_write_r+0x20>)
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	4608      	mov	r0, r1
 8004b40:	4611      	mov	r1, r2
 8004b42:	2200      	movs	r2, #0
 8004b44:	6022      	str	r2, [r4, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7ff f8cb 	bl	8003ce2 <_write>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_write_r+0x1e>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_write_r+0x1e>
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20000370 	.word	0x20000370

08004b5c <__swsetup_r>:
 8004b5c:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <__swsetup_r+0xcc>)
 8004b5e:	b570      	push	{r4, r5, r6, lr}
 8004b60:	681d      	ldr	r5, [r3, #0]
 8004b62:	4606      	mov	r6, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	b125      	cbz	r5, 8004b72 <__swsetup_r+0x16>
 8004b68:	69ab      	ldr	r3, [r5, #24]
 8004b6a:	b913      	cbnz	r3, 8004b72 <__swsetup_r+0x16>
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f7ff fa3f 	bl	8003ff0 <__sinit>
 8004b72:	4b2e      	ldr	r3, [pc, #184]	; (8004c2c <__swsetup_r+0xd0>)
 8004b74:	429c      	cmp	r4, r3
 8004b76:	d10f      	bne.n	8004b98 <__swsetup_r+0x3c>
 8004b78:	686c      	ldr	r4, [r5, #4]
 8004b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	0715      	lsls	r5, r2, #28
 8004b82:	d42c      	bmi.n	8004bde <__swsetup_r+0x82>
 8004b84:	06d0      	lsls	r0, r2, #27
 8004b86:	d411      	bmi.n	8004bac <__swsetup_r+0x50>
 8004b88:	2209      	movs	r2, #9
 8004b8a:	6032      	str	r2, [r6, #0]
 8004b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	e03e      	b.n	8004c16 <__swsetup_r+0xba>
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <__swsetup_r+0xd4>)
 8004b9a:	429c      	cmp	r4, r3
 8004b9c:	d101      	bne.n	8004ba2 <__swsetup_r+0x46>
 8004b9e:	68ac      	ldr	r4, [r5, #8]
 8004ba0:	e7eb      	b.n	8004b7a <__swsetup_r+0x1e>
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <__swsetup_r+0xd8>)
 8004ba4:	429c      	cmp	r4, r3
 8004ba6:	bf08      	it	eq
 8004ba8:	68ec      	ldreq	r4, [r5, #12]
 8004baa:	e7e6      	b.n	8004b7a <__swsetup_r+0x1e>
 8004bac:	0751      	lsls	r1, r2, #29
 8004bae:	d512      	bpl.n	8004bd6 <__swsetup_r+0x7a>
 8004bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bb2:	b141      	cbz	r1, 8004bc6 <__swsetup_r+0x6a>
 8004bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	d002      	beq.n	8004bc2 <__swsetup_r+0x66>
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f000 f997 	bl	8004ef0 <_free_r>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	f043 0308 	orr.w	r3, r3, #8
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	b94b      	cbnz	r3, 8004bf6 <__swsetup_r+0x9a>
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d003      	beq.n	8004bf6 <__swsetup_r+0x9a>
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f917 	bl	8004e24 <__smakebuf_r>
 8004bf6:	89a2      	ldrh	r2, [r4, #12]
 8004bf8:	f012 0301 	ands.w	r3, r2, #1
 8004bfc:	d00c      	beq.n	8004c18 <__swsetup_r+0xbc>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60a3      	str	r3, [r4, #8]
 8004c02:	6963      	ldr	r3, [r4, #20]
 8004c04:	425b      	negs	r3, r3
 8004c06:	61a3      	str	r3, [r4, #24]
 8004c08:	6923      	ldr	r3, [r4, #16]
 8004c0a:	b953      	cbnz	r3, 8004c22 <__swsetup_r+0xc6>
 8004c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004c14:	d1ba      	bne.n	8004b8c <__swsetup_r+0x30>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	0792      	lsls	r2, r2, #30
 8004c1a:	bf58      	it	pl
 8004c1c:	6963      	ldrpl	r3, [r4, #20]
 8004c1e:	60a3      	str	r3, [r4, #8]
 8004c20:	e7f2      	b.n	8004c08 <__swsetup_r+0xac>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e7f7      	b.n	8004c16 <__swsetup_r+0xba>
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c
 8004c2c:	08005458 	.word	0x08005458
 8004c30:	08005478 	.word	0x08005478
 8004c34:	08005438 	.word	0x08005438

08004c38 <_close_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4c06      	ldr	r4, [pc, #24]	; (8004c54 <_close_r+0x1c>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4605      	mov	r5, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	f7ff f869 	bl	8003d1a <_close>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_close_r+0x1a>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_close_r+0x1a>
 8004c50:	602b      	str	r3, [r5, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	20000370 	.word	0x20000370

08004c58 <__sflush_r>:
 8004c58:	898a      	ldrh	r2, [r1, #12]
 8004c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5e:	4605      	mov	r5, r0
 8004c60:	0710      	lsls	r0, r2, #28
 8004c62:	460c      	mov	r4, r1
 8004c64:	d458      	bmi.n	8004d18 <__sflush_r+0xc0>
 8004c66:	684b      	ldr	r3, [r1, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dc05      	bgt.n	8004c78 <__sflush_r+0x20>
 8004c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dc02      	bgt.n	8004c78 <__sflush_r+0x20>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	d0f9      	beq.n	8004c72 <__sflush_r+0x1a>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c84:	682f      	ldr	r7, [r5, #0]
 8004c86:	6a21      	ldr	r1, [r4, #32]
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	d032      	beq.n	8004cf2 <__sflush_r+0x9a>
 8004c8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	075a      	lsls	r2, r3, #29
 8004c92:	d505      	bpl.n	8004ca0 <__sflush_r+0x48>
 8004c94:	6863      	ldr	r3, [r4, #4]
 8004c96:	1ac0      	subs	r0, r0, r3
 8004c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c9a:	b10b      	cbz	r3, 8004ca0 <__sflush_r+0x48>
 8004c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c9e:	1ac0      	subs	r0, r0, r3
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ca6:	6a21      	ldr	r1, [r4, #32]
 8004ca8:	4628      	mov	r0, r5
 8004caa:	47b0      	blx	r6
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	d106      	bne.n	8004cc0 <__sflush_r+0x68>
 8004cb2:	6829      	ldr	r1, [r5, #0]
 8004cb4:	291d      	cmp	r1, #29
 8004cb6:	d848      	bhi.n	8004d4a <__sflush_r+0xf2>
 8004cb8:	4a29      	ldr	r2, [pc, #164]	; (8004d60 <__sflush_r+0x108>)
 8004cba:	40ca      	lsrs	r2, r1
 8004cbc:	07d6      	lsls	r6, r2, #31
 8004cbe:	d544      	bpl.n	8004d4a <__sflush_r+0xf2>
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	6062      	str	r2, [r4, #4]
 8004cc4:	04d9      	lsls	r1, r3, #19
 8004cc6:	6922      	ldr	r2, [r4, #16]
 8004cc8:	6022      	str	r2, [r4, #0]
 8004cca:	d504      	bpl.n	8004cd6 <__sflush_r+0x7e>
 8004ccc:	1c42      	adds	r2, r0, #1
 8004cce:	d101      	bne.n	8004cd4 <__sflush_r+0x7c>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	b903      	cbnz	r3, 8004cd6 <__sflush_r+0x7e>
 8004cd4:	6560      	str	r0, [r4, #84]	; 0x54
 8004cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cd8:	602f      	str	r7, [r5, #0]
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d0c9      	beq.n	8004c72 <__sflush_r+0x1a>
 8004cde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	d002      	beq.n	8004cec <__sflush_r+0x94>
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 f902 	bl	8004ef0 <_free_r>
 8004cec:	2000      	movs	r0, #0
 8004cee:	6360      	str	r0, [r4, #52]	; 0x34
 8004cf0:	e7c0      	b.n	8004c74 <__sflush_r+0x1c>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b0      	blx	r6
 8004cf8:	1c41      	adds	r1, r0, #1
 8004cfa:	d1c8      	bne.n	8004c8e <__sflush_r+0x36>
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0c5      	beq.n	8004c8e <__sflush_r+0x36>
 8004d02:	2b1d      	cmp	r3, #29
 8004d04:	d001      	beq.n	8004d0a <__sflush_r+0xb2>
 8004d06:	2b16      	cmp	r3, #22
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0xb6>
 8004d0a:	602f      	str	r7, [r5, #0]
 8004d0c:	e7b1      	b.n	8004c72 <__sflush_r+0x1a>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	e7ad      	b.n	8004c74 <__sflush_r+0x1c>
 8004d18:	690f      	ldr	r7, [r1, #16]
 8004d1a:	2f00      	cmp	r7, #0
 8004d1c:	d0a9      	beq.n	8004c72 <__sflush_r+0x1a>
 8004d1e:	0793      	lsls	r3, r2, #30
 8004d20:	680e      	ldr	r6, [r1, #0]
 8004d22:	bf08      	it	eq
 8004d24:	694b      	ldreq	r3, [r1, #20]
 8004d26:	600f      	str	r7, [r1, #0]
 8004d28:	bf18      	it	ne
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	eba6 0807 	sub.w	r8, r6, r7
 8004d30:	608b      	str	r3, [r1, #8]
 8004d32:	f1b8 0f00 	cmp.w	r8, #0
 8004d36:	dd9c      	ble.n	8004c72 <__sflush_r+0x1a>
 8004d38:	4643      	mov	r3, r8
 8004d3a:	463a      	mov	r2, r7
 8004d3c:	6a21      	ldr	r1, [r4, #32]
 8004d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b0      	blx	r6
 8004d44:	2800      	cmp	r0, #0
 8004d46:	dc06      	bgt.n	8004d56 <__sflush_r+0xfe>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	e78e      	b.n	8004c74 <__sflush_r+0x1c>
 8004d56:	4407      	add	r7, r0
 8004d58:	eba8 0800 	sub.w	r8, r8, r0
 8004d5c:	e7e9      	b.n	8004d32 <__sflush_r+0xda>
 8004d5e:	bf00      	nop
 8004d60:	20400001 	.word	0x20400001

08004d64 <_fflush_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	4605      	mov	r5, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	b1db      	cbz	r3, 8004da6 <_fflush_r+0x42>
 8004d6e:	b118      	cbz	r0, 8004d78 <_fflush_r+0x14>
 8004d70:	6983      	ldr	r3, [r0, #24]
 8004d72:	b90b      	cbnz	r3, 8004d78 <_fflush_r+0x14>
 8004d74:	f7ff f93c 	bl	8003ff0 <__sinit>
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <_fflush_r+0x48>)
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	d109      	bne.n	8004d92 <_fflush_r+0x2e>
 8004d7e:	686c      	ldr	r4, [r5, #4]
 8004d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d84:	b17b      	cbz	r3, 8004da6 <_fflush_r+0x42>
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d8e:	f7ff bf63 	b.w	8004c58 <__sflush_r>
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <_fflush_r+0x4c>)
 8004d94:	429c      	cmp	r4, r3
 8004d96:	d101      	bne.n	8004d9c <_fflush_r+0x38>
 8004d98:	68ac      	ldr	r4, [r5, #8]
 8004d9a:	e7f1      	b.n	8004d80 <_fflush_r+0x1c>
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <_fflush_r+0x50>)
 8004d9e:	429c      	cmp	r4, r3
 8004da0:	bf08      	it	eq
 8004da2:	68ec      	ldreq	r4, [r5, #12]
 8004da4:	e7ec      	b.n	8004d80 <_fflush_r+0x1c>
 8004da6:	2000      	movs	r0, #0
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	08005458 	.word	0x08005458
 8004db0:	08005478 	.word	0x08005478
 8004db4:	08005438 	.word	0x08005438

08004db8 <_lseek_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4c07      	ldr	r4, [pc, #28]	; (8004dd8 <_lseek_r+0x20>)
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	4608      	mov	r0, r1
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	6022      	str	r2, [r4, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f7fe ffce 	bl	8003d68 <_lseek>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_lseek_r+0x1e>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_lseek_r+0x1e>
 8004dd4:	602b      	str	r3, [r5, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	20000370 	.word	0x20000370

08004ddc <__swhatbuf_r>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	460e      	mov	r6, r1
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	2900      	cmp	r1, #0
 8004de6:	b096      	sub	sp, #88	; 0x58
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	da07      	bge.n	8004dfe <__swhatbuf_r+0x22>
 8004dee:	2300      	movs	r3, #0
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	89b3      	ldrh	r3, [r6, #12]
 8004df4:	061a      	lsls	r2, r3, #24
 8004df6:	d410      	bmi.n	8004e1a <__swhatbuf_r+0x3e>
 8004df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dfc:	e00e      	b.n	8004e1c <__swhatbuf_r+0x40>
 8004dfe:	466a      	mov	r2, sp
 8004e00:	f000 f8fc 	bl	8004ffc <_fstat_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	dbf2      	blt.n	8004dee <__swhatbuf_r+0x12>
 8004e08:	9a01      	ldr	r2, [sp, #4]
 8004e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e12:	425a      	negs	r2, r3
 8004e14:	415a      	adcs	r2, r3
 8004e16:	602a      	str	r2, [r5, #0]
 8004e18:	e7ee      	b.n	8004df8 <__swhatbuf_r+0x1c>
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	b016      	add	sp, #88	; 0x58
 8004e22:	bd70      	pop	{r4, r5, r6, pc}

08004e24 <__smakebuf_r>:
 8004e24:	898b      	ldrh	r3, [r1, #12]
 8004e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e28:	079d      	lsls	r5, r3, #30
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	d507      	bpl.n	8004e40 <__smakebuf_r+0x1c>
 8004e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6163      	str	r3, [r4, #20]
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	ab01      	add	r3, sp, #4
 8004e42:	466a      	mov	r2, sp
 8004e44:	f7ff ffca 	bl	8004ddc <__swhatbuf_r>
 8004e48:	9900      	ldr	r1, [sp, #0]
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f7ff f959 	bl	8004104 <_malloc_r>
 8004e52:	b948      	cbnz	r0, 8004e68 <__smakebuf_r+0x44>
 8004e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d4ef      	bmi.n	8004e3c <__smakebuf_r+0x18>
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	81a3      	strh	r3, [r4, #12]
 8004e66:	e7e3      	b.n	8004e30 <__smakebuf_r+0xc>
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <__smakebuf_r+0x7c>)
 8004e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	6020      	str	r0, [r4, #0]
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	81a3      	strh	r3, [r4, #12]
 8004e76:	9b00      	ldr	r3, [sp, #0]
 8004e78:	6163      	str	r3, [r4, #20]
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	6120      	str	r0, [r4, #16]
 8004e7e:	b15b      	cbz	r3, 8004e98 <__smakebuf_r+0x74>
 8004e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 f8cb 	bl	8005020 <_isatty_r>
 8004e8a:	b128      	cbz	r0, 8004e98 <__smakebuf_r+0x74>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	431d      	orrs	r5, r3
 8004e9c:	81a5      	strh	r5, [r4, #12]
 8004e9e:	e7cd      	b.n	8004e3c <__smakebuf_r+0x18>
 8004ea0:	08003fb9 	.word	0x08003fb9

08004ea4 <memcpy>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	1e43      	subs	r3, r0, #1
 8004ea8:	440a      	add	r2, r1
 8004eaa:	4291      	cmp	r1, r2
 8004eac:	d100      	bne.n	8004eb0 <memcpy+0xc>
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb8:	e7f7      	b.n	8004eaa <memcpy+0x6>

08004eba <memmove>:
 8004eba:	4288      	cmp	r0, r1
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	eb01 0302 	add.w	r3, r1, r2
 8004ec2:	d807      	bhi.n	8004ed4 <memmove+0x1a>
 8004ec4:	1e42      	subs	r2, r0, #1
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	d00a      	beq.n	8004ee0 <memmove+0x26>
 8004eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ece:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ed2:	e7f8      	b.n	8004ec6 <memmove+0xc>
 8004ed4:	4283      	cmp	r3, r0
 8004ed6:	d9f5      	bls.n	8004ec4 <memmove+0xa>
 8004ed8:	1881      	adds	r1, r0, r2
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	42d3      	cmn	r3, r2
 8004ede:	d100      	bne.n	8004ee2 <memmove+0x28>
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ee6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004eea:	e7f7      	b.n	8004edc <memmove+0x22>

08004eec <__malloc_lock>:
 8004eec:	4770      	bx	lr

08004eee <__malloc_unlock>:
 8004eee:	4770      	bx	lr

08004ef0 <_free_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	d045      	beq.n	8004f84 <_free_r+0x94>
 8004ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efc:	1f0c      	subs	r4, r1, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bfb8      	it	lt
 8004f02:	18e4      	addlt	r4, r4, r3
 8004f04:	f7ff fff2 	bl	8004eec <__malloc_lock>
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <_free_r+0x98>)
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	b933      	cbnz	r3, 8004f1e <_free_r+0x2e>
 8004f10:	6063      	str	r3, [r4, #4]
 8004f12:	6014      	str	r4, [r2, #0]
 8004f14:	4628      	mov	r0, r5
 8004f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f1a:	f7ff bfe8 	b.w	8004eee <__malloc_unlock>
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	d90c      	bls.n	8004f3c <_free_r+0x4c>
 8004f22:	6821      	ldr	r1, [r4, #0]
 8004f24:	1862      	adds	r2, r4, r1
 8004f26:	4293      	cmp	r3, r2
 8004f28:	bf04      	itt	eq
 8004f2a:	681a      	ldreq	r2, [r3, #0]
 8004f2c:	685b      	ldreq	r3, [r3, #4]
 8004f2e:	6063      	str	r3, [r4, #4]
 8004f30:	bf04      	itt	eq
 8004f32:	1852      	addeq	r2, r2, r1
 8004f34:	6022      	streq	r2, [r4, #0]
 8004f36:	6004      	str	r4, [r0, #0]
 8004f38:	e7ec      	b.n	8004f14 <_free_r+0x24>
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	b10a      	cbz	r2, 8004f44 <_free_r+0x54>
 8004f40:	42a2      	cmp	r2, r4
 8004f42:	d9fa      	bls.n	8004f3a <_free_r+0x4a>
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	1858      	adds	r0, r3, r1
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d10b      	bne.n	8004f64 <_free_r+0x74>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	4401      	add	r1, r0
 8004f50:	1858      	adds	r0, r3, r1
 8004f52:	4282      	cmp	r2, r0
 8004f54:	6019      	str	r1, [r3, #0]
 8004f56:	d1dd      	bne.n	8004f14 <_free_r+0x24>
 8004f58:	6810      	ldr	r0, [r2, #0]
 8004f5a:	6852      	ldr	r2, [r2, #4]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	4401      	add	r1, r0
 8004f60:	6019      	str	r1, [r3, #0]
 8004f62:	e7d7      	b.n	8004f14 <_free_r+0x24>
 8004f64:	d902      	bls.n	8004f6c <_free_r+0x7c>
 8004f66:	230c      	movs	r3, #12
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	e7d3      	b.n	8004f14 <_free_r+0x24>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	1821      	adds	r1, r4, r0
 8004f70:	428a      	cmp	r2, r1
 8004f72:	bf04      	itt	eq
 8004f74:	6811      	ldreq	r1, [r2, #0]
 8004f76:	6852      	ldreq	r2, [r2, #4]
 8004f78:	6062      	str	r2, [r4, #4]
 8004f7a:	bf04      	itt	eq
 8004f7c:	1809      	addeq	r1, r1, r0
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	605c      	str	r4, [r3, #4]
 8004f82:	e7c7      	b.n	8004f14 <_free_r+0x24>
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
 8004f86:	bf00      	nop
 8004f88:	20000294 	.word	0x20000294

08004f8c <_realloc_r>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	4607      	mov	r7, r0
 8004f90:	4614      	mov	r4, r2
 8004f92:	460e      	mov	r6, r1
 8004f94:	b921      	cbnz	r1, 8004fa0 <_realloc_r+0x14>
 8004f96:	4611      	mov	r1, r2
 8004f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f9c:	f7ff b8b2 	b.w	8004104 <_malloc_r>
 8004fa0:	b922      	cbnz	r2, 8004fac <_realloc_r+0x20>
 8004fa2:	f7ff ffa5 	bl	8004ef0 <_free_r>
 8004fa6:	4625      	mov	r5, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fac:	f000 f848 	bl	8005040 <_malloc_usable_size_r>
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d20f      	bcs.n	8004fd4 <_realloc_r+0x48>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f7ff f8a4 	bl	8004104 <_malloc_r>
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0f2      	beq.n	8004fa8 <_realloc_r+0x1c>
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	f7ff ff6d 	bl	8004ea4 <memcpy>
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f7ff ff8f 	bl	8004ef0 <_free_r>
 8004fd2:	e7e9      	b.n	8004fa8 <_realloc_r+0x1c>
 8004fd4:	4635      	mov	r5, r6
 8004fd6:	e7e7      	b.n	8004fa8 <_realloc_r+0x1c>

08004fd8 <_read_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4c07      	ldr	r4, [pc, #28]	; (8004ff8 <_read_r+0x20>)
 8004fdc:	4605      	mov	r5, r0
 8004fde:	4608      	mov	r0, r1
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	6022      	str	r2, [r4, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f7fe fe5e 	bl	8003ca8 <_read>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_read_r+0x1e>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_read_r+0x1e>
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	20000370 	.word	0x20000370

08004ffc <_fstat_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4c07      	ldr	r4, [pc, #28]	; (800501c <_fstat_r+0x20>)
 8005000:	2300      	movs	r3, #0
 8005002:	4605      	mov	r5, r0
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	f7fe fe92 	bl	8003d32 <_fstat>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d102      	bne.n	8005018 <_fstat_r+0x1c>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	b103      	cbz	r3, 8005018 <_fstat_r+0x1c>
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	bd38      	pop	{r3, r4, r5, pc}
 800501a:	bf00      	nop
 800501c:	20000370 	.word	0x20000370

08005020 <_isatty_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4c06      	ldr	r4, [pc, #24]	; (800503c <_isatty_r+0x1c>)
 8005024:	2300      	movs	r3, #0
 8005026:	4605      	mov	r5, r0
 8005028:	4608      	mov	r0, r1
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	f7fe fe91 	bl	8003d52 <_isatty>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_isatty_r+0x1a>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	b103      	cbz	r3, 800503a <_isatty_r+0x1a>
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	20000370 	.word	0x20000370

08005040 <_malloc_usable_size_r>:
 8005040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005044:	1f18      	subs	r0, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	bfbc      	itt	lt
 800504a:	580b      	ldrlt	r3, [r1, r0]
 800504c:	18c0      	addlt	r0, r0, r3
 800504e:	4770      	bx	lr

08005050 <_init>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr

0800505c <_fini>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr
